
children_math_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000026b6  0000274a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080012e  0080012e  00002818  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000258  00000000  00000000  00002f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f36  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  000050fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a3  00000000  00000000  00005a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00006e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000604  00000000  00000000  000073fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ffa  00000000  00000000  00007a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000099fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


  
int main(void)
{
	LCD_init();
      92:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_init>
	Keypad_init();
      96:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <Keypad_init>
	Timer_CTC_interrupt_enable();
      9a:	0e 94 55 12 	call	0x24aa	; 0x24aa <Timer_CTC_interrupt_enable>
    Button_vinit(OUTPUT_PORT,RIGHT_BUTTON);
      9e:	84 e4       	ldi	r24, 0x44	; 68
      a0:	60 e0       	ldi	r22, 0x00	; 0
      a2:	0e 94 4b 12 	call	0x2496	; 0x2496 <Button_vinit>
	Button_vinit(OUTPUT_PORT,OK_BUTTON);
      a6:	84 e4       	ldi	r24, 0x44	; 68
      a8:	61 e0       	ldi	r22, 0x01	; 1
      aa:	0e 94 4b 12 	call	0x2496	; 0x2496 <Button_vinit>
	Button_vinit(OUTPUT_PORT,LEFT_BUTTON);
      ae:	84 e4       	ldi	r24, 0x44	; 68
      b0:	62 e0       	ldi	r22, 0x02	; 2
      b2:	0e 94 4b 12 	call	0x2496	; 0x2496 <Button_vinit>
	Led_vinit(OUTPUT_PORT,GREEN_LED);
      b6:	84 e4       	ldi	r24, 0x44	; 68
      b8:	63 e0       	ldi	r22, 0x03	; 3
      ba:	0e 94 35 12 	call	0x246a	; 0x246a <Led_vinit>
	Led_vinit(OUTPUT_PORT,RED_LED);
      be:	84 e4       	ldi	r24, 0x44	; 68
      c0:	64 e0       	ldi	r22, 0x04	; 4
      c2:	0e 94 35 12 	call	0x246a	; 0x246a <Led_vinit>
	LCD_Send_Cmd(DISPLAY_OFF_CURSOR_OFF);
      c6:	88 e0       	ldi	r24, 0x08	; 8
      c8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
	LCD_Move_cursor(1,4);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	64 e0       	ldi	r22, 0x04	; 4
      d0:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	LCD_String("CHILDREN");
      d4:	80 e6       	ldi	r24, 0x60	; 96
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
	LCD_Move_cursor(2,6);
      dc:	82 e0       	ldi	r24, 0x02	; 2
      de:	66 e0       	ldi	r22, 0x06	; 6
      e0:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	LCD_String("MATH");
      e4:	89 e6       	ldi	r24, 0x69	; 105
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
	LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
      ec:	8c e0       	ldi	r24, 0x0C	; 12
      ee:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9d e3       	ldi	r25, 0x3D	; 61
      f6:	a9 e4       	ldi	r26, 0x49	; 73
      f8:	81 50       	subi	r24, 0x01	; 1
      fa:	90 40       	sbci	r25, 0x00	; 0
      fc:	a0 40       	sbci	r26, 0x00	; 0
      fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x66>
     100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x70>
     102:	00 00       	nop
	_delay_ms(3000);	
	LCD_Clear_Screen();
     104:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
	unsigned char enbable=1;//this varible is taking action in the loop


    while(1)
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
     108:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_String("CHILDREN");
	LCD_Move_cursor(2,6);
	LCD_String("MATH");
	LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
	_delay_ms(3000);	
	LCD_Clear_Screen();
     10a:	11 e0       	ldi	r17, 0x01	; 1
			 else if (position==4)
			 {
				 LCD_Move_cursor(1,1);
				 LCD_String("complex random");
			 }
			 enbable=0;
     10c:	c0 e0       	ldi	r28, 0x00	; 0
				 LCD_String("simple random");
			 }
			 else if (position==4)
			 {
				 LCD_Move_cursor(1,1);
				 LCD_String("complex random");
     10e:	0f 2e       	mov	r0, r31
     110:	f0 ea       	ldi	r31, 0xA0	; 160
     112:	6f 2e       	mov	r6, r31
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	7f 2e       	mov	r7, r31
     118:	f0 2d       	mov	r31, r0
			 */
			 
			 else if (position==3)
			 {
				 LCD_Move_cursor(1,1);
				 LCD_String("simple random");
     11a:	0f 2e       	mov	r0, r31
     11c:	f2 e9       	ldi	r31, 0x92	; 146
     11e:	af 2e       	mov	r10, r31
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	bf 2e       	mov	r11, r31
     124:	f0 2d       	mov	r31, r0
				LCD_String("subtraction");
			 }
			 else if (position==2)
			 {
			    LCD_Move_cursor(1,2);
				LCD_String("multiplication");
     126:	0f 2e       	mov	r0, r31
     128:	f3 e8       	ldi	r31, 0x83	; 131
     12a:	8f 2e       	mov	r8, r31
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	9f 2e       	mov	r9, r31
     130:	f0 2d       	mov	r31, r0
				LCD_String("Addition");
			 }
			 else if (position==1)
			 {
			    LCD_Move_cursor(1,3);
				LCD_String("subtraction");
     132:	0f 2e       	mov	r0, r31
     134:	f7 e7       	ldi	r31, 0x77	; 119
     136:	cf 2e       	mov	r12, r31
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	df 2e       	mov	r13, r31
     13c:	f0 2d       	mov	r31, r0
			   LCD_Move_cursor(2,16);
			   LCD_Send_Char('>');
			 if (position==0)
			 {
				LCD_Move_cursor(1,4);
				LCD_String("Addition");
     13e:	0f 2e       	mov	r0, r31
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	ef 2e       	mov	r14, r31
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0xbe>
	unsigned char enbable=1;//this varible is taking action in the loop


    while(1)
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
     14c:	dc 2f       	mov	r29, r28
			enbable=1;
			break;
		}						
		}
		while(Button_u8read(OUTPUT_PORT,OK_BUTTON)==1);
		switch (position)
     14e:	11 e0       	ldi	r17, 0x01	; 1
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
	    while(1)
		{
            
		  if (enbable==1)
     150:	11 30       	cpi	r17, 0x01	; 1
     152:	09 f0       	breq	.+2      	; 0x156 <main+0xc4>
     154:	52 c0       	rjmp	.+164    	; 0x1fa <main+0x168>
		   {
			   LCD_Clear_Screen();
     156:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
			   LCD_Send_Cmd(DISPLAY_OFF_CURSOR_OFF);
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			   LCD_Move_cursor(2,1);
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			   LCD_Send_Char('<');
     168:	8c e3       	ldi	r24, 0x3C	; 60
     16a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			   LCD_Move_cursor(2,8);
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	68 e0       	ldi	r22, 0x08	; 8
     172:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			   LCD_Send_Char('O');
     176:	8f e4       	ldi	r24, 0x4F	; 79
     178:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			   LCD_Send_Char('K');
     17c:	8b e4       	ldi	r24, 0x4B	; 75
     17e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			   LCD_Move_cursor(2,16);
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	60 e1       	ldi	r22, 0x10	; 16
     186:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			   LCD_Send_Char('>');
     18a:	8e e3       	ldi	r24, 0x3E	; 62
     18c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			 if (position==0)
     190:	dd 23       	and	r29, r29
     192:	41 f4       	brne	.+16     	; 0x1a4 <main+0x112>
			 {
				LCD_Move_cursor(1,4);
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	64 e0       	ldi	r22, 0x04	; 4
     198:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("Addition");
     19c:	c7 01       	movw	r24, r14
     19e:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     1a2:	27 c0       	rjmp	.+78     	; 0x1f2 <main+0x160>
			 }
			 else if (position==1)
     1a4:	d1 30       	cpi	r29, 0x01	; 1
     1a6:	41 f4       	brne	.+16     	; 0x1b8 <main+0x126>
			 {
			    LCD_Move_cursor(1,3);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	63 e0       	ldi	r22, 0x03	; 3
     1ac:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("subtraction");
     1b0:	c6 01       	movw	r24, r12
     1b2:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <main+0x160>
			 }
			 else if (position==2)
     1b8:	d2 30       	cpi	r29, 0x02	; 2
     1ba:	41 f4       	brne	.+16     	; 0x1cc <main+0x13a>
			 {
			    LCD_Move_cursor(1,2);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	62 e0       	ldi	r22, 0x02	; 2
     1c0:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("multiplication");
     1c4:	c4 01       	movw	r24, r8
     1c6:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <main+0x160>
				 LCD_Move_cursor(1,5);
				 LCD_String("division");
			 }
			 */
			 
			 else if (position==3)
     1cc:	d3 30       	cpi	r29, 0x03	; 3
     1ce:	41 f4       	brne	.+16     	; 0x1e0 <main+0x14e>
			 {
				 LCD_Move_cursor(1,1);
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	61 e0       	ldi	r22, 0x01	; 1
     1d4:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				 LCD_String("simple random");
     1d8:	c5 01       	movw	r24, r10
     1da:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     1de:	09 c0       	rjmp	.+18     	; 0x1f2 <main+0x160>
			 }
			 else if (position==4)
     1e0:	d4 30       	cpi	r29, 0x04	; 4
     1e2:	39 f4       	brne	.+14     	; 0x1f2 <main+0x160>
			 {
				 LCD_Move_cursor(1,1);
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				 LCD_String("complex random");
     1ec:	c3 01       	movw	r24, r6
     1ee:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 }
			 enbable=0;
			 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     1f2:	8c e0       	ldi	r24, 0x0C	; 12
     1f4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			 else if (position==4)
			 {
				 LCD_Move_cursor(1,1);
				 LCD_String("complex random");
			 }
			 enbable=0;
     1f8:	1c 2f       	mov	r17, r28
			 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
		   }			
		 
		 if (Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
     1fa:	84 e4       	ldi	r24, 0x44	; 68
     1fc:	6c 2f       	mov	r22, r28
     1fe:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	69 f4       	brne	.+26     	; 0x220 <main+0x18e>
		 {
			 if (position>=4)
     206:	d4 30       	cpi	r29, 0x04	; 4
     208:	10 f4       	brcc	.+4      	; 0x20e <main+0x17c>
			 {
				 position=0;
			 }
			 else
			 {
			 position++ ;
     20a:	df 5f       	subi	r29, 0xFF	; 255
     20c:	01 c0       	rjmp	.+2      	; 0x210 <main+0x17e>
		 
		 if (Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
		 {
			 if (position>=4)
			 {
				 position=0;
     20e:	dc 2f       	mov	r29, r28
			 else
			 {
			 position++ ;
			 }
			 enbable=1;	
			 while(Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1);	 
     210:	84 e4       	ldi	r24, 0x44	; 68
     212:	6c 2f       	mov	r22, r28
     214:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	d1 f3       	breq	.-12     	; 0x210 <main+0x17e>
			 }
			 else
			 {
			 position++ ;
			 }
			 enbable=1;	
     21c:	11 e0       	ldi	r17, 0x01	; 1
     21e:	98 cf       	rjmp	.-208    	; 0x150 <main+0xbe>
			 while(Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1);	 
		 }	
		 else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
     220:	84 e4       	ldi	r24, 0x44	; 68
     222:	62 e0       	ldi	r22, 0x02	; 2
     224:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <main+0x1b4>
		 {
			 if (position==0)
     22c:	dd 23       	and	r29, r29
     22e:	11 f0       	breq	.+4      	; 0x234 <main+0x1a2>
			 {
				position=4; 
			 }	
			 else
			 {
				position--; 			 
     230:	d1 50       	subi	r29, 0x01	; 1
     232:	01 c0       	rjmp	.+2      	; 0x236 <main+0x1a4>
		 }	
		 else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
		 {
			 if (position==0)
			 {
				position=4; 
     234:	d4 e0       	ldi	r29, 0x04	; 4
			 else
			 {
				position--; 			 
		     }
			 enbable=1;
			 while(Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);	
     236:	84 e4       	ldi	r24, 0x44	; 68
     238:	62 e0       	ldi	r22, 0x02	; 2
     23a:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	d1 f3       	breq	.-12     	; 0x236 <main+0x1a4>
			 }	
			 else
			 {
				position--; 			 
		     }
			 enbable=1;
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	85 cf       	rjmp	.-246    	; 0x150 <main+0xbe>
			 while(Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);	
		}
		else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1)
     246:	84 e4       	ldi	r24, 0x44	; 68
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	09 f0       	breq	.+2      	; 0x254 <main+0x1c2>
     252:	7e cf       	rjmp	.-260    	; 0x150 <main+0xbe>
			
			enbable=1;
			break;
		}						
		}
		while(Button_u8read(OUTPUT_PORT,OK_BUTTON)==1);
     254:	84 e4       	ldi	r24, 0x44	; 68
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	d1 f3       	breq	.-12     	; 0x254 <main+0x1c2>
		switch (position)
     260:	d2 30       	cpi	r29, 0x02	; 2
     262:	d9 f0       	breq	.+54     	; 0x29a <main+0x208>
     264:	d3 30       	cpi	r29, 0x03	; 3
     266:	30 f4       	brcc	.+12     	; 0x274 <main+0x1e2>
     268:	dd 23       	and	r29, r29
     26a:	51 f0       	breq	.+20     	; 0x280 <main+0x1ee>
     26c:	d1 30       	cpi	r29, 0x01	; 1
     26e:	09 f0       	breq	.+2      	; 0x272 <main+0x1e0>
     270:	6d cf       	rjmp	.-294    	; 0x14c <main+0xba>
     272:	0c c0       	rjmp	.+24     	; 0x28c <main+0x1fa>
     274:	d3 30       	cpi	r29, 0x03	; 3
     276:	c1 f0       	breq	.+48     	; 0x2a8 <main+0x216>
     278:	d4 30       	cpi	r29, 0x04	; 4
     27a:	09 f0       	breq	.+2      	; 0x27e <main+0x1ec>
     27c:	67 cf       	rjmp	.-306    	; 0x14c <main+0xba>
     27e:	1e c0       	rjmp	.+60     	; 0x2bc <main+0x22a>
		{
			case 0:
			 simple_random_var=0;
     280:	c0 93 31 01 	sts	0x0131, r28
			 addition_mood();
     284:	0e 94 91 0b 	call	0x1722	; 0x1722 <addition_mood>
			break;
     288:	11 e0       	ldi	r17, 0x01	; 1
     28a:	62 cf       	rjmp	.-316    	; 0x150 <main+0xbe>
			
			case 1:
			 simple_random_var=0;
     28c:	c0 93 31 01 	sts	0x0131, r28
			 subtraction_mood();
     290:	0e 94 15 08 	call	0x102a	; 0x102a <subtraction_mood>
	unsigned char enbable=1;//this varible is taking action in the loop


    while(1)
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
     294:	dc 2f       	mov	r29, r28
			break;
			
			case 1:
			 simple_random_var=0;
			 subtraction_mood();
			break;
     296:	11 e0       	ldi	r17, 0x01	; 1
     298:	5b cf       	rjmp	.-330    	; 0x150 <main+0xbe>
			
			case 2:
			 simple_random_var=0;
     29a:	c0 93 31 01 	sts	0x0131, r28
			 multiplication_mood();
     29e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <multiplication_mood>
	unsigned char enbable=1;//this varible is taking action in the loop


    while(1)
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
     2a2:	dc 2f       	mov	r29, r28
			break;
			
			case 2:
			 simple_random_var=0;
			 multiplication_mood();
			break;
     2a4:	11 e0       	ldi	r17, 0x01	; 1
     2a6:	54 cf       	rjmp	.-344    	; 0x150 <main+0xbe>
			
			case 3:
			  simple_random_var=1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 31 01 	sts	0x0131, r24
			  simple_random_correct_answer=1;
     2ae:	80 93 af 00 	sts	0x00AF, r24
			  simple_random();
     2b2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <simple_random>
	unsigned char enbable=1;//this varible is taking action in the loop


    while(1)
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
     2b6:	dc 2f       	mov	r29, r28
			
			case 3:
			  simple_random_var=1;
			  simple_random_correct_answer=1;
			  simple_random();
			break;
     2b8:	11 e0       	ldi	r17, 0x01	; 1
     2ba:	4a cf       	rjmp	.-364    	; 0x150 <main+0xbe>
			
			case 4:
			 simple_random_var=1;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 31 01 	sts	0x0131, r24
             simple_random_difficalty=0;
     2c2:	c0 93 2f 01 	sts	0x012F, r28
             simple_random_correct_answer=1;//if this variable is one then the answer in simple random mood was correct
     2c6:	80 93 af 00 	sts	0x00AF, r24
             simple_random_score=0;
     2ca:	c0 93 2e 01 	sts	0x012E, r28
			 complex_random();
     2ce:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <complex_random>
	unsigned char enbable=1;//this varible is taking action in the loop


    while(1)
    {
		unsigned char position=0;//this varible is an indiction for the position of the user on the lcd choises
     2d2:	dc 2f       	mov	r29, r28
			 simple_random_var=1;
             simple_random_difficalty=0;
             simple_random_correct_answer=1;//if this variable is one then the answer in simple random mood was correct
             simple_random_score=0;
			 complex_random();
			break;
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	3c cf       	rjmp	.-392    	; 0x150 <main+0xbe>

000002d8 <__vector_10>:
    }
}


ISR(TIMER0_COMP_vect)
{
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	8f 93       	push	r24
	countner++;
     2e4:	80 91 30 01 	lds	r24, 0x0130
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	80 93 30 01 	sts	0x0130, r24
}
     2ee:	8f 91       	pop	r24
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	1f 90       	pop	r1
     2f8:	18 95       	reti

000002fa <DIO_SetPinDir>:
#include "STD_MACROS1.h" 
#include <avr/io.h>
#include "DIO_DRIVER.h"
void DIO_SetPinDir(unsigned char port_name,unsigned char pin,unsigned char dir)
{
	switch (port_name)
     2fa:	84 34       	cpi	r24, 0x44	; 68
     2fc:	09 f4       	brne	.+2      	; 0x300 <DIO_SetPinDir+0x6>
     2fe:	79 c0       	rjmp	.+242    	; 0x3f2 <DIO_SetPinDir+0xf8>
     300:	85 34       	cpi	r24, 0x45	; 69
     302:	48 f4       	brcc	.+18     	; 0x316 <DIO_SetPinDir+0x1c>
     304:	82 34       	cpi	r24, 0x42	; 66
     306:	b1 f1       	breq	.+108    	; 0x374 <DIO_SetPinDir+0x7a>
     308:	83 34       	cpi	r24, 0x43	; 67
     30a:	08 f0       	brcs	.+2      	; 0x30e <DIO_SetPinDir+0x14>
     30c:	53 c0       	rjmp	.+166    	; 0x3b4 <DIO_SetPinDir+0xba>
     30e:	81 34       	cpi	r24, 0x41	; 65
     310:	09 f0       	breq	.+2      	; 0x314 <DIO_SetPinDir+0x1a>
     312:	8d c0       	rjmp	.+282    	; 0x42e <DIO_SetPinDir+0x134>
     314:	0f c0       	rjmp	.+30     	; 0x334 <DIO_SetPinDir+0x3a>
     316:	82 36       	cpi	r24, 0x62	; 98
     318:	69 f1       	breq	.+90     	; 0x374 <DIO_SetPinDir+0x7a>
     31a:	83 36       	cpi	r24, 0x63	; 99
     31c:	20 f4       	brcc	.+8      	; 0x326 <DIO_SetPinDir+0x2c>
     31e:	81 36       	cpi	r24, 0x61	; 97
     320:	09 f0       	breq	.+2      	; 0x324 <DIO_SetPinDir+0x2a>
     322:	85 c0       	rjmp	.+266    	; 0x42e <DIO_SetPinDir+0x134>
     324:	07 c0       	rjmp	.+14     	; 0x334 <DIO_SetPinDir+0x3a>
     326:	83 36       	cpi	r24, 0x63	; 99
     328:	09 f4       	brne	.+2      	; 0x32c <DIO_SetPinDir+0x32>
     32a:	44 c0       	rjmp	.+136    	; 0x3b4 <DIO_SetPinDir+0xba>
     32c:	84 36       	cpi	r24, 0x64	; 100
     32e:	09 f0       	breq	.+2      	; 0x332 <DIO_SetPinDir+0x38>
     330:	7e c0       	rjmp	.+252    	; 0x42e <DIO_SetPinDir+0x134>
     332:	5f c0       	rjmp	.+190    	; 0x3f2 <DIO_SetPinDir+0xf8>
	{
		case 'A':
		case 'a':
		if (dir==1)
     334:	41 30       	cpi	r20, 0x01	; 1
     336:	69 f4       	brne	.+26     	; 0x352 <DIO_SetPinDir+0x58>
		{
			set_bit(DDRA,pin);//1 means that this pin is set to be output pin
     338:	2a b3       	in	r18, 0x1a	; 26
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	ac 01       	movw	r20, r24
     340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinDir+0x4c>
     342:	44 0f       	add	r20, r20
     344:	55 1f       	adc	r21, r21
     346:	6a 95       	dec	r22
     348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinDir+0x48>
     34a:	ba 01       	movw	r22, r20
     34c:	62 2b       	or	r22, r18
     34e:	6a bb       	out	0x1a, r22	; 26
     350:	08 95       	ret
		}
		else if (dir==0)
     352:	44 23       	and	r20, r20
     354:	09 f0       	breq	.+2      	; 0x358 <DIO_SetPinDir+0x5e>
     356:	6b c0       	rjmp	.+214    	; 0x42e <DIO_SetPinDir+0x134>
		{
			clear_bit(DDRA,pin);//0 means that this pin is set to be input pin
     358:	2a b3       	in	r18, 0x1a	; 26
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	ac 01       	movw	r20, r24
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDir+0x6c>
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDir+0x68>
     36a:	ba 01       	movw	r22, r20
     36c:	60 95       	com	r22
     36e:	62 23       	and	r22, r18
     370:	6a bb       	out	0x1a, r22	; 26
     372:	08 95       	ret
		}
		break ;
		case 'B':
		case 'b':
		if (dir==1)
     374:	41 30       	cpi	r20, 0x01	; 1
     376:	69 f4       	brne	.+26     	; 0x392 <DIO_SetPinDir+0x98>
		{
			set_bit(DDRB,pin);//1 means that this pin is set to be output pin
     378:	27 b3       	in	r18, 0x17	; 23
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	ac 01       	movw	r20, r24
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinDir+0x8c>
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	6a 95       	dec	r22
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinDir+0x88>
     38a:	ba 01       	movw	r22, r20
     38c:	62 2b       	or	r22, r18
     38e:	67 bb       	out	0x17, r22	; 23
     390:	08 95       	ret
		}
		else if (dir==0)
     392:	44 23       	and	r20, r20
     394:	09 f0       	breq	.+2      	; 0x398 <DIO_SetPinDir+0x9e>
     396:	4b c0       	rjmp	.+150    	; 0x42e <DIO_SetPinDir+0x134>
		{
			clear_bit(DDRB,pin);//0 means that this pin is set to be input pin
     398:	27 b3       	in	r18, 0x17	; 23
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	ac 01       	movw	r20, r24
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_SetPinDir+0xac>
     3a2:	44 0f       	add	r20, r20
     3a4:	55 1f       	adc	r21, r21
     3a6:	6a 95       	dec	r22
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_SetPinDir+0xa8>
     3aa:	ba 01       	movw	r22, r20
     3ac:	60 95       	com	r22
     3ae:	62 23       	and	r22, r18
     3b0:	67 bb       	out	0x17, r22	; 23
     3b2:	08 95       	ret
		}
		break ;
		case 'C':
		case 'c':
		if (dir==1)
     3b4:	41 30       	cpi	r20, 0x01	; 1
     3b6:	69 f4       	brne	.+26     	; 0x3d2 <DIO_SetPinDir+0xd8>
		{
			set_bit(DDRC,pin);//1 means that this pin is set to be output pin
     3b8:	24 b3       	in	r18, 0x14	; 20
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	ac 01       	movw	r20, r24
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_SetPinDir+0xcc>
     3c2:	44 0f       	add	r20, r20
     3c4:	55 1f       	adc	r21, r21
     3c6:	6a 95       	dec	r22
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_SetPinDir+0xc8>
     3ca:	ba 01       	movw	r22, r20
     3cc:	62 2b       	or	r22, r18
     3ce:	64 bb       	out	0x14, r22	; 20
     3d0:	08 95       	ret
		}
		else if (dir==0)
     3d2:	44 23       	and	r20, r20
     3d4:	61 f5       	brne	.+88     	; 0x42e <DIO_SetPinDir+0x134>
		{
			clear_bit(DDRC,pin);//0 means that this pin is set to be input pin
     3d6:	24 b3       	in	r18, 0x14	; 20
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	ac 01       	movw	r20, r24
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_SetPinDir+0xea>
     3e0:	44 0f       	add	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	6a 95       	dec	r22
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_SetPinDir+0xe6>
     3e8:	ba 01       	movw	r22, r20
     3ea:	60 95       	com	r22
     3ec:	62 23       	and	r22, r18
     3ee:	64 bb       	out	0x14, r22	; 20
     3f0:	08 95       	ret
		}
		break ;
		case 'D':
		case 'd':
		if (dir==1)
     3f2:	41 30       	cpi	r20, 0x01	; 1
     3f4:	69 f4       	brne	.+26     	; 0x410 <DIO_SetPinDir+0x116>
		{
			set_bit(DDRD,pin);//1 means that this pin is set to be output pin
     3f6:	21 b3       	in	r18, 0x11	; 17
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	ac 01       	movw	r20, r24
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_SetPinDir+0x10a>
     400:	44 0f       	add	r20, r20
     402:	55 1f       	adc	r21, r21
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_SetPinDir+0x106>
     408:	ba 01       	movw	r22, r20
     40a:	62 2b       	or	r22, r18
     40c:	61 bb       	out	0x11, r22	; 17
     40e:	08 95       	ret
		}
		else if (dir==0)
     410:	44 23       	and	r20, r20
     412:	69 f4       	brne	.+26     	; 0x42e <DIO_SetPinDir+0x134>
		{
			clear_bit(DDRD,pin);//0 means that this pin is set to be input pin
     414:	21 b3       	in	r18, 0x11	; 17
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	ac 01       	movw	r20, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_SetPinDir+0x128>
     41e:	44 0f       	add	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	6a 95       	dec	r22
     424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_SetPinDir+0x124>
     426:	ba 01       	movw	r22, r20
     428:	60 95       	com	r22
     42a:	62 23       	and	r22, r18
     42c:	61 bb       	out	0x11, r22	; 17
     42e:	08 95       	ret

00000430 <DIO_Write>:
	
}

void DIO_Write(unsigned char port_name,unsigned char pin ,unsigned char output_value)
{
	switch (port_name)
     430:	84 34       	cpi	r24, 0x44	; 68
     432:	09 f4       	brne	.+2      	; 0x436 <DIO_Write+0x6>
     434:	79 c0       	rjmp	.+242    	; 0x528 <DIO_Write+0xf8>
     436:	85 34       	cpi	r24, 0x45	; 69
     438:	48 f4       	brcc	.+18     	; 0x44c <DIO_Write+0x1c>
     43a:	82 34       	cpi	r24, 0x42	; 66
     43c:	b1 f1       	breq	.+108    	; 0x4aa <DIO_Write+0x7a>
     43e:	83 34       	cpi	r24, 0x43	; 67
     440:	08 f0       	brcs	.+2      	; 0x444 <DIO_Write+0x14>
     442:	53 c0       	rjmp	.+166    	; 0x4ea <DIO_Write+0xba>
     444:	81 34       	cpi	r24, 0x41	; 65
     446:	09 f0       	breq	.+2      	; 0x44a <DIO_Write+0x1a>
     448:	8d c0       	rjmp	.+282    	; 0x564 <DIO_Write+0x134>
     44a:	0f c0       	rjmp	.+30     	; 0x46a <DIO_Write+0x3a>
     44c:	82 36       	cpi	r24, 0x62	; 98
     44e:	69 f1       	breq	.+90     	; 0x4aa <DIO_Write+0x7a>
     450:	83 36       	cpi	r24, 0x63	; 99
     452:	20 f4       	brcc	.+8      	; 0x45c <DIO_Write+0x2c>
     454:	81 36       	cpi	r24, 0x61	; 97
     456:	09 f0       	breq	.+2      	; 0x45a <DIO_Write+0x2a>
     458:	85 c0       	rjmp	.+266    	; 0x564 <DIO_Write+0x134>
     45a:	07 c0       	rjmp	.+14     	; 0x46a <DIO_Write+0x3a>
     45c:	83 36       	cpi	r24, 0x63	; 99
     45e:	09 f4       	brne	.+2      	; 0x462 <DIO_Write+0x32>
     460:	44 c0       	rjmp	.+136    	; 0x4ea <DIO_Write+0xba>
     462:	84 36       	cpi	r24, 0x64	; 100
     464:	09 f0       	breq	.+2      	; 0x468 <DIO_Write+0x38>
     466:	7e c0       	rjmp	.+252    	; 0x564 <DIO_Write+0x134>
     468:	5f c0       	rjmp	.+190    	; 0x528 <DIO_Write+0xf8>
	{
		
		case 'A':
		case 'a':
		if (output_value==1)//this is for setting the value of the output of the pin to be HIGH OR 1
     46a:	41 30       	cpi	r20, 0x01	; 1
     46c:	69 f4       	brne	.+26     	; 0x488 <DIO_Write+0x58>
		{
			set_bit(PORTA,pin);
     46e:	2b b3       	in	r18, 0x1b	; 27
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	ac 01       	movw	r20, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_Write+0x4c>
     478:	44 0f       	add	r20, r20
     47a:	55 1f       	adc	r21, r21
     47c:	6a 95       	dec	r22
     47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_Write+0x48>
     480:	ba 01       	movw	r22, r20
     482:	62 2b       	or	r22, r18
     484:	6b bb       	out	0x1b, r22	; 27
     486:	08 95       	ret
		}
		else if (output_value==0)//this is for setting the value of the output of the pin to be LOW or 0
     488:	44 23       	and	r20, r20
     48a:	09 f0       	breq	.+2      	; 0x48e <DIO_Write+0x5e>
     48c:	6b c0       	rjmp	.+214    	; 0x564 <DIO_Write+0x134>
		{
			clear_bit(PORTA,pin);
     48e:	2b b3       	in	r18, 0x1b	; 27
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	ac 01       	movw	r20, r24
     496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_Write+0x6c>
     498:	44 0f       	add	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	6a 95       	dec	r22
     49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_Write+0x68>
     4a0:	ba 01       	movw	r22, r20
     4a2:	60 95       	com	r22
     4a4:	62 23       	and	r22, r18
     4a6:	6b bb       	out	0x1b, r22	; 27
     4a8:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (output_value==1)
     4aa:	41 30       	cpi	r20, 0x01	; 1
     4ac:	69 f4       	brne	.+26     	; 0x4c8 <DIO_Write+0x98>
		{
			set_bit(PORTB,pin);
     4ae:	28 b3       	in	r18, 0x18	; 24
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	ac 01       	movw	r20, r24
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_Write+0x8c>
     4b8:	44 0f       	add	r20, r20
     4ba:	55 1f       	adc	r21, r21
     4bc:	6a 95       	dec	r22
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_Write+0x88>
     4c0:	ba 01       	movw	r22, r20
     4c2:	62 2b       	or	r22, r18
     4c4:	68 bb       	out	0x18, r22	; 24
     4c6:	08 95       	ret
		}
		else if (output_value==0)
     4c8:	44 23       	and	r20, r20
     4ca:	09 f0       	breq	.+2      	; 0x4ce <DIO_Write+0x9e>
     4cc:	4b c0       	rjmp	.+150    	; 0x564 <DIO_Write+0x134>
		{
			clear_bit(PORTB,pin);
     4ce:	28 b3       	in	r18, 0x18	; 24
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	ac 01       	movw	r20, r24
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_Write+0xac>
     4d8:	44 0f       	add	r20, r20
     4da:	55 1f       	adc	r21, r21
     4dc:	6a 95       	dec	r22
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_Write+0xa8>
     4e0:	ba 01       	movw	r22, r20
     4e2:	60 95       	com	r22
     4e4:	62 23       	and	r22, r18
     4e6:	68 bb       	out	0x18, r22	; 24
     4e8:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (output_value==1)
     4ea:	41 30       	cpi	r20, 0x01	; 1
     4ec:	69 f4       	brne	.+26     	; 0x508 <DIO_Write+0xd8>
		{
			set_bit(PORTC,pin);
     4ee:	25 b3       	in	r18, 0x15	; 21
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	ac 01       	movw	r20, r24
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_Write+0xcc>
     4f8:	44 0f       	add	r20, r20
     4fa:	55 1f       	adc	r21, r21
     4fc:	6a 95       	dec	r22
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_Write+0xc8>
     500:	ba 01       	movw	r22, r20
     502:	62 2b       	or	r22, r18
     504:	65 bb       	out	0x15, r22	; 21
     506:	08 95       	ret
		}
		else if (output_value==0)
     508:	44 23       	and	r20, r20
     50a:	61 f5       	brne	.+88     	; 0x564 <DIO_Write+0x134>
		{
			clear_bit(PORTC,pin);
     50c:	25 b3       	in	r18, 0x15	; 21
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	ac 01       	movw	r20, r24
     514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_Write+0xea>
     516:	44 0f       	add	r20, r20
     518:	55 1f       	adc	r21, r21
     51a:	6a 95       	dec	r22
     51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_Write+0xe6>
     51e:	ba 01       	movw	r22, r20
     520:	60 95       	com	r22
     522:	62 23       	and	r22, r18
     524:	65 bb       	out	0x15, r22	; 21
     526:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (output_value==1)
     528:	41 30       	cpi	r20, 0x01	; 1
     52a:	69 f4       	brne	.+26     	; 0x546 <DIO_Write+0x116>
		{
			set_bit(PORTD,pin);
     52c:	22 b3       	in	r18, 0x12	; 18
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	ac 01       	movw	r20, r24
     534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_Write+0x10a>
     536:	44 0f       	add	r20, r20
     538:	55 1f       	adc	r21, r21
     53a:	6a 95       	dec	r22
     53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_Write+0x106>
     53e:	ba 01       	movw	r22, r20
     540:	62 2b       	or	r22, r18
     542:	62 bb       	out	0x12, r22	; 18
     544:	08 95       	ret
		}
		else if (output_value==0)
     546:	44 23       	and	r20, r20
     548:	69 f4       	brne	.+26     	; 0x564 <DIO_Write+0x134>
		{
			clear_bit(PORTD,pin);
     54a:	22 b3       	in	r18, 0x12	; 18
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	ac 01       	movw	r20, r24
     552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_Write+0x128>
     554:	44 0f       	add	r20, r20
     556:	55 1f       	adc	r21, r21
     558:	6a 95       	dec	r22
     55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_Write+0x124>
     55c:	ba 01       	movw	r22, r20
     55e:	60 95       	com	r22
     560:	62 23       	and	r22, r18
     562:	62 bb       	out	0x12, r22	; 18
     564:	08 95       	ret

00000566 <DIO_u8read>:
}

char DIO_u8read(unsigned char port_name,unsigned char pin_number )
{
    unsigned char return_value =0;
	switch (port_name)
     566:	84 34       	cpi	r24, 0x44	; 68
     568:	09 f4       	brne	.+2      	; 0x56c <DIO_u8read+0x6>
     56a:	4e c0       	rjmp	.+156    	; 0x608 <DIO_u8read+0xa2>
     56c:	85 34       	cpi	r24, 0x45	; 69
     56e:	40 f4       	brcc	.+16     	; 0x580 <DIO_u8read+0x1a>
     570:	82 34       	cpi	r24, 0x42	; 66
     572:	31 f1       	breq	.+76     	; 0x5c0 <DIO_u8read+0x5a>
     574:	83 34       	cpi	r24, 0x43	; 67
     576:	b0 f5       	brcc	.+108    	; 0x5e4 <DIO_u8read+0x7e>
     578:	81 34       	cpi	r24, 0x41	; 65
     57a:	09 f0       	breq	.+2      	; 0x57e <DIO_u8read+0x18>
     57c:	57 c0       	rjmp	.+174    	; 0x62c <DIO_u8read+0xc6>
     57e:	0e c0       	rjmp	.+28     	; 0x59c <DIO_u8read+0x36>
     580:	82 36       	cpi	r24, 0x62	; 98
     582:	f1 f0       	breq	.+60     	; 0x5c0 <DIO_u8read+0x5a>
     584:	83 36       	cpi	r24, 0x63	; 99
     586:	20 f4       	brcc	.+8      	; 0x590 <DIO_u8read+0x2a>
     588:	81 36       	cpi	r24, 0x61	; 97
     58a:	09 f0       	breq	.+2      	; 0x58e <DIO_u8read+0x28>
     58c:	4f c0       	rjmp	.+158    	; 0x62c <DIO_u8read+0xc6>
     58e:	06 c0       	rjmp	.+12     	; 0x59c <DIO_u8read+0x36>
     590:	83 36       	cpi	r24, 0x63	; 99
     592:	41 f1       	breq	.+80     	; 0x5e4 <DIO_u8read+0x7e>
     594:	84 36       	cpi	r24, 0x64	; 100
     596:	09 f0       	breq	.+2      	; 0x59a <DIO_u8read+0x34>
     598:	49 c0       	rjmp	.+146    	; 0x62c <DIO_u8read+0xc6>
     59a:	36 c0       	rjmp	.+108    	; 0x608 <DIO_u8read+0xa2>
	{
		case 'A':
		case 'a':
		return_value=read_bit(PINA,pin_number);//this is for reading the value in PINA and putting it in return value
     59c:	29 b3       	in	r18, 0x19	; 25
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	06 2e       	mov	r0, r22
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_u8read+0x44>
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	0a 94       	dec	r0
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_u8read+0x40>
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	82 23       	and	r24, r18
     5b2:	93 23       	and	r25, r19
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_u8read+0x54>
     5b6:	95 95       	asr	r25
     5b8:	87 95       	ror	r24
     5ba:	6a 95       	dec	r22
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_u8read+0x50>
		break ;
     5be:	08 95       	ret
		case 'B':
		case 'b':
		return_value=read_bit(PINB,pin_number);//Read the value from the given pin in port B
     5c0:	26 b3       	in	r18, 0x16	; 22
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	06 2e       	mov	r0, r22
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_u8read+0x68>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	0a 94       	dec	r0
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_u8read+0x64>
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	82 23       	and	r24, r18
     5d6:	93 23       	and	r25, r19
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_u8read+0x78>
     5da:	95 95       	asr	r25
     5dc:	87 95       	ror	r24
     5de:	6a 95       	dec	r22
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_u8read+0x74>
		break ;
     5e2:	08 95       	ret
		case 'C':
		case 'c':
		return_value=read_bit(PINC,pin_number);//Read the value from the given pin in port c
     5e4:	23 b3       	in	r18, 0x13	; 19
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	06 2e       	mov	r0, r22
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_u8read+0x8c>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_u8read+0x88>
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	82 23       	and	r24, r18
     5fa:	93 23       	and	r25, r19
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_u8read+0x9c>
     5fe:	95 95       	asr	r25
     600:	87 95       	ror	r24
     602:	6a 95       	dec	r22
     604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_u8read+0x98>
		break ;
     606:	08 95       	ret
		case 'D':
		case 'd':
		return_value=read_bit(PIND,pin_number);//Read the value from the given pin in port d
     608:	20 b3       	in	r18, 0x10	; 16
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	06 2e       	mov	r0, r22
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_u8read+0xb0>
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	0a 94       	dec	r0
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_u8read+0xac>
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	82 23       	and	r24, r18
     61e:	93 23       	and	r25, r19
     620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_u8read+0xc0>
     622:	95 95       	asr	r25
     624:	87 95       	ror	r24
     626:	6a 95       	dec	r22
     628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_u8read+0xbc>
		break ;
     62a:	08 95       	ret
	}
}

char DIO_u8read(unsigned char port_name,unsigned char pin_number )
{
    unsigned char return_value =0;
     62c:	80 e0       	ldi	r24, 0x00	; 0
		case 'd':
		return_value=read_bit(PIND,pin_number);//Read the value from the given pin in port d
		break ;
	}
	return return_value ;
}
     62e:	08 95       	ret

00000630 <DIO_toggle_portregister>:

void DIO_toggle_portregister (unsigned char port_name,unsigned char pin_number)
{
	switch (port_name) 
     630:	84 34       	cpi	r24, 0x44	; 68
     632:	09 f4       	brne	.+2      	; 0x636 <DIO_toggle_portregister+0x6>
     634:	3d c0       	rjmp	.+122    	; 0x6b0 <DIO_toggle_portregister+0x80>
     636:	85 34       	cpi	r24, 0x45	; 69
     638:	40 f4       	brcc	.+16     	; 0x64a <DIO_toggle_portregister+0x1a>
     63a:	82 34       	cpi	r24, 0x42	; 66
     63c:	f9 f0       	breq	.+62     	; 0x67c <DIO_toggle_portregister+0x4c>
     63e:	83 34       	cpi	r24, 0x43	; 67
     640:	50 f5       	brcc	.+84     	; 0x696 <DIO_toggle_portregister+0x66>
     642:	81 34       	cpi	r24, 0x41	; 65
     644:	09 f0       	breq	.+2      	; 0x648 <DIO_toggle_portregister+0x18>
     646:	40 c0       	rjmp	.+128    	; 0x6c8 <DIO_toggle_portregister+0x98>
     648:	0c c0       	rjmp	.+24     	; 0x662 <DIO_toggle_portregister+0x32>
     64a:	82 36       	cpi	r24, 0x62	; 98
     64c:	b9 f0       	breq	.+46     	; 0x67c <DIO_toggle_portregister+0x4c>
     64e:	83 36       	cpi	r24, 0x63	; 99
     650:	18 f4       	brcc	.+6      	; 0x658 <DIO_toggle_portregister+0x28>
     652:	81 36       	cpi	r24, 0x61	; 97
     654:	c9 f5       	brne	.+114    	; 0x6c8 <DIO_toggle_portregister+0x98>
     656:	05 c0       	rjmp	.+10     	; 0x662 <DIO_toggle_portregister+0x32>
     658:	83 36       	cpi	r24, 0x63	; 99
     65a:	e9 f0       	breq	.+58     	; 0x696 <DIO_toggle_portregister+0x66>
     65c:	84 36       	cpi	r24, 0x64	; 100
     65e:	a1 f5       	brne	.+104    	; 0x6c8 <DIO_toggle_portregister+0x98>
     660:	27 c0       	rjmp	.+78     	; 0x6b0 <DIO_toggle_portregister+0x80>
	{
		case 'A':
		case 'a':
		toggle_bit(PORTA,pin_number);
     662:	2b b3       	in	r18, 0x1b	; 27
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	ac 01       	movw	r20, r24
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_toggle_portregister+0x40>
     66c:	44 0f       	add	r20, r20
     66e:	55 1f       	adc	r21, r21
     670:	6a 95       	dec	r22
     672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_toggle_portregister+0x3c>
     674:	ba 01       	movw	r22, r20
     676:	62 27       	eor	r22, r18
     678:	6b bb       	out	0x1b, r22	; 27
		break ;
     67a:	08 95       	ret
		case 'B':
		case 'b':
		toggle_bit(PORTB,pin_number);
     67c:	28 b3       	in	r18, 0x18	; 24
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	ac 01       	movw	r20, r24
     684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_toggle_portregister+0x5a>
     686:	44 0f       	add	r20, r20
     688:	55 1f       	adc	r21, r21
     68a:	6a 95       	dec	r22
     68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_toggle_portregister+0x56>
     68e:	ba 01       	movw	r22, r20
     690:	62 27       	eor	r22, r18
     692:	68 bb       	out	0x18, r22	; 24
		break ;
     694:	08 95       	ret
		case 'C':
		case 'c':
		toggle_bit(PORTC,pin_number);
     696:	25 b3       	in	r18, 0x15	; 21
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	ac 01       	movw	r20, r24
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_toggle_portregister+0x74>
     6a0:	44 0f       	add	r20, r20
     6a2:	55 1f       	adc	r21, r21
     6a4:	6a 95       	dec	r22
     6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_toggle_portregister+0x70>
     6a8:	ba 01       	movw	r22, r20
     6aa:	62 27       	eor	r22, r18
     6ac:	65 bb       	out	0x15, r22	; 21
		break ;
     6ae:	08 95       	ret
		case 'D':
		case 'd':
		toggle_bit(PORTD,pin_number);
     6b0:	22 b3       	in	r18, 0x12	; 18
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	ac 01       	movw	r20, r24
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_toggle_portregister+0x8e>
     6ba:	44 0f       	add	r20, r20
     6bc:	55 1f       	adc	r21, r21
     6be:	6a 95       	dec	r22
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_toggle_portregister+0x8a>
     6c2:	ba 01       	movw	r22, r20
     6c4:	62 27       	eor	r22, r18
     6c6:	62 bb       	out	0x12, r22	; 18
     6c8:	08 95       	ret

000006ca <DIO_Set_Port_Direction>:
	}	
}

void DIO_Set_Port_Direction(unsigned char port_name,unsigned char direction)
{
	switch (port_name)
     6ca:	84 34       	cpi	r24, 0x44	; 68
     6cc:	d9 f0       	breq	.+54     	; 0x704 <DIO_Set_Port_Direction+0x3a>
     6ce:	85 34       	cpi	r24, 0x45	; 69
     6d0:	38 f4       	brcc	.+14     	; 0x6e0 <DIO_Set_Port_Direction+0x16>
     6d2:	82 34       	cpi	r24, 0x42	; 66
     6d4:	99 f0       	breq	.+38     	; 0x6fc <DIO_Set_Port_Direction+0x32>
     6d6:	83 34       	cpi	r24, 0x43	; 67
     6d8:	98 f4       	brcc	.+38     	; 0x700 <DIO_Set_Port_Direction+0x36>
     6da:	81 34       	cpi	r24, 0x41	; 65
     6dc:	a1 f4       	brne	.+40     	; 0x706 <DIO_Set_Port_Direction+0x3c>
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <DIO_Set_Port_Direction+0x2e>
     6e0:	82 36       	cpi	r24, 0x62	; 98
     6e2:	61 f0       	breq	.+24     	; 0x6fc <DIO_Set_Port_Direction+0x32>
     6e4:	83 36       	cpi	r24, 0x63	; 99
     6e6:	18 f4       	brcc	.+6      	; 0x6ee <DIO_Set_Port_Direction+0x24>
     6e8:	81 36       	cpi	r24, 0x61	; 97
     6ea:	69 f4       	brne	.+26     	; 0x706 <DIO_Set_Port_Direction+0x3c>
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <DIO_Set_Port_Direction+0x2e>
     6ee:	83 36       	cpi	r24, 0x63	; 99
     6f0:	39 f0       	breq	.+14     	; 0x700 <DIO_Set_Port_Direction+0x36>
     6f2:	84 36       	cpi	r24, 0x64	; 100
     6f4:	41 f4       	brne	.+16     	; 0x706 <DIO_Set_Port_Direction+0x3c>
     6f6:	06 c0       	rjmp	.+12     	; 0x704 <DIO_Set_Port_Direction+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=direction;
     6f8:	6a bb       	out	0x1a, r22	; 26
		break;
     6fa:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=direction;
     6fc:	67 bb       	out	0x17, r22	; 23
		break;
     6fe:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=direction;
     700:	64 bb       	out	0x14, r22	; 20
		break;
     702:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=direction;
     704:	61 bb       	out	0x11, r22	; 17
     706:	08 95       	ret

00000708 <DIO_Write_Port>:
		}
}

void DIO_Write_Port(unsigned char port_name,unsigned char value_in_port)
{
	switch (port_name) 
     708:	84 34       	cpi	r24, 0x44	; 68
     70a:	d9 f0       	breq	.+54     	; 0x742 <DIO_Write_Port+0x3a>
     70c:	85 34       	cpi	r24, 0x45	; 69
     70e:	38 f4       	brcc	.+14     	; 0x71e <DIO_Write_Port+0x16>
     710:	82 34       	cpi	r24, 0x42	; 66
     712:	99 f0       	breq	.+38     	; 0x73a <DIO_Write_Port+0x32>
     714:	83 34       	cpi	r24, 0x43	; 67
     716:	98 f4       	brcc	.+38     	; 0x73e <DIO_Write_Port+0x36>
     718:	81 34       	cpi	r24, 0x41	; 65
     71a:	a1 f4       	brne	.+40     	; 0x744 <DIO_Write_Port+0x3c>
     71c:	0c c0       	rjmp	.+24     	; 0x736 <DIO_Write_Port+0x2e>
     71e:	82 36       	cpi	r24, 0x62	; 98
     720:	61 f0       	breq	.+24     	; 0x73a <DIO_Write_Port+0x32>
     722:	83 36       	cpi	r24, 0x63	; 99
     724:	18 f4       	brcc	.+6      	; 0x72c <DIO_Write_Port+0x24>
     726:	81 36       	cpi	r24, 0x61	; 97
     728:	69 f4       	brne	.+26     	; 0x744 <DIO_Write_Port+0x3c>
     72a:	05 c0       	rjmp	.+10     	; 0x736 <DIO_Write_Port+0x2e>
     72c:	83 36       	cpi	r24, 0x63	; 99
     72e:	39 f0       	breq	.+14     	; 0x73e <DIO_Write_Port+0x36>
     730:	84 36       	cpi	r24, 0x64	; 100
     732:	41 f4       	brne	.+16     	; 0x744 <DIO_Write_Port+0x3c>
     734:	06 c0       	rjmp	.+12     	; 0x742 <DIO_Write_Port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=value_in_port;
     736:	6b bb       	out	0x1b, r22	; 27
		break;
     738:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=value_in_port;
     73a:	68 bb       	out	0x18, r22	; 24
		break;
     73c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=value_in_port;
     73e:	65 bb       	out	0x15, r22	; 21
		break;
     740:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=value_in_port;
     742:	62 bb       	out	0x12, r22	; 18
     744:	08 95       	ret

00000746 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char port_name)
{
	unsigned char return_value=0;
	switch (port_name)
     746:	84 34       	cpi	r24, 0x44	; 68
     748:	d9 f0       	breq	.+54     	; 0x780 <DIO_read_port+0x3a>
     74a:	85 34       	cpi	r24, 0x45	; 69
     74c:	38 f4       	brcc	.+14     	; 0x75c <DIO_read_port+0x16>
     74e:	82 34       	cpi	r24, 0x42	; 66
     750:	99 f0       	breq	.+38     	; 0x778 <DIO_read_port+0x32>
     752:	83 34       	cpi	r24, 0x43	; 67
     754:	98 f4       	brcc	.+38     	; 0x77c <DIO_read_port+0x36>
     756:	81 34       	cpi	r24, 0x41	; 65
     758:	a9 f4       	brne	.+42     	; 0x784 <DIO_read_port+0x3e>
     75a:	0c c0       	rjmp	.+24     	; 0x774 <DIO_read_port+0x2e>
     75c:	82 36       	cpi	r24, 0x62	; 98
     75e:	61 f0       	breq	.+24     	; 0x778 <DIO_read_port+0x32>
     760:	83 36       	cpi	r24, 0x63	; 99
     762:	18 f4       	brcc	.+6      	; 0x76a <DIO_read_port+0x24>
     764:	81 36       	cpi	r24, 0x61	; 97
     766:	71 f4       	brne	.+28     	; 0x784 <DIO_read_port+0x3e>
     768:	05 c0       	rjmp	.+10     	; 0x774 <DIO_read_port+0x2e>
     76a:	83 36       	cpi	r24, 0x63	; 99
     76c:	39 f0       	breq	.+14     	; 0x77c <DIO_read_port+0x36>
     76e:	84 36       	cpi	r24, 0x64	; 100
     770:	49 f4       	brne	.+18     	; 0x784 <DIO_read_port+0x3e>
     772:	06 c0       	rjmp	.+12     	; 0x780 <DIO_read_port+0x3a>
	{
	case 'A':
	case 'a':
	return_value=PINA;
     774:	89 b3       	in	r24, 0x19	; 25
	break;
     776:	08 95       	ret
	case 'B':
	case 'b':
	return_value=PINB;
     778:	86 b3       	in	r24, 0x16	; 22
	break;
     77a:	08 95       	ret
	case 'C':
	case 'c':
	return_value=PINC;
     77c:	83 b3       	in	r24, 0x13	; 19
	break;
     77e:	08 95       	ret
	case 'D':
	case 'd':
	return_value=PIND;
     780:	80 b3       	in	r24, 0x10	; 16
	break;	
     782:	08 95       	ret
	
}

unsigned char DIO_read_port(unsigned char port_name)
{
	unsigned char return_value=0;
     784:	80 e0       	ldi	r24, 0x00	; 0
	case 'd':
	return_value=PIND;
	break;	
	}
	return return_value;
}
     786:	08 95       	ret

00000788 <DIO_enable_pull_up>:



void DIO_enable_pull_up(unsigned char port_name,unsigned char pin,unsigned char enable)
{
	switch (port_name)
     788:	84 34       	cpi	r24, 0x44	; 68
     78a:	09 f4       	brne	.+2      	; 0x78e <DIO_enable_pull_up+0x6>
     78c:	79 c0       	rjmp	.+242    	; 0x880 <__stack+0x21>
     78e:	85 34       	cpi	r24, 0x45	; 69
     790:	48 f4       	brcc	.+18     	; 0x7a4 <DIO_enable_pull_up+0x1c>
     792:	82 34       	cpi	r24, 0x42	; 66
     794:	b1 f1       	breq	.+108    	; 0x802 <DIO_enable_pull_up+0x7a>
     796:	83 34       	cpi	r24, 0x43	; 67
     798:	08 f0       	brcs	.+2      	; 0x79c <DIO_enable_pull_up+0x14>
     79a:	53 c0       	rjmp	.+166    	; 0x842 <DIO_enable_pull_up+0xba>
     79c:	81 34       	cpi	r24, 0x41	; 65
     79e:	09 f0       	breq	.+2      	; 0x7a2 <DIO_enable_pull_up+0x1a>
     7a0:	8d c0       	rjmp	.+282    	; 0x8bc <__stack+0x5d>
     7a2:	0f c0       	rjmp	.+30     	; 0x7c2 <DIO_enable_pull_up+0x3a>
     7a4:	82 36       	cpi	r24, 0x62	; 98
     7a6:	69 f1       	breq	.+90     	; 0x802 <DIO_enable_pull_up+0x7a>
     7a8:	83 36       	cpi	r24, 0x63	; 99
     7aa:	20 f4       	brcc	.+8      	; 0x7b4 <DIO_enable_pull_up+0x2c>
     7ac:	81 36       	cpi	r24, 0x61	; 97
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <DIO_enable_pull_up+0x2a>
     7b0:	85 c0       	rjmp	.+266    	; 0x8bc <__stack+0x5d>
     7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <DIO_enable_pull_up+0x3a>
     7b4:	83 36       	cpi	r24, 0x63	; 99
     7b6:	09 f4       	brne	.+2      	; 0x7ba <DIO_enable_pull_up+0x32>
     7b8:	44 c0       	rjmp	.+136    	; 0x842 <DIO_enable_pull_up+0xba>
     7ba:	84 36       	cpi	r24, 0x64	; 100
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <DIO_enable_pull_up+0x38>
     7be:	7e c0       	rjmp	.+252    	; 0x8bc <__stack+0x5d>
     7c0:	5f c0       	rjmp	.+190    	; 0x880 <__stack+0x21>
	{
		case 'A':
		case 'a':
		if (enable==1)
     7c2:	41 30       	cpi	r20, 0x01	; 1
     7c4:	69 f4       	brne	.+26     	; 0x7e0 <DIO_enable_pull_up+0x58>
		{
			set_bit(PORTA,pin);
     7c6:	2b b3       	in	r18, 0x1b	; 27
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	ac 01       	movw	r20, r24
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_enable_pull_up+0x4c>
     7d0:	44 0f       	add	r20, r20
     7d2:	55 1f       	adc	r21, r21
     7d4:	6a 95       	dec	r22
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_enable_pull_up+0x48>
     7d8:	ba 01       	movw	r22, r20
     7da:	62 2b       	or	r22, r18
     7dc:	6b bb       	out	0x1b, r22	; 27
     7de:	08 95       	ret
		}
		else if (enable==0)
     7e0:	44 23       	and	r20, r20
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <DIO_enable_pull_up+0x5e>
     7e4:	6b c0       	rjmp	.+214    	; 0x8bc <__stack+0x5d>
		{
			clear_bit(PORTA,pin);
     7e6:	2b b3       	in	r18, 0x1b	; 27
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	ac 01       	movw	r20, r24
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_enable_pull_up+0x6c>
     7f0:	44 0f       	add	r20, r20
     7f2:	55 1f       	adc	r21, r21
     7f4:	6a 95       	dec	r22
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_enable_pull_up+0x68>
     7f8:	ba 01       	movw	r22, r20
     7fa:	60 95       	com	r22
     7fc:	62 23       	and	r22, r18
     7fe:	6b bb       	out	0x1b, r22	; 27
     800:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (enable==1)
     802:	41 30       	cpi	r20, 0x01	; 1
     804:	69 f4       	brne	.+26     	; 0x820 <DIO_enable_pull_up+0x98>
		{
			set_bit(PORTB,pin);
     806:	28 b3       	in	r18, 0x18	; 24
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	ac 01       	movw	r20, r24
     80e:	02 c0       	rjmp	.+4      	; 0x814 <DIO_enable_pull_up+0x8c>
     810:	44 0f       	add	r20, r20
     812:	55 1f       	adc	r21, r21
     814:	6a 95       	dec	r22
     816:	e2 f7       	brpl	.-8      	; 0x810 <DIO_enable_pull_up+0x88>
     818:	ba 01       	movw	r22, r20
     81a:	62 2b       	or	r22, r18
     81c:	68 bb       	out	0x18, r22	; 24
     81e:	08 95       	ret
		}
		else if (enable==0)
     820:	44 23       	and	r20, r20
     822:	09 f0       	breq	.+2      	; 0x826 <DIO_enable_pull_up+0x9e>
     824:	4b c0       	rjmp	.+150    	; 0x8bc <__stack+0x5d>
		{
			clear_bit(PORTB,pin);
     826:	28 b3       	in	r18, 0x18	; 24
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	ac 01       	movw	r20, r24
     82e:	02 c0       	rjmp	.+4      	; 0x834 <DIO_enable_pull_up+0xac>
     830:	44 0f       	add	r20, r20
     832:	55 1f       	adc	r21, r21
     834:	6a 95       	dec	r22
     836:	e2 f7       	brpl	.-8      	; 0x830 <DIO_enable_pull_up+0xa8>
     838:	ba 01       	movw	r22, r20
     83a:	60 95       	com	r22
     83c:	62 23       	and	r22, r18
     83e:	68 bb       	out	0x18, r22	; 24
     840:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (enable==1)
     842:	41 30       	cpi	r20, 0x01	; 1
     844:	69 f4       	brne	.+26     	; 0x860 <__stack+0x1>
		{
			set_bit(PORTC,pin);
     846:	25 b3       	in	r18, 0x15	; 21
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	ac 01       	movw	r20, r24
     84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_enable_pull_up+0xcc>
     850:	44 0f       	add	r20, r20
     852:	55 1f       	adc	r21, r21
     854:	6a 95       	dec	r22
     856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_enable_pull_up+0xc8>
     858:	ba 01       	movw	r22, r20
     85a:	62 2b       	or	r22, r18
     85c:	65 bb       	out	0x15, r22	; 21
     85e:	08 95       	ret
		}
		else if (enable==0)
     860:	44 23       	and	r20, r20
     862:	61 f5       	brne	.+88     	; 0x8bc <__stack+0x5d>
		{
			clear_bit(PORTC,pin);
     864:	25 b3       	in	r18, 0x15	; 21
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	ac 01       	movw	r20, r24
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	44 0f       	add	r20, r20
     870:	55 1f       	adc	r21, r21
     872:	6a 95       	dec	r22
     874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
     876:	ba 01       	movw	r22, r20
     878:	60 95       	com	r22
     87a:	62 23       	and	r22, r18
     87c:	65 bb       	out	0x15, r22	; 21
     87e:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (enable==1)
     880:	41 30       	cpi	r20, 0x01	; 1
     882:	69 f4       	brne	.+26     	; 0x89e <__stack+0x3f>
		{
			set_bit(PORTD,pin);
     884:	22 b3       	in	r18, 0x12	; 18
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	ac 01       	movw	r20, r24
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	44 0f       	add	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	6a 95       	dec	r22
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	ba 01       	movw	r22, r20
     898:	62 2b       	or	r22, r18
     89a:	62 bb       	out	0x12, r22	; 18
     89c:	08 95       	ret
		}
		else if (enable==0)
     89e:	44 23       	and	r20, r20
     8a0:	69 f4       	brne	.+26     	; 0x8bc <__stack+0x5d>
		{
			clear_bit(PORTD,pin);
     8a2:	22 b3       	in	r18, 0x12	; 18
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	ac 01       	movw	r20, r24
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
     8ac:	44 0f       	add	r20, r20
     8ae:	55 1f       	adc	r21, r21
     8b0:	6a 95       	dec	r22
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
     8b4:	ba 01       	movw	r22, r20
     8b6:	60 95       	com	r22
     8b8:	62 23       	and	r22, r18
     8ba:	62 bb       	out	0x12, r22	; 18
     8bc:	08 95       	ret

000008be <DIO_Write_low_nibble>:
}


void DIO_Write_low_nibble(unsigned char port_name,unsigned char number )
{
	number=number&(0x0f);//first we need to make sure that the user send a number that has the last four bit is zero so we make them zero
     8be:	6f 70       	andi	r22, 0x0F	; 15
	switch (port_name)
     8c0:	84 34       	cpi	r24, 0x44	; 68
     8c2:	51 f1       	breq	.+84     	; 0x918 <DIO_Write_low_nibble+0x5a>
     8c4:	85 34       	cpi	r24, 0x45	; 69
     8c6:	38 f4       	brcc	.+14     	; 0x8d6 <DIO_Write_low_nibble+0x18>
     8c8:	82 34       	cpi	r24, 0x42	; 66
     8ca:	c1 f0       	breq	.+48     	; 0x8fc <DIO_Write_low_nibble+0x3e>
     8cc:	83 34       	cpi	r24, 0x43	; 67
     8ce:	e8 f4       	brcc	.+58     	; 0x90a <DIO_Write_low_nibble+0x4c>
     8d0:	81 34       	cpi	r24, 0x41	; 65
     8d2:	41 f5       	brne	.+80     	; 0x924 <DIO_Write_low_nibble+0x66>
     8d4:	0c c0       	rjmp	.+24     	; 0x8ee <DIO_Write_low_nibble+0x30>
     8d6:	82 36       	cpi	r24, 0x62	; 98
     8d8:	89 f0       	breq	.+34     	; 0x8fc <DIO_Write_low_nibble+0x3e>
     8da:	83 36       	cpi	r24, 0x63	; 99
     8dc:	18 f4       	brcc	.+6      	; 0x8e4 <DIO_Write_low_nibble+0x26>
     8de:	81 36       	cpi	r24, 0x61	; 97
     8e0:	09 f5       	brne	.+66     	; 0x924 <DIO_Write_low_nibble+0x66>
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <DIO_Write_low_nibble+0x30>
     8e4:	83 36       	cpi	r24, 0x63	; 99
     8e6:	89 f0       	breq	.+34     	; 0x90a <DIO_Write_low_nibble+0x4c>
     8e8:	84 36       	cpi	r24, 0x64	; 100
     8ea:	e1 f4       	brne	.+56     	; 0x924 <DIO_Write_low_nibble+0x66>
     8ec:	15 c0       	rjmp	.+42     	; 0x918 <DIO_Write_low_nibble+0x5a>
	{
		case 'A':
		case 'a':
		PORTA=PORTA&(0Xf0);//then we must make sure that the first four bits in porta is zero and without affecting the other values in the port 
     8ee:	8b b3       	in	r24, 0x1b	; 27
     8f0:	80 7f       	andi	r24, 0xF0	; 240
     8f2:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|number;//then we put the first four bits in number in the first four bits in porta without affecting the other bits in porta (wonderfull logic)
     8f4:	8b b3       	in	r24, 0x1b	; 27
     8f6:	68 2b       	or	r22, r24
     8f8:	6b bb       	out	0x1b, r22	; 27
		break;
     8fa:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=PORTB&(0Xf0);
     8fc:	88 b3       	in	r24, 0x18	; 24
     8fe:	80 7f       	andi	r24, 0xF0	; 240
     900:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|number;
     902:	88 b3       	in	r24, 0x18	; 24
     904:	68 2b       	or	r22, r24
     906:	68 bb       	out	0x18, r22	; 24
		break;		
     908:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=PORTC&(0Xf0);
     90a:	85 b3       	in	r24, 0x15	; 21
     90c:	80 7f       	andi	r24, 0xF0	; 240
     90e:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|number;
     910:	85 b3       	in	r24, 0x15	; 21
     912:	68 2b       	or	r22, r24
     914:	65 bb       	out	0x15, r22	; 21
		break;
     916:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=PORTD&(0Xf0);
     918:	82 b3       	in	r24, 0x12	; 18
     91a:	80 7f       	andi	r24, 0xF0	; 240
     91c:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|number;
     91e:	82 b3       	in	r24, 0x12	; 18
     920:	68 2b       	or	r22, r24
     922:	62 bb       	out	0x12, r22	; 18
     924:	08 95       	ret

00000926 <DIO_Write_high_nibble>:
	}
}

void DIO_Write_high_nibble(unsigned char port_name,unsigned char number)//in this function we need to put the first 4 bits in number in the last four bits in the port
{
	number=number<<4;//so first we need to shift left the number 4 digits so we can or it with port 
     926:	62 95       	swap	r22
     928:	60 7f       	andi	r22, 0xF0	; 240
	switch (port_name)
     92a:	84 34       	cpi	r24, 0x44	; 68
     92c:	51 f1       	breq	.+84     	; 0x982 <DIO_Write_high_nibble+0x5c>
     92e:	85 34       	cpi	r24, 0x45	; 69
     930:	38 f4       	brcc	.+14     	; 0x940 <DIO_Write_high_nibble+0x1a>
     932:	82 34       	cpi	r24, 0x42	; 66
     934:	c1 f0       	breq	.+48     	; 0x966 <DIO_Write_high_nibble+0x40>
     936:	83 34       	cpi	r24, 0x43	; 67
     938:	e8 f4       	brcc	.+58     	; 0x974 <DIO_Write_high_nibble+0x4e>
     93a:	81 34       	cpi	r24, 0x41	; 65
     93c:	41 f5       	brne	.+80     	; 0x98e <DIO_Write_high_nibble+0x68>
     93e:	0c c0       	rjmp	.+24     	; 0x958 <DIO_Write_high_nibble+0x32>
     940:	82 36       	cpi	r24, 0x62	; 98
     942:	89 f0       	breq	.+34     	; 0x966 <DIO_Write_high_nibble+0x40>
     944:	83 36       	cpi	r24, 0x63	; 99
     946:	18 f4       	brcc	.+6      	; 0x94e <DIO_Write_high_nibble+0x28>
     948:	81 36       	cpi	r24, 0x61	; 97
     94a:	09 f5       	brne	.+66     	; 0x98e <DIO_Write_high_nibble+0x68>
     94c:	05 c0       	rjmp	.+10     	; 0x958 <DIO_Write_high_nibble+0x32>
     94e:	83 36       	cpi	r24, 0x63	; 99
     950:	89 f0       	breq	.+34     	; 0x974 <DIO_Write_high_nibble+0x4e>
     952:	84 36       	cpi	r24, 0x64	; 100
     954:	e1 f4       	brne	.+56     	; 0x98e <DIO_Write_high_nibble+0x68>
     956:	15 c0       	rjmp	.+42     	; 0x982 <DIO_Write_high_nibble+0x5c>
	{
		case 'A':
		case 'a':
		PORTA=PORTA&(0X0f);
     958:	8b b3       	in	r24, 0x1b	; 27
     95a:	8f 70       	andi	r24, 0x0F	; 15
     95c:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|number;
     95e:	8b b3       	in	r24, 0x1b	; 27
     960:	68 2b       	or	r22, r24
     962:	6b bb       	out	0x1b, r22	; 27
		break;
     964:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=PORTB&(0X0f);
     966:	88 b3       	in	r24, 0x18	; 24
     968:	8f 70       	andi	r24, 0x0F	; 15
     96a:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|number;
     96c:	88 b3       	in	r24, 0x18	; 24
     96e:	68 2b       	or	r22, r24
     970:	68 bb       	out	0x18, r22	; 24
		break;
     972:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=PORTC&(0X0f);
     974:	85 b3       	in	r24, 0x15	; 21
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|number;
     97a:	85 b3       	in	r24, 0x15	; 21
     97c:	68 2b       	or	r22, r24
     97e:	65 bb       	out	0x15, r22	; 21
		break;
     980:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=PORTD&(0X0f);
     982:	82 b3       	in	r24, 0x12	; 18
     984:	8f 70       	andi	r24, 0x0F	; 15
     986:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|number;
     988:	82 b3       	in	r24, 0x12	; 18
     98a:	68 2b       	or	r22, r24
     98c:	62 bb       	out	0x12, r22	; 18
     98e:	08 95       	ret

00000990 <EEPROM_Write>:
#include <avr/io.h>
#include "STD_MACROS1.h"

void EEPROM_Write(unsigned short adress,unsigned char data)
{
	EEAR=adress;// writing the adress in the eeprom adress resgister
     990:	9f bb       	out	0x1f, r25	; 31
     992:	8e bb       	out	0x1e, r24	; 30
	EEDR=data;//writing the data in the eeprom data register 
     994:	6d bb       	out	0x1d, r22	; 29
	set_bit(EECR,EEMWE);
     996:	e2 9a       	sbi	0x1c, 2	; 28
	set_bit(EECR,EEWE);
     998:	e1 9a       	sbi	0x1c, 1	; 28
	while((read_bit(EECR,EEWE))==1);//waiting until the writing end and the writing endes only when the bit EEWE became zero not 1	
     99a:	e1 99       	sbic	0x1c, 1	; 28
     99c:	fe cf       	rjmp	.-4      	; 0x99a <EEPROM_Write+0xa>
}
     99e:	08 95       	ret

000009a0 <EEPROM_u8Read>:

unsigned char EEPROM_u8Read(unsigned short adress)
{
	EEAR=adress;
     9a0:	9f bb       	out	0x1f, r25	; 31
     9a2:	8e bb       	out	0x1e, r24	; 30
	set_bit(EECR,EERE);
     9a4:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     9a6:	8d b3       	in	r24, 0x1d	; 29
     9a8:	08 95       	ret

000009aa <difficalty>:




unsigned char difficalty() //this function return 0 for very easy and 1 for easy and 2 for medium and 3 for hard and 4 for Mathematician
{
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
	unsigned char enbable=1;
	unsigned char position=0;//this variable is an indication for the position of the user on the lcd choices
     9c2:	d0 e0       	ldi	r29, 0x00	; 0



unsigned char difficalty() //this function return 0 for very easy and 1 for easy and 2 for medium and 3 for hard and 4 for Mathematician
{
	unsigned char enbable=1;
     9c4:	11 e0       	ldi	r17, 0x01	; 1
			{
				LCD_Move_cursor(1,1);
				LCD_String("Mathematician");
			}*/
           
			enbable=0;
     9c6:	c0 e0       	ldi	r28, 0x00	; 0
				LCD_String("medium");
			}
			else if (position==3)
			{
				LCD_Move_cursor(1,6);
				LCD_String("hard");
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f6 ec       	ldi	r31, 0xC6	; 198
     9cc:	af 2e       	mov	r10, r31
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	bf 2e       	mov	r11, r31
     9d2:	f0 2d       	mov	r31, r0
				LCD_String("easy");
			}
			else if (position==2)
			{
				LCD_Move_cursor(1,5);
				LCD_String("medium");
     9d4:	0f 2e       	mov	r0, r31
     9d6:	ff eb       	ldi	r31, 0xBF	; 191
     9d8:	8f 2e       	mov	r8, r31
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	9f 2e       	mov	r9, r31
     9de:	f0 2d       	mov	r31, r0
				LCD_String("very easy");
			}
			else if (position==1)
			{
				LCD_Move_cursor(1,6);
				LCD_String("easy");
     9e0:	0f 2e       	mov	r0, r31
     9e2:	fa eb       	ldi	r31, 0xBA	; 186
     9e4:	cf 2e       	mov	r12, r31
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	df 2e       	mov	r13, r31
     9ea:	f0 2d       	mov	r31, r0
			LCD_Move_cursor(2,16);
			LCD_Send_Char('>');
			if (position==0)
			{
				LCD_Move_cursor(1,4);
				LCD_String("very easy");
     9ec:	0f 2e       	mov	r0, r31
     9ee:	f0 eb       	ldi	r31, 0xB0	; 176
     9f0:	ef 2e       	mov	r14, r31
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	ff 2e       	mov	r15, r31
     9f6:	f0 2d       	mov	r31, r0
		else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
		{
			if (position==0)
			{
				//position=4;//disable this if you closed the mathmatician mood
				position=3;
     9f8:	03 e0       	ldi	r16, 0x03	; 3
	unsigned char enbable=1;
	unsigned char position=0;//this variable is an indication for the position of the user on the lcd choices
	while(1)
	{
		
		if (enbable==1)
     9fa:	11 30       	cpi	r17, 0x01	; 1
     9fc:	09 f0       	breq	.+2      	; 0xa00 <difficalty+0x56>
     9fe:	48 c0       	rjmp	.+144    	; 0xa90 <difficalty+0xe6>
		{
			LCD_Clear_Screen();
     a00:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
			LCD_Send_Cmd(DISPLAY_OFF_CURSOR_OFF);
     a04:	88 e0       	ldi	r24, 0x08	; 8
     a06:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			LCD_Move_cursor(2,1);
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			LCD_Send_Char('<');
     a12:	8c e3       	ldi	r24, 0x3C	; 60
     a14:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Move_cursor(2,8);
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	68 e0       	ldi	r22, 0x08	; 8
     a1c:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			LCD_Send_Char('O');
     a20:	8f e4       	ldi	r24, 0x4F	; 79
     a22:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Char('K');
     a26:	8b e4       	ldi	r24, 0x4B	; 75
     a28:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Move_cursor(2,16);
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	60 e1       	ldi	r22, 0x10	; 16
     a30:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			LCD_Send_Char('>');
     a34:	8e e3       	ldi	r24, 0x3E	; 62
     a36:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			if (position==0)
     a3a:	dd 23       	and	r29, r29
     a3c:	41 f4       	brne	.+16     	; 0xa4e <difficalty+0xa4>
			{
				LCD_Move_cursor(1,4);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	64 e0       	ldi	r22, 0x04	; 4
     a42:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("very easy");
     a46:	c7 01       	movw	r24, r14
     a48:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     a4c:	1d c0       	rjmp	.+58     	; 0xa88 <difficalty+0xde>
			}
			else if (position==1)
     a4e:	d1 30       	cpi	r29, 0x01	; 1
     a50:	41 f4       	brne	.+16     	; 0xa62 <difficalty+0xb8>
			{
				LCD_Move_cursor(1,6);
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	66 e0       	ldi	r22, 0x06	; 6
     a56:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("easy");
     a5a:	c6 01       	movw	r24, r12
     a5c:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     a60:	13 c0       	rjmp	.+38     	; 0xa88 <difficalty+0xde>
			}
			else if (position==2)
     a62:	d2 30       	cpi	r29, 0x02	; 2
     a64:	41 f4       	brne	.+16     	; 0xa76 <difficalty+0xcc>
			{
				LCD_Move_cursor(1,5);
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	65 e0       	ldi	r22, 0x05	; 5
     a6a:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("medium");
     a6e:	c4 01       	movw	r24, r8
     a70:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <difficalty+0xde>
			}
			else if (position==3)
     a76:	d3 30       	cpi	r29, 0x03	; 3
     a78:	39 f4       	brne	.+14     	; 0xa88 <difficalty+0xde>
			{
				LCD_Move_cursor(1,6);
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	66 e0       	ldi	r22, 0x06	; 6
     a7e:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
				LCD_String("hard");
     a82:	c5 01       	movw	r24, r10
     a84:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
				LCD_Move_cursor(1,1);
				LCD_String("Mathematician");
			}*/
           
			enbable=0;
			LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     a88:	8c e0       	ldi	r24, 0x0C	; 12
     a8a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			{
				LCD_Move_cursor(1,1);
				LCD_String("Mathematician");
			}*/
           
			enbable=0;
     a8e:	1c 2f       	mov	r17, r28
			LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
		}
		
		if (Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
     a90:	84 e4       	ldi	r24, 0x44	; 68
     a92:	6c 2f       	mov	r22, r28
     a94:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	69 f4       	brne	.+26     	; 0xab6 <difficalty+0x10c>
		{
			if (position>=3)
     a9c:	d3 30       	cpi	r29, 0x03	; 3
     a9e:	10 f4       	brcc	.+4      	; 0xaa4 <difficalty+0xfa>
			{
				position=0;
			}
			else
			{
				position++;
     aa0:	df 5f       	subi	r29, 0xFF	; 255
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <difficalty+0xfc>
		
		if (Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
		{
			if (position>=3)
			{
				position=0;
     aa4:	dc 2f       	mov	r29, r28
			}
			else
			{
				position++;
			}
			while(Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1);
     aa6:	84 e4       	ldi	r24, 0x44	; 68
     aa8:	6c 2f       	mov	r22, r28
     aaa:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	d1 f3       	breq	.-12     	; 0xaa6 <difficalty+0xfc>
			enbable=1;
     ab2:	11 e0       	ldi	r17, 0x01	; 1
     ab4:	a2 cf       	rjmp	.-188    	; 0x9fa <difficalty+0x50>
		}
		else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
     ab6:	84 e4       	ldi	r24, 0x44	; 68
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	69 f4       	brne	.+26     	; 0xadc <difficalty+0x132>
		{
			if (position==0)
     ac2:	dd 23       	and	r29, r29
     ac4:	11 f0       	breq	.+4      	; 0xaca <difficalty+0x120>
				//position=4;//disable this if you closed the mathmatician mood
				position=3;
			}
			else
			{
				position--;
     ac6:	d1 50       	subi	r29, 0x01	; 1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <difficalty+0x122>
		else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
		{
			if (position==0)
			{
				//position=4;//disable this if you closed the mathmatician mood
				position=3;
     aca:	d0 2f       	mov	r29, r16
			}
			else
			{
				position--;
			}
			while(Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
     acc:	84 e4       	ldi	r24, 0x44	; 68
     ace:	62 e0       	ldi	r22, 0x02	; 2
     ad0:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	d1 f3       	breq	.-12     	; 0xacc <difficalty+0x122>
			enbable=1;
     ad8:	11 e0       	ldi	r17, 0x01	; 1
     ada:	8f cf       	rjmp	.-226    	; 0x9fa <difficalty+0x50>
		}
		else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1)
     adc:	84 e4       	ldi	r24, 0x44	; 68
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	09 f0       	breq	.+2      	; 0xaea <difficalty+0x140>
     ae8:	88 cf       	rjmp	.-240    	; 0x9fa <difficalty+0x50>
		{
			while(Button_u8read(OUTPUT_PORT,OK_BUTTON)==1);
     aea:	84 e4       	ldi	r24, 0x44	; 68
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	d1 f3       	breq	.-12     	; 0xaea <difficalty+0x140>
			
		}

	}

}
     af6:	8d 2f       	mov	r24, r29
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	bf 90       	pop	r11
     b0a:	af 90       	pop	r10
     b0c:	9f 90       	pop	r9
     b0e:	8f 90       	pop	r8
     b10:	08 95       	ret

00000b12 <write_the_score>:


void write_the_score(unsigned char score)
{
     b12:	cf 93       	push	r28
     b14:	c8 2f       	mov	r28, r24
	if (simple_random_var>0)
     b16:	80 91 31 01 	lds	r24, 0x0131
     b1a:	88 23       	and	r24, r24
     b1c:	79 f0       	breq	.+30     	; 0xb3c <write_the_score+0x2a>
	{
	LCD_Move_cursor(2,8);
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	68 e0       	ldi	r22, 0x08	; 8
     b22:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	LCD_Send_Char('(');
     b26:	88 e2       	ldi	r24, 0x28	; 40
     b28:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	LCD_send_char_number(simple_random_score);
     b2c:	80 91 2e 01 	lds	r24, 0x012E
     b30:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
	LCD_Send_Char(')');
     b34:	89 e2       	ldi	r24, 0x29	; 41
     b36:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
     b3a:	0d c0       	rjmp	.+26     	; 0xb56 <write_the_score+0x44>
	}
	else
	{
	LCD_Move_cursor(2,8);
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	68 e0       	ldi	r22, 0x08	; 8
     b40:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	LCD_Send_Char('(');
     b44:	88 e2       	ldi	r24, 0x28	; 40
     b46:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	LCD_send_char_number(score);
     b4a:	8c 2f       	mov	r24, r28
     b4c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
	LCD_Send_Char(')');
     b50:	89 e2       	ldi	r24, 0x29	; 41
     b52:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	}	

}
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <multiplication_mood>:
}	
}


void multiplication_mood()
{
     b5a:	2f 92       	push	r2
     b5c:	3f 92       	push	r3
     b5e:	4f 92       	push	r4
     b60:	5f 92       	push	r5
     b62:	6f 92       	push	r6
     b64:	7f 92       	push	r7
     b66:	8f 92       	push	r8
     b68:	9f 92       	push	r9
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	a3 97       	sbiw	r28, 0x23	; 35
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
	//unsigned char difficalty_mood=difficalty();
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
     b8e:	fe 01       	movw	r30, r28
     b90:	31 96       	adiw	r30, 0x01	; 1
     b92:	86 e0       	ldi	r24, 0x06	; 6
     b94:	df 01       	movw	r26, r30
     b96:	1d 92       	st	X+, r1
     b98:	8a 95       	dec	r24
     b9a:	e9 f7       	brne	.-6      	; 0xb96 <multiplication_mood+0x3c>
	unsigned char keypad=0;
	unsigned short x=0;
	unsigned short y=0;
	unsigned long user_answer[6]={0};
     b9c:	fe 01       	movw	r30, r28
     b9e:	37 96       	adiw	r30, 0x07	; 7
     ba0:	88 e1       	ldi	r24, 0x18	; 24
     ba2:	df 01       	movw	r26, r30
     ba4:	1d 92       	st	X+, r1
     ba6:	8a 95       	dec	r24
     ba8:	e9 f7       	brne	.-6      	; 0xba4 <multiplication_mood+0x4a>
	unsigned char take_action=1;
    unsigned char correct=0;
	unsigned char right_answer=1;
     baa:	b1 e0       	ldi	r27, 0x01	; 1
     bac:	bb a3       	lds	r27, 0x5b
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short x=0;
	unsigned short y=0;
	unsigned long user_answer[6]={0};
	unsigned char take_action=1;
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	2a a3       	lds	r18, 0x5a


void multiplication_mood()
{
	//unsigned char difficalty_mood=difficalty();
	unsigned char score=0;
     bb2:	19 a2       	lds	r17, 0x99
	if (right_answer==0)
	{
		break;
	}
	
	 if (take_action==1)
     bb4:	4e 01       	movw	r8, r28
     bb6:	08 94       	sec
     bb8:	81 1c       	adc	r8, r1
     bba:	91 1c       	adc	r9, r1
	}	 
}	
}


void multiplication_mood()
     bbc:	ce 01       	movw	r24, r28
     bbe:	4f 96       	adiw	r24, 0x1f	; 31
     bc0:	98 a3       	lds	r25, 0x58
     bc2:	8f 8f       	std	Y+31, r24	; 0x1f
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
     bc4:	0f 2e       	mov	r0, r31
     bc6:	ff ef       	ldi	r31, 0xFF	; 255
     bc8:	2f 2e       	mov	r2, r31
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	3f 2e       	mov	r3, r31
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	4f 2e       	mov	r4, r31
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	5f 2e       	mov	r5, r31
     bd6:	f0 2d       	mov	r31, r0
	}	 
}	
}


void multiplication_mood()
     bd8:	6f 01       	movw	r12, r30
	   
	keypad=Keypad_u8check_press();
	if (keypad!=0xFF)
	{
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
     bda:	a8 2c       	mov	r10, r8
     bdc:	69 2c       	mov	r6, r9
	unsigned char right_answer=1;
while(1)
{
	position=0;
	
		if (simple_random_var==3)
     bde:	80 91 31 01 	lds	r24, 0x0131
     be2:	83 30       	cpi	r24, 0x03	; 3
     be4:	39 f4       	brne	.+14     	; 0xbf4 <multiplication_mood+0x9a>
		{
			simple_random();
     be6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <simple_random>
			if (simple_random_correct_answer==0)
     bea:	80 91 af 00 	lds	r24, 0x00AF
     bee:	88 23       	and	r24, r24
     bf0:	51 f4       	brne	.+20     	; 0xc06 <multiplication_mood+0xac>
     bf2:	d7 c1       	rjmp	.+942    	; 0xfa2 <multiplication_mood+0x448>
			{
				break;
			}
		}
		else if (simple_random_var==5)
     bf4:	85 30       	cpi	r24, 0x05	; 5
     bf6:	39 f4       	brne	.+14     	; 0xc06 <multiplication_mood+0xac>
		{
			complex_random();
     bf8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <complex_random>
			if (simple_random_correct_answer==0)
     bfc:	80 91 af 00 	lds	r24, 0x00AF
     c00:	88 23       	and	r24, r24
     c02:	09 f4       	brne	.+2      	; 0xc06 <multiplication_mood+0xac>
     c04:	ce c1       	rjmp	.+924    	; 0xfa2 <multiplication_mood+0x448>
			{
				break;
			}
		}
	if (right_answer==0)
     c06:	9b a1       	lds	r25, 0x4b
     c08:	99 23       	and	r25, r25
     c0a:	09 f4       	brne	.+2      	; 0xc0e <multiplication_mood+0xb4>
     c0c:	ca c1       	rjmp	.+916    	; 0xfa2 <multiplication_mood+0x448>
	{
		break;
	}
	
	 if (take_action==1)
     c0e:	aa a1       	lds	r26, 0x4a
     c10:	a1 30       	cpi	r26, 0x01	; 1
     c12:	09 f0       	breq	.+2      	; 0xc16 <multiplication_mood+0xbc>
     c14:	76 c0       	rjmp	.+236    	; 0xd02 <multiplication_mood+0x1a8>
     c16:	fe 01       	movw	r30, r28
     c18:	37 96       	adiw	r30, 0x07	; 7
     c1a:	d4 01       	movw	r26, r8
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
			  answer[i]=0XFF;
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
     c1e:	21 92       	st	Z+, r2
     c20:	31 92       	st	Z+, r3
     c22:	41 92       	st	Z+, r4
     c24:	51 92       	st	Z+, r5
			  answer[i]=0XFF;
     c26:	8d 93       	st	X+, r24
		break;
	}
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
     c28:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c2a:	38 a1       	lds	r19, 0x48
     c2c:	e2 17       	cp	r30, r18
     c2e:	f3 07       	cpc	r31, r19
     c30:	b1 f7       	brne	.-20     	; 0xc1e <multiplication_mood+0xc4>
          {
	          user_answer[i]=0XFF;
			  answer[i]=0XFF;
          }

		  LCD_Clear_Screen();
     c32:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		  LCD_Move_cursor(2,15);
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	6f e0       	ldi	r22, 0x0F	; 15
     c3a:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		  LCD_Send_Char('O');
     c3e:	8f e4       	ldi	r24, 0x4F	; 79
     c40:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		  LCD_Send_Char('K');
     c44:	8b e4       	ldi	r24, 0x4B	; 75
     c46:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		  LCD_Move_cursor(2,1);
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		  LCD_String("delete");
     c52:	8b ec       	ldi	r24, 0xCB	; 203
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		  
		  write_the_score(score);
     c5a:	89 a1       	lds	r24, 0x49
     c5c:	0e 94 89 05 	call	0xb12	; 0xb12 <write_the_score>
		  
		  while (1)
		  {
			  x=rand()%100;
     c60:	04 e6       	ldi	r16, 0x64	; 100
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
     c68:	b8 01       	movw	r22, r16
     c6a:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
     c6e:	7c 01       	movw	r14, r24
			  if (x<=12&&x!=0)
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	8c 30       	cpi	r24, 0x0C	; 12
     c74:	91 05       	cpc	r25, r1
     c76:	b0 f7       	brcc	.-20     	; 0xc64 <multiplication_mood+0x10a>
				  break;
			  }				  
		  }
		  while(1)
		  {
			  y=rand()%100;
     c78:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
     c7c:	64 e6       	ldi	r22, 0x64	; 100
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
     c84:	8c 01       	movw	r16, r24
			  if (y<=12&&y!=0)
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	8c 30       	cpi	r24, 0x0C	; 12
     c8a:	91 05       	cpc	r25, r1
     c8c:	a8 f7       	brcc	.-22     	; 0xc78 <multiplication_mood+0x11e>
			  {
				  break;
			  }	  
		  }
		  
		 LCD_Send_Cmd(RETURN_HOME);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_ON);
     c94:	8e e0       	ldi	r24, 0x0E	; 14
     c96:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_send_short_number(x);
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_send_short_number>
		 LCD_Send_Char('*');
     ca0:	8a e2       	ldi	r24, 0x2A	; 42
     ca2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		 LCD_send_short_number(y);
     ca6:	c8 01       	movw	r24, r16
     ca8:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_send_short_number>
		 LCD_Send_Char('=');
     cac:	8d e3       	ldi	r24, 0x3D	; 61
     cae:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		 if((x*y)<10)
     cb2:	0e 9d       	mul	r16, r14
     cb4:	90 01       	movw	r18, r0
     cb6:	0f 9d       	mul	r16, r15
     cb8:	30 0d       	add	r19, r0
     cba:	1e 9d       	mul	r17, r14
     cbc:	30 0d       	add	r19, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	2a 30       	cpi	r18, 0x0A	; 10
     cc2:	31 05       	cpc	r19, r1
     cc4:	60 f4       	brcc	.+24     	; 0xcde <multiplication_mood+0x184>
		 {
		     answer[0]=(x*y);
     cc6:	0e 9d       	mul	r16, r14
     cc8:	00 2d       	mov	r16, r0
     cca:	11 24       	eor	r1, r1
     ccc:	09 83       	std	Y+1, r16	; 0x01
			 answer[1]=0XFF;
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=0XFF;
     cd2:	8b 83       	std	Y+3, r24	; 0x03
			 answer[3]=0XFF;
     cd4:	8c 83       	std	Y+4, r24	; 0x04
			 answer[4]=0XFF;
     cd6:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
     cd8:	8e 83       	std	Y+6, r24	; 0x06
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
			 
	     }
		 take_action=0;
     cda:	1a a2       	lds	r17, 0x9a
     cdc:	12 c0       	rjmp	.+36     	; 0xd02 <multiplication_mood+0x1a8>
			 answer[2]=0XFF;
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
		 }
		 else if ((x*y)<100)
     cde:	24 36       	cpi	r18, 0x64	; 100
     ce0:	31 05       	cpc	r19, r1
     ce2:	c8 f4       	brcc	.+50     	; 0xd16 <multiplication_mood+0x1bc>
		 {
			 answer[0]=((x*y)/10);
     ce4:	c9 01       	movw	r24, r18
     ce6:	6a e0       	ldi	r22, 0x0A	; 10
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
     cee:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x*y)%10);
     cf0:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=0XFF;
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	8b 83       	std	Y+3, r24	; 0x03
			 answer[3]=0XFF;
     cf6:	8c 83       	std	Y+4, r24	; 0x04
			 answer[4]=0XFF;
     cf8:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
     cfa:	8e 83       	std	Y+6, r24	; 0x06
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
			 
	     }
		 take_action=0;
     cfc:	1a a2       	lds	r17, 0x9a
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <multiplication_mood+0x1a8>
     d00:	1a a2       	lds	r17, 0x9a
     d02:	00 e0       	ldi	r16, 0x00	; 0
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
		position++;
		if (position>=6)
		{
			position=5;
     d04:	0f 2e       	mov	r0, r31
     d06:	f5 e0       	ldi	r31, 0x05	; 5
     d08:	7f 2e       	mov	r7, r31
     d0a:	f0 2d       	mov	r31, r0
		
		while (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
     d0c:	bb 24       	eor	r11, r11
     d0e:	b3 94       	inc	r11
	{
		correct=0;
     d10:	ee 24       	eor	r14, r14
		for (int i=0;i<6;i++)
		{
			if (answer[i]!=user_answer[i])
			{
				correct=1;//you can increase it every wrong in the debug process
     d12:	fb 2c       	mov	r15, r11
     d14:	1d c0       	rjmp	.+58     	; 0xd50 <multiplication_mood+0x1f6>
			 answer[2]=0XFF;
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
		 }
		 else if ((x*y)<1000)
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	28 3e       	cpi	r18, 0xE8	; 232
     d1a:	38 07       	cpc	r19, r24
     d1c:	88 f7       	brcc	.-30     	; 0xd00 <multiplication_mood+0x1a6>
		 {
			 answer[0]=((x*y)/100);
     d1e:	c9 01       	movw	r24, r18
     d20:	64 e6       	ldi	r22, 0x64	; 100
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
     d28:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x*y)/10%10);
     d2a:	ea e0       	ldi	r30, 0x0A	; 10
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	bf 01       	movw	r22, r30
     d32:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
     d36:	28 2f       	mov	r18, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bf 01       	movw	r22, r30
     d3c:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
     d40:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=((x*y)%10);
     d42:	2b 83       	std	Y+3, r18	; 0x03
			 answer[3]=0XFF;
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	8c 83       	std	Y+4, r24	; 0x04
			 answer[4]=0XFF;
     d48:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
     d4a:	8e 83       	std	Y+6, r24	; 0x06
			 
	     }
		 take_action=0;
     d4c:	1a a2       	lds	r17, 0x9a
     d4e:	d9 cf       	rjmp	.-78     	; 0xd02 <multiplication_mood+0x1a8>
	

   while(1)
   {
	   
	keypad=Keypad_u8check_press();
     d50:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Keypad_u8check_press>
     d54:	18 2f       	mov	r17, r24
	if (keypad!=0xFF)
     d56:	8f 3f       	cpi	r24, 0xFF	; 255
     d58:	39 f1       	breq	.+78     	; 0xda8 <multiplication_mood+0x24e>
	{
		LCD_Send_Char(keypad);
     d5a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
     d5e:	80 2f       	mov	r24, r16
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	f4 01       	movw	r30, r8
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	81 2f       	mov	r24, r17
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	c0 97       	sbiw	r24, 0x30	; 48
     d76:	aa 27       	eor	r26, r26
     d78:	97 fd       	sbrc	r25, 7
     d7a:	a0 95       	com	r26
     d7c:	ba 2f       	mov	r27, r26
     d7e:	86 83       	std	Z+6, r24	; 0x06
     d80:	97 83       	std	Z+7, r25	; 0x07
     d82:	a0 87       	std	Z+8, r26	; 0x08
     d84:	b1 87       	std	Z+9, r27	; 0x09
		position++;
     d86:	0f 5f       	subi	r16, 0xFF	; 255
		if (position>=6)
     d88:	06 30       	cpi	r16, 0x06	; 6
     d8a:	20 f0       	brcs	.+8      	; 0xd94 <multiplication_mood+0x23a>
		{
			position=5;
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
     d8c:	80 e1       	ldi	r24, 0x10	; 16
     d8e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
		position++;
		if (position>=6)
		{
			position=5;
     d92:	07 2d       	mov	r16, r7
     d94:	8f e7       	ldi	r24, 0x7F	; 127
     d96:	9a e1       	ldi	r25, 0x1A	; 26
     d98:	a6 e0       	ldi	r26, 0x06	; 6
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	90 40       	sbci	r25, 0x00	; 0
     d9e:	a0 40       	sbci	r26, 0x00	; 0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <multiplication_mood+0x240>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <multiplication_mood+0x24a>
     da4:	00 00       	nop
     da6:	d4 cf       	rjmp	.-88     	; 0xd50 <multiplication_mood+0x1f6>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
		}
		_delay_ms(250);
		
	}
	else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
     da8:	84 e4       	ldi	r24, 0x44	; 68
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	f9 f4       	brne	.+62     	; 0xdf2 <multiplication_mood+0x298>
	{
		if(position>0)
     db4:	00 23       	and	r16, r16
     db6:	b1 f0       	breq	.+44     	; 0xde4 <multiplication_mood+0x28a>
		{
			user_answer[position]=0XFF;
     db8:	e0 2f       	mov	r30, r16
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	e8 0d       	add	r30, r8
     dc6:	f9 1d       	adc	r31, r9
     dc8:	26 82       	std	Z+6, r2	; 0x06
     dca:	37 82       	std	Z+7, r3	; 0x07
     dcc:	40 86       	std	Z+8, r4	; 0x08
     dce:	51 86       	std	Z+9, r5	; 0x09
			LCD_Send_Char(' ');
     dd0:	80 e2       	ldi	r24, 0x20	; 32
     dd2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
     dd6:	80 e1       	ldi	r24, 0x10	; 16
     dd8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
     ddc:	80 e1       	ldi	r24, 0x10	; 16
     dde:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			position--;
     de2:	01 50       	subi	r16, 0x01	; 1
		}
		
		while (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
     de4:	84 e4       	ldi	r24, 0x44	; 68
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	d1 f3       	breq	.-12     	; 0xde4 <multiplication_mood+0x28a>
     df0:	af cf       	rjmp	.-162    	; 0xd50 <multiplication_mood+0x1f6>
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
     df2:	84 e4       	ldi	r24, 0x44	; 68
     df4:	6b 2d       	mov	r22, r11
     df6:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	39 f0       	breq	.+14     	; 0xe0c <multiplication_mood+0x2b2>
     dfe:	84 e4       	ldi	r24, 0x44	; 68
     e00:	6e 2d       	mov	r22, r14
     e02:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	09 f0       	breq	.+2      	; 0xe0c <multiplication_mood+0x2b2>
     e0a:	a2 cf       	rjmp	.-188    	; 0xd50 <multiplication_mood+0x1f6>
     e0c:	ea 2d       	mov	r30, r10
     e0e:	f6 2d       	mov	r31, r6
     e10:	96 01       	movw	r18, r12
	{
		correct=0;
     e12:	1e 2d       	mov	r17, r14
		for (int i=0;i<6;i++)
		{
			if (answer[i]!=user_answer[i])
     e14:	81 91       	ld	r24, Z+
     e16:	d9 01       	movw	r26, r18
     e18:	4d 91       	ld	r20, X+
     e1a:	5d 91       	ld	r21, X+
     e1c:	6d 91       	ld	r22, X+
     e1e:	7d 91       	ld	r23, X+
     e20:	9d 01       	movw	r18, r26
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	84 17       	cp	r24, r20
     e2a:	95 07       	cpc	r25, r21
     e2c:	a6 07       	cpc	r26, r22
     e2e:	b7 07       	cpc	r27, r23
     e30:	09 f0       	breq	.+2      	; 0xe34 <multiplication_mood+0x2da>
			{
				correct=1;//you can increase it every wrong in the debug process
     e32:	1f 2d       	mov	r17, r15
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
	{
		correct=0;
		for (int i=0;i<6;i++)
     e34:	ec 15       	cp	r30, r12
     e36:	fd 05       	cpc	r31, r13
     e38:	69 f7       	brne	.-38     	; 0xe14 <multiplication_mood+0x2ba>
			if (answer[i]!=user_answer[i])
			{
				correct=1;//you can increase it every wrong in the debug process
			}
		}
	 if (correct==0)
     e3a:	11 23       	and	r17, r17
     e3c:	09 f0       	breq	.+2      	; 0xe40 <multiplication_mood+0x2e6>
     e3e:	59 c0       	rjmp	.+178    	; 0xef2 <multiplication_mood+0x398>
	 {
		 if (simple_random_var>0)
     e40:	80 91 31 01 	lds	r24, 0x0131
     e44:	88 23       	and	r24, r24
     e46:	31 f0       	breq	.+12     	; 0xe54 <multiplication_mood+0x2fa>
		 {
			 simple_random_correct_answer=1;
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	90 93 af 00 	sts	0x00AF, r25
			 simple_random_var++;
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	80 93 31 01 	sts	0x0131, r24
		 }
		LCD_Clear_Screen();
     e54:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     e58:	8c e0       	ldi	r24, 0x0C	; 12
     e5a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		LCD_Move_cursor(1,3);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	63 e0       	ldi	r22, 0x03	; 3
     e62:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		LCD_String("right answer");
     e66:	82 ed       	ldi	r24, 0xD2	; 210
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		LCD_Move_cursor(2,1) ;
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		LCD_String("score =");
     e76:	8f ed       	ldi	r24, 0xDF	; 223
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		if (simple_random_var>1)
     e7e:	80 91 31 01 	lds	r24, 0x0131
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	48 f0       	brcs	.+18     	; 0xe98 <multiplication_mood+0x33e>
		{
			simple_random_score++;
     e86:	80 91 2e 01 	lds	r24, 0x012E
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	89 a3       	lds	r24, 0x59
     e8e:	80 93 2e 01 	sts	0x012E, r24
			score=simple_random_score;
			LCD_send_char_number(simple_random_score);
     e92:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <multiplication_mood+0x34a>
			
		}
		else
		{
			score++;
     e98:	b9 a1       	lds	r27, 0x49
     e9a:	bf 5f       	subi	r27, 0xFF	; 255
     e9c:	b9 a3       	lds	r27, 0x59
			LCD_send_char_number(score);
     e9e:	8b 2f       	mov	r24, r27
     ea0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
		}
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9d e3       	ldi	r25, 0x3D	; 61
     eae:	a9 e4       	ldi	r26, 0x49	; 73
     eb0:	81 50       	subi	r24, 0x01	; 1
     eb2:	90 40       	sbci	r25, 0x00	; 0
     eb4:	a0 40       	sbci	r26, 0x00	; 0
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <multiplication_mood+0x356>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <multiplication_mood+0x360>
     eba:	00 00       	nop
		_delay_ms(3000);
		take_action=1;
		 for(char i=0;i<6;i++)
		 {
			user_answer[i]=0XFF;
     ebc:	2f 82       	std	Y+7, r2	; 0x07
     ebe:	38 86       	std	Y+8, r3	; 0x08
     ec0:	49 86       	std	Y+9, r4	; 0x09
     ec2:	5a 86       	std	Y+10, r5	; 0x0a
     ec4:	2b 86       	std	Y+11, r2	; 0x0b
     ec6:	3c 86       	std	Y+12, r3	; 0x0c
     ec8:	4d 86       	std	Y+13, r4	; 0x0d
     eca:	5e 86       	std	Y+14, r5	; 0x0e
     ecc:	2f 86       	std	Y+15, r2	; 0x0f
     ece:	38 8a       	std	Y+16, r3	; 0x10
     ed0:	49 8a       	std	Y+17, r4	; 0x11
     ed2:	5a 8a       	std	Y+18, r5	; 0x12
     ed4:	2b 8a       	std	Y+19, r2	; 0x13
     ed6:	3c 8a       	std	Y+20, r3	; 0x14
     ed8:	4d 8a       	std	Y+21, r4	; 0x15
     eda:	5e 8a       	std	Y+22, r5	; 0x16
     edc:	2f 8a       	std	Y+23, r2	; 0x17
     ede:	38 8e       	std	Y+24, r3	; 0x18
     ee0:	49 8e       	std	Y+25, r4	; 0x19
     ee2:	5a 8e       	std	Y+26, r5	; 0x1a
     ee4:	2b 8e       	std	Y+27, r2	; 0x1b
     ee6:	3c 8e       	std	Y+28, r3	; 0x1c
     ee8:	4d 8e       	std	Y+29, r4	; 0x1d
     eea:	5e 8e       	std	Y+30, r5	; 0x1e
			score++;
			LCD_send_char_number(score);
		}
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
		_delay_ms(3000);
		take_action=1;
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	9a a3       	lds	r25, 0x5a
     ef0:	76 ce       	rjmp	.-788    	; 0xbde <multiplication_mood+0x84>
		 {
			user_answer[i]=0XFF;
		 }
		break;	 
	 }
	 else if (correct==1)
     ef2:	11 30       	cpi	r17, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <multiplication_mood+0x39e>
     ef6:	2c cf       	rjmp	.-424    	; 0xd50 <multiplication_mood+0x1f6>
	 {
		 if (simple_random_var>0)
     ef8:	80 91 31 01 	lds	r24, 0x0131
     efc:	88 23       	and	r24, r24
     efe:	29 f0       	breq	.+10     	; 0xf0a <multiplication_mood+0x3b0>
		 {
			 simple_random_correct_answer=0;
     f00:	10 92 af 00 	sts	0x00AF, r1
			 score=simple_random_score;
     f04:	a0 91 2e 01 	lds	r26, 0x012E
     f08:	a9 a3       	lds	r26, 0x59
		 }
		 correct=0;
		 right_answer=0;
		 LCD_Clear_Screen();
     f0a:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     f0e:	8c e0       	ldi	r24, 0x0C	; 12
     f10:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_Move_cursor(1,3);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	63 e0       	ldi	r22, 0x03	; 3
     f18:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		 LCD_String("wrong answer");
     f1c:	87 ee       	ldi	r24, 0xE7	; 231
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	93 ed       	ldi	r25, 0xD3	; 211
     f28:	a0 e3       	ldi	r26, 0x30	; 48
     f2a:	81 50       	subi	r24, 0x01	; 1
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	a0 40       	sbci	r26, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <multiplication_mood+0x3d0>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <multiplication_mood+0x3da>
     f34:	00 00       	nop
		 _delay_ms(2000);
		 LCD_Clear_Screen();
     f36:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     f3a:	8c e0       	ldi	r24, 0x0C	; 12
     f3c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 if(score>EEPROM_u8Read(MULTIPLICATION_SCORE_LOCATION))
     f40:	86 e3       	ldi	r24, 0x36	; 54
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
     f48:	99 a1       	lds	r25, 0x49
     f4a:	89 17       	cp	r24, r25
     f4c:	28 f4       	brcc	.+10     	; 0xf58 <multiplication_mood+0x3fe>
		 {
			 EEPROM_Write(MULTIPLICATION_SCORE_LOCATION,score);
     f4e:	86 e3       	ldi	r24, 0x36	; 54
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	69 a1       	lds	r22, 0x49
     f54:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
		 }
			 LCD_Clear_Screen();
     f58:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
			 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			 LCD_String("your score=");
     f62:	84 ef       	ldi	r24, 0xF4	; 244
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 LCD_send_char_number(score);
     f6a:	89 a1       	lds	r24, 0x49
     f6c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
			 LCD_Move_cursor(2,1);
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			 LCD_String("high score=");
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 LCD_send_char_number(EEPROM_u8Read(MULTIPLICATION_SCORE_LOCATION));
     f80:	86 e3       	ldi	r24, 0x36	; 54
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
     f88:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	9d e3       	ldi	r25, 0x3D	; 61
     f90:	a9 e4       	ldi	r26, 0x49	; 73
     f92:	81 50       	subi	r24, 0x01	; 1
     f94:	90 40       	sbci	r25, 0x00	; 0
     f96:	a0 40       	sbci	r26, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <multiplication_mood+0x438>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <multiplication_mood+0x442>
     f9c:	00 00       	nop
		 {
			 simple_random_correct_answer=0;
			 score=simple_random_score;
		 }
		 correct=0;
		 right_answer=0;
     f9e:	1b a2       	lds	r17, 0x9b
     fa0:	1e ce       	rjmp	.-964    	; 0xbde <multiplication_mood+0x84>
			 break;
	 }	
	}
	}	 
}	
}
     fa2:	a3 96       	adiw	r28, 0x23	; 35
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	7f 90       	pop	r7
     fc8:	6f 90       	pop	r6
     fca:	5f 90       	pop	r5
     fcc:	4f 90       	pop	r4
     fce:	3f 90       	pop	r3
     fd0:	2f 90       	pop	r2
     fd2:	08 95       	ret

00000fd4 <complex_random>:
	}
}
}

void complex_random()
{
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
		if (simple_random_var==1)
		{
			simple_random_difficalty=difficalty();
			simple_random_score=0;
		}
		simple_random_var=4;
     fd8:	d4 e0       	ldi	r29, 0x04	; 4
		dice=rand();
		if ((dice%3)==0)
     fda:	c3 e0       	ldi	r28, 0x03	; 3
{
      unsigned char dice=0;

	while(1)
	{
		if (simple_random_correct_answer==0)
     fdc:	80 91 af 00 	lds	r24, 0x00AF
     fe0:	88 23       	and	r24, r24
     fe2:	01 f1       	breq	.+64     	; 0x1024 <complex_random+0x50>
		{
			break;
		}
		
		if (simple_random_var==1)
     fe4:	80 91 31 01 	lds	r24, 0x0131
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	31 f4       	brne	.+12     	; 0xff8 <complex_random+0x24>
		{
			simple_random_difficalty=difficalty();
     fec:	0e 94 d5 04 	call	0x9aa	; 0x9aa <difficalty>
     ff0:	80 93 2f 01 	sts	0x012F, r24
			simple_random_score=0;
     ff4:	10 92 2e 01 	sts	0x012E, r1
		}
		simple_random_var=4;
     ff8:	d0 93 31 01 	sts	0x0131, r29
		dice=rand();
     ffc:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
		if ((dice%3)==0)
    1000:	6c 2f       	mov	r22, r28
    1002:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__udivmodqi4>
    1006:	99 23       	and	r25, r25
    1008:	19 f4       	brne	.+6      	; 0x1010 <complex_random+0x3c>
		{
			subtraction_mood();
    100a:	0e 94 15 08 	call	0x102a	; 0x102a <subtraction_mood>
    100e:	e6 cf       	rjmp	.-52     	; 0xfdc <complex_random+0x8>
		}
		else if ((dice%3)==1)
    1010:	91 30       	cpi	r25, 0x01	; 1
    1012:	19 f4       	brne	.+6      	; 0x101a <complex_random+0x46>
		{
			
			multiplication_mood();
    1014:	0e 94 ad 05 	call	0xb5a	; 0xb5a <multiplication_mood>
    1018:	e1 cf       	rjmp	.-62     	; 0xfdc <complex_random+0x8>
		}
		else if ((dice%3)==2)
    101a:	92 30       	cpi	r25, 0x02	; 2
    101c:	f9 f6       	brne	.-66     	; 0xfdc <complex_random+0x8>
		{
			addition_mood();
    101e:	0e 94 91 0b 	call	0x1722	; 0x1722 <addition_mood>
    1022:	dc cf       	rjmp	.-72     	; 0xfdc <complex_random+0x8>
		}
		
		
	}
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <subtraction_mood>:
}
	
}

void subtraction_mood()
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	ae 97       	sbiw	r28, 0x2e	; 46
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
	unsigned char difficalty_mood=0;
	if (simple_random_var>0)
    105e:	80 91 31 01 	lds	r24, 0x0131
    1062:	88 23       	and	r24, r24
    1064:	21 f0       	breq	.+8      	; 0x106e <subtraction_mood+0x44>
	{
	  difficalty_mood=simple_random_difficalty;
    1066:	20 91 2f 01 	lds	r18, 0x012F
    106a:	2e a7       	lds	r18, 0x7e
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <subtraction_mood+0x4a>
	}
	else
	{
	  difficalty_mood=difficalty();
    106e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <difficalty>
    1072:	8e a7       	lds	r24, 0x7e
	}	
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
    1074:	fe 01       	movw	r30, r28
    1076:	31 96       	adiw	r30, 0x01	; 1
    1078:	86 e0       	ldi	r24, 0x06	; 6
    107a:	df 01       	movw	r26, r30
    107c:	1d 92       	st	X+, r1
    107e:	8a 95       	dec	r24
    1080:	e9 f7       	brne	.-6      	; 0x107c <subtraction_mood+0x52>
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
	unsigned short y=0;
	unsigned long user_answer[6]={0};
    1082:	fe 01       	movw	r30, r28
    1084:	37 96       	adiw	r30, 0x07	; 7
    1086:	88 e1       	ldi	r24, 0x18	; 24
    1088:	df 01       	movw	r26, r30
    108a:	1d 92       	st	X+, r1
    108c:	8a 95       	dec	r24
    108e:	e9 f7       	brne	.-6      	; 0x108a <subtraction_mood+0x60>
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
	unsigned short y=0;
    1090:	22 24       	eor	r2, r2
    1092:	33 24       	eor	r3, r3
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
    1094:	1d a6       	lds	r17, 0xbd
    1096:	1c a6       	lds	r17, 0xbc
	}	
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short rang=0;
    1098:	1f a2       	lds	r17, 0x9f
    109a:	1e a2       	lds	r17, 0x9e
	}
	else
	{
	  difficalty_mood=difficalty();
	}	
	unsigned char score=0;
    109c:	1d a2       	lds	r17, 0x9d
		}
	}
	else if (simple_random_var==5)
	{
		complex_random();
		if (simple_random_correct_answer==0)
    109e:	6f 01       	movw	r12, r30
    10a0:	4e 01       	movw	r8, r28
    10a2:	08 94       	sec
    10a4:	81 1c       	adc	r8, r1
    10a6:	91 1c       	adc	r9, r1
	
}
	
}

void subtraction_mood()
    10a8:	fe 01       	movw	r30, r28
    10aa:	7f 96       	adiw	r30, 0x1f	; 31
    10ac:	f8 a3       	lds	r31, 0x58
    10ae:	ef 8f       	std	Y+31, r30	; 0x1f
    10b0:	88 a6       	lds	r24, 0xb8
    10b2:	99 a6       	lds	r25, 0xb9
    10b4:	ca a6       	lds	r28, 0xba
    10b6:	db a6       	lds	r29, 0xbb
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
    10b8:	ff ef       	ldi	r31, 0xFF	; 255
    10ba:	f9 a3       	lds	r31, 0x59
    10bc:	1a a2       	lds	r17, 0x9a
    10be:	1b a2       	lds	r17, 0x9b
    10c0:	1c a2       	lds	r17, 0x9c
	
}
	
}

void subtraction_mood()
    10c2:	7c 2c       	mov	r7, r12
    10c4:	6d 2c       	mov	r6, r13
    10c6:	58 2c       	mov	r5, r8
    10c8:	49 2c       	mov	r4, r9
	position=0;
	if (right_answer==0)
	{
		break;
	}
	if (simple_random_var==3)
    10ca:	80 91 31 01 	lds	r24, 0x0131
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	39 f4       	brne	.+14     	; 0x10e0 <subtraction_mood+0xb6>
	{
		simple_random();
    10d2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <simple_random>
		if (simple_random_correct_answer==0)
    10d6:	80 91 af 00 	lds	r24, 0x00AF
    10da:	88 23       	and	r24, r24
    10dc:	51 f4       	brne	.+20     	; 0x10f2 <subtraction_mood+0xc8>
    10de:	e8 c2       	rjmp	.+1488   	; 0x16b0 <subtraction_mood+0x686>
		{
			break;
		}
	}
	else if (simple_random_var==5)
    10e0:	85 30       	cpi	r24, 0x05	; 5
    10e2:	39 f4       	brne	.+14     	; 0x10f2 <subtraction_mood+0xc8>
	{
		complex_random();
    10e4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <complex_random>
		if (simple_random_correct_answer==0)
    10e8:	80 91 af 00 	lds	r24, 0x00AF
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <subtraction_mood+0xc8>
    10f0:	df c2       	rjmp	.+1470   	; 0x16b0 <subtraction_mood+0x686>
	
}
	
}

void subtraction_mood()
    10f2:	a8 a5       	lds	r26, 0x68
    10f4:	b9 a5       	lds	r27, 0x69
    10f6:	ea a5       	lds	r30, 0x6a
    10f8:	fb a5       	lds	r31, 0x6b
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
    10fa:	2f ef       	ldi	r18, 0xFF	; 255
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	21 93       	st	Z+, r18
    1104:	31 93       	st	Z+, r19
    1106:	41 93       	st	Z+, r20
    1108:	51 93       	st	Z+, r21
			  answer[i]=0XFF;
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	3d 93       	st	X+, r19
		}
	}
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
    110e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1110:	58 a1       	lds	r21, 0x48
    1112:	e4 17       	cp	r30, r20
    1114:	f5 07       	cpc	r31, r21
    1116:	89 f7       	brne	.-30     	; 0x10fa <subtraction_mood+0xd0>
          {
	          user_answer[i]=0XFF;
			  answer[i]=0XFF;
          }

		  LCD_Clear_Screen();
    1118:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		  LCD_Move_cursor(2,15);
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	6f e0       	ldi	r22, 0x0F	; 15
    1120:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		  LCD_Send_Char('O');
    1124:	8f e4       	ldi	r24, 0x4F	; 79
    1126:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		  LCD_Send_Char('K');
    112a:	8b e4       	ldi	r24, 0x4B	; 75
    112c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		  LCD_Move_cursor(2,1);
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		  LCD_String("delete");
    1138:	8b ec       	ldi	r24, 0xCB	; 203
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		  
		  write_the_score(score);
    1140:	8d a1       	lds	r24, 0x4d
    1142:	0e 94 89 05 	call	0xb12	; 0xb12 <write_the_score>
		
		 switch (difficalty_mood)
    1146:	5e a5       	lds	r21, 0x6e
    1148:	52 30       	cpi	r21, 0x02	; 2
    114a:	09 f4       	brne	.+2      	; 0x114e <subtraction_mood+0x124>
    114c:	40 c0       	rjmp	.+128    	; 0x11ce <subtraction_mood+0x1a4>
    114e:	53 30       	cpi	r21, 0x03	; 3
    1150:	30 f4       	brcc	.+12     	; 0x115e <subtraction_mood+0x134>
    1152:	55 23       	and	r21, r21
    1154:	61 f0       	breq	.+24     	; 0x116e <subtraction_mood+0x144>
    1156:	51 30       	cpi	r21, 0x01	; 1
    1158:	09 f0       	breq	.+2      	; 0x115c <subtraction_mood+0x132>
    115a:	82 c0       	rjmp	.+260    	; 0x1260 <subtraction_mood+0x236>
    115c:	20 c0       	rjmp	.+64     	; 0x119e <subtraction_mood+0x174>
    115e:	8e a5       	lds	r24, 0x6e
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	09 f4       	brne	.+2      	; 0x1166 <subtraction_mood+0x13c>
    1164:	4c c0       	rjmp	.+152    	; 0x11fe <subtraction_mood+0x1d4>
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	09 f0       	breq	.+2      	; 0x116c <subtraction_mood+0x142>
    116a:	7a c0       	rjmp	.+244    	; 0x1260 <subtraction_mood+0x236>
    116c:	59 c0       	rjmp	.+178    	; 0x1220 <subtraction_mood+0x1f6>
		 {
			 case 0:
			 rang=10;
			 while(1)
			 {
				 x=rand()%10;
    116e:	0a e0       	ldi	r16, 0x0A	; 10
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1176:	b8 01       	movw	r22, r16
    1178:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    117c:	7c 01       	movw	r14, r24
			     y=rand()%10;
    117e:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1182:	b8 01       	movw	r22, r16
    1184:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
				 if (x>y)
    1188:	8e 15       	cp	r24, r14
    118a:	9f 05       	cpc	r25, r15
    118c:	90 f7       	brcc	.-28     	; 0x1172 <subtraction_mood+0x148>
    118e:	fd a6       	lds	r31, 0xbd
    1190:	ec a6       	lds	r30, 0xbc
    1192:	1c 01       	movw	r2, r24
		  write_the_score(score);
		
		 switch (difficalty_mood)
		 {
			 case 0:
			 rang=10;
    1194:	2a e0       	ldi	r18, 0x0A	; 10
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3f a3       	lds	r19, 0x5f
    119a:	2e a3       	lds	r18, 0x5e
    119c:	61 c0       	rjmp	.+194    	; 0x1260 <subtraction_mood+0x236>
			 case 1:
			 rang=100;

			 while(1)
			 {	  
				 x=rand()%100;
    119e:	04 e6       	ldi	r16, 0x64	; 100
    11a0:	10 e0       	ldi	r17, 0x00	; 0
    11a2:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    11a6:	b8 01       	movw	r22, r16
    11a8:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    11ac:	7c 01       	movw	r14, r24
			     y=rand()%100;
    11ae:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    11b2:	b8 01       	movw	r22, r16
    11b4:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
				 if (x>y)
    11b8:	8e 15       	cp	r24, r14
    11ba:	9f 05       	cpc	r25, r15
    11bc:	90 f7       	brcc	.-28     	; 0x11a2 <subtraction_mood+0x178>
    11be:	fd a6       	lds	r31, 0xbd
    11c0:	ec a6       	lds	r30, 0xbc
    11c2:	1c 01       	movw	r2, r24
				 }
			 }
			 break;
			 
			 case 1:
			 rang=100;
    11c4:	44 e6       	ldi	r20, 0x64	; 100
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	5f a3       	lds	r21, 0x5f
    11ca:	4e a3       	lds	r20, 0x5e
    11cc:	49 c0       	rjmp	.+146    	; 0x1260 <subtraction_mood+0x236>
			 case 2:
			 rang=1000;
			 
			 while(1)
			 {
				 x=rand()%1000;
    11ce:	08 ee       	ldi	r16, 0xE8	; 232
    11d0:	13 e0       	ldi	r17, 0x03	; 3
    11d2:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    11d6:	b8 01       	movw	r22, r16
    11d8:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    11dc:	7c 01       	movw	r14, r24
				 y=rand()%1000;
    11de:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    11e2:	b8 01       	movw	r22, r16
    11e4:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
				 if (x>y)
    11e8:	8e 15       	cp	r24, r14
    11ea:	9f 05       	cpc	r25, r15
    11ec:	90 f7       	brcc	.-28     	; 0x11d2 <subtraction_mood+0x1a8>
    11ee:	fd a6       	lds	r31, 0xbd
    11f0:	ec a6       	lds	r30, 0xbc
    11f2:	1c 01       	movw	r2, r24
				 }
			 }
			 break;
			 
			 case 2:
			 rang=1000;
    11f4:	88 ee       	ldi	r24, 0xE8	; 232
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	9f a3       	lds	r25, 0x5f
    11fa:	8e a3       	lds	r24, 0x5e
    11fc:	31 c0       	rjmp	.+98     	; 0x1260 <subtraction_mood+0x236>
			 case 3:
			 rang=10000;
			
			 while(1)
			 { 
				 x=rand()%10000;
    11fe:	00 e1       	ldi	r16, 0x10	; 16
    1200:	17 e2       	ldi	r17, 0x27	; 39
    1202:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    120c:	7c 01       	movw	r14, r24
				 y=rand()%10000;
    120e:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1212:	b8 01       	movw	r22, r16
    1214:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
				 if (x>y)
    1218:	8e 15       	cp	r24, r14
    121a:	9f 05       	cpc	r25, r15
    121c:	90 f7       	brcc	.-28     	; 0x1202 <subtraction_mood+0x1d8>
    121e:	19 c0       	rjmp	.+50     	; 0x1252 <subtraction_mood+0x228>
	
			 while(1)
			 {			
				  while (1)
			    {
				 x=rand();
    1220:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1224:	8c 01       	movw	r16, r24
				 if(x<65535)
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	0f 3f       	cpi	r16, 0xFF	; 255
    122a:	19 07       	cpc	r17, r25
    122c:	c9 f3       	breq	.-14     	; 0x1220 <subtraction_mood+0x1f6>
	
			 while(1)
			 {			
				  while (1)
			    {
				 x=rand();
    122e:	78 01       	movw	r14, r16
					 break;
				 }					 
			    }
			    while (1)
			   { 
				 y=rand();
    1230:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
				 if(y<65535)
    1234:	af ef       	ldi	r26, 0xFF	; 255
    1236:	8f 3f       	cpi	r24, 0xFF	; 255
    1238:	9a 07       	cpc	r25, r26
    123a:	d1 f3       	breq	.-12     	; 0x1230 <subtraction_mood+0x206>
				 {
					 break;
				 } 
			   }
			if (x>y)
    123c:	8e 15       	cp	r24, r14
    123e:	9f 05       	cpc	r25, r15
    1240:	78 f7       	brcc	.-34     	; 0x1220 <subtraction_mood+0x1f6>
    1242:	1d a7       	lds	r17, 0x7d
    1244:	0c a7       	lds	r16, 0x7c
    1246:	1c 01       	movw	r2, r24
				 }
			 }
			 break;
			 
			 case 4:
			 rang=65535;
    1248:	ef ef       	ldi	r30, 0xFF	; 255
    124a:	ff ef       	ldi	r31, 0xFF	; 255
    124c:	ff a3       	lds	r31, 0x5f
    124e:	ee a3       	lds	r30, 0x5e
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <subtraction_mood+0x236>
    1252:	fd a6       	lds	r31, 0xbd
    1254:	ec a6       	lds	r30, 0xbc
    1256:	1c 01       	movw	r2, r24
				 }
			 }
			 break;
			 
			 case 3:
			 rang=10000;
    1258:	a0 e1       	ldi	r26, 0x10	; 16
    125a:	b7 e2       	ldi	r27, 0x27	; 39
    125c:	bf a3       	lds	r27, 0x5f
    125e:	ae a3       	lds	r26, 0x5e
				break;
			 }
			 }
			 break;
		 }
		 LCD_Send_Cmd(RETURN_HOME);
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_ON);
    1266:	8e e0       	ldi	r24, 0x0E	; 14
    1268:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_send_short_number(x);
    126c:	8c a5       	lds	r24, 0x6c
    126e:	9d a5       	lds	r25, 0x6d
    1270:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_send_short_number>
		 LCD_Send_Char('-');
    1274:	8d e2       	ldi	r24, 0x2D	; 45
    1276:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		 LCD_send_short_number(y);
    127a:	c1 01       	movw	r24, r2
    127c:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_send_short_number>
		 LCD_Send_Char('=');
    1280:	8d e3       	ldi	r24, 0x3D	; 61
    1282:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		 if((x-y)<10)
    1286:	2c a5       	lds	r18, 0x6c
    1288:	3d a5       	lds	r19, 0x6d
    128a:	22 19       	sub	r18, r2
    128c:	33 09       	sbc	r19, r3
    128e:	2a 30       	cpi	r18, 0x0A	; 10
    1290:	31 05       	cpc	r19, r1
    1292:	50 f4       	brcc	.+20     	; 0x12a8 <subtraction_mood+0x27e>
		 {
		     answer[0]=(x-y);
    1294:	8c a5       	lds	r24, 0x6c
    1296:	82 19       	sub	r24, r2
    1298:	89 83       	std	Y+1, r24	; 0x01
			 answer[1]=0XFF;
    129a:	bf ef       	ldi	r27, 0xFF	; 255
    129c:	ba 83       	std	Y+2, r27	; 0x02
			 answer[2]=0XFF;
    129e:	bb 83       	std	Y+3, r27	; 0x03
			 answer[3]=0XFF;
    12a0:	bc 83       	std	Y+4, r27	; 0x04
			 answer[4]=0XFF;
    12a2:	bd 83       	std	Y+5, r27	; 0x05
			 answer[5]=0XFF;
    12a4:	be 83       	std	Y+6, r27	; 0x06
    12a6:	0f c0       	rjmp	.+30     	; 0x12c6 <subtraction_mood+0x29c>
		 }
		 else if ((x-y)<100)
    12a8:	24 36       	cpi	r18, 0x64	; 100
    12aa:	31 05       	cpc	r19, r1
    12ac:	b0 f4       	brcc	.+44     	; 0x12da <subtraction_mood+0x2b0>
		 {
			 answer[0]=((x-y)/10);
    12ae:	c9 01       	movw	r24, r18
    12b0:	6a e0       	ldi	r22, 0x0A	; 10
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    12b8:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x-y)%10);
    12ba:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=0XFF;
    12bc:	ef ef       	ldi	r30, 0xFF	; 255
    12be:	eb 83       	std	Y+3, r30	; 0x03
			 answer[3]=0XFF;
    12c0:	ec 83       	std	Y+4, r30	; 0x04
			 answer[4]=0XFF;
    12c2:	ed 83       	std	Y+5, r30	; 0x05
			 answer[5]=0XFF;
    12c4:	ee 83       	std	Y+6, r30	; 0x06
				 }
			 }
			 break;
			 
			 case 4:
			 rang=65535;
    12c6:	00 e0       	ldi	r16, 0x00	; 0
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
		position++;
		if (position>=6)
		{
			position=5;
    12c8:	0f 2e       	mov	r0, r31
    12ca:	f5 e0       	ldi	r31, 0x05	; 5
    12cc:	af 2e       	mov	r10, r31
    12ce:	f0 2d       	mov	r31, r0
		
		while (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
    12d0:	bb 24       	eor	r11, r11
    12d2:	b3 94       	inc	r11
	{
		correct=0;
    12d4:	ee 24       	eor	r14, r14
		for (int i=0;i<6;i++)
		{
			if (answer[i]!=user_answer[i])
			{
				correct=1;//you can increase it every wrong in the debug process
    12d6:	fb 2c       	mov	r15, r11
    12d8:	6b c0       	rjmp	.+214    	; 0x13b0 <subtraction_mood+0x386>
			 answer[2]=0XFF;
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
		 }
		 else if ((x-y)<1000)
    12da:	f3 e0       	ldi	r31, 0x03	; 3
    12dc:	28 3e       	cpi	r18, 0xE8	; 232
    12de:	3f 07       	cpc	r19, r31
    12e0:	c0 f4       	brcc	.+48     	; 0x1312 <subtraction_mood+0x2e8>
		 {
			 answer[0]=((x-y)/100);
    12e2:	c9 01       	movw	r24, r18
    12e4:	64 e6       	ldi	r22, 0x64	; 100
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    12ec:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x-y)/10%10);
    12ee:	ea e0       	ldi	r30, 0x0A	; 10
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	c9 01       	movw	r24, r18
    12f4:	bf 01       	movw	r22, r30
    12f6:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    12fa:	28 2f       	mov	r18, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bf 01       	movw	r22, r30
    1300:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1304:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=((x-y)%10);
    1306:	2b 83       	std	Y+3, r18	; 0x03
			 answer[3]=0XFF;
    1308:	2f ef       	ldi	r18, 0xFF	; 255
    130a:	2c 83       	std	Y+4, r18	; 0x04
			 answer[4]=0XFF;
    130c:	2d 83       	std	Y+5, r18	; 0x05
			 answer[5]=0XFF;
    130e:	2e 83       	std	Y+6, r18	; 0x06
    1310:	da cf       	rjmp	.-76     	; 0x12c6 <subtraction_mood+0x29c>
			 
	     }
		 else if ((x-y)<10000)
    1312:	47 e2       	ldi	r20, 0x27	; 39
    1314:	20 31       	cpi	r18, 0x10	; 16
    1316:	34 07       	cpc	r19, r20
    1318:	08 f5       	brcc	.+66     	; 0x135c <subtraction_mood+0x332>
		 {
			 answer[0]=((x-y)/1000);
    131a:	c9 01       	movw	r24, r18
    131c:	68 ee       	ldi	r22, 0xE8	; 232
    131e:	73 e0       	ldi	r23, 0x03	; 3
    1320:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1324:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x-y)/100%10);
    1326:	c9 01       	movw	r24, r18
    1328:	64 e6       	ldi	r22, 0x64	; 100
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1330:	cb 01       	movw	r24, r22
    1332:	ea e0       	ldi	r30, 0x0A	; 10
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	bf 01       	movw	r22, r30
    1338:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    133c:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=((x-y)/10%10);
    133e:	c9 01       	movw	r24, r18
    1340:	bf 01       	movw	r22, r30
    1342:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1346:	28 2f       	mov	r18, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bf 01       	movw	r22, r30
    134c:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1350:	8b 83       	std	Y+3, r24	; 0x03
			 answer[3]=((x-y)%10);
    1352:	2c 83       	std	Y+4, r18	; 0x04
			 answer[4]=0XFF;
    1354:	5f ef       	ldi	r21, 0xFF	; 255
    1356:	5d 83       	std	Y+5, r21	; 0x05
			 answer[5]=0XFF;
    1358:	5e 83       	std	Y+6, r21	; 0x06
    135a:	b5 cf       	rjmp	.-150    	; 0x12c6 <subtraction_mood+0x29c>
	     }
		 else if ((x-y)<100000)
		 {
		   answer[0]=((x-y)/10000);
    135c:	c9 01       	movw	r24, r18
    135e:	60 e1       	ldi	r22, 0x10	; 16
    1360:	77 e2       	ldi	r23, 0x27	; 39
    1362:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1366:	69 83       	std	Y+1, r22	; 0x01
		   answer[1]=((x-y)/1000%10);
    1368:	c9 01       	movw	r24, r18
    136a:	68 ee       	ldi	r22, 0xE8	; 232
    136c:	73 e0       	ldi	r23, 0x03	; 3
    136e:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	ea e0       	ldi	r30, 0x0A	; 10
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	bf 01       	movw	r22, r30
    137a:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    137e:	8a 83       	std	Y+2, r24	; 0x02
		   answer[2]=((x-y)/100%10);
    1380:	c9 01       	movw	r24, r18
    1382:	64 e6       	ldi	r22, 0x64	; 100
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    138a:	cb 01       	movw	r24, r22
    138c:	bf 01       	movw	r22, r30
    138e:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1392:	8b 83       	std	Y+3, r24	; 0x03
		   answer[3]=((x-y)/10%10);
    1394:	c9 01       	movw	r24, r18
    1396:	bf 01       	movw	r22, r30
    1398:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    139c:	28 2f       	mov	r18, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bf 01       	movw	r22, r30
    13a2:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    13a6:	8c 83       	std	Y+4, r24	; 0x04
		   answer[4]=((x-y)%10);
    13a8:	2d 83       	std	Y+5, r18	; 0x05
		   answer[5]=0XFF;
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	8e 83       	std	Y+6, r24	; 0x06
    13ae:	8b cf       	rjmp	.-234    	; 0x12c6 <subtraction_mood+0x29c>
	

   while(1)
   {
	   
	keypad=Keypad_u8check_press();
    13b0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Keypad_u8check_press>
    13b4:	18 2f       	mov	r17, r24
	if (keypad!=0xFF)
    13b6:	8f 3f       	cpi	r24, 0xFF	; 255
    13b8:	39 f1       	breq	.+78     	; 0x1408 <subtraction_mood+0x3de>
	{
		LCD_Send_Char(keypad);
    13ba:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
    13be:	80 2f       	mov	r24, r16
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	f4 01       	movw	r30, r8
    13cc:	e8 0f       	add	r30, r24
    13ce:	f9 1f       	adc	r31, r25
    13d0:	81 2f       	mov	r24, r17
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	c0 97       	sbiw	r24, 0x30	; 48
    13d6:	aa 27       	eor	r26, r26
    13d8:	97 fd       	sbrc	r25, 7
    13da:	a0 95       	com	r26
    13dc:	ba 2f       	mov	r27, r26
    13de:	86 83       	std	Z+6, r24	; 0x06
    13e0:	97 83       	std	Z+7, r25	; 0x07
    13e2:	a0 87       	std	Z+8, r26	; 0x08
    13e4:	b1 87       	std	Z+9, r27	; 0x09
		position++;
    13e6:	0f 5f       	subi	r16, 0xFF	; 255
		if (position>=6)
    13e8:	06 30       	cpi	r16, 0x06	; 6
    13ea:	20 f0       	brcs	.+8      	; 0x13f4 <subtraction_mood+0x3ca>
		{
			position=5;
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
    13ec:	80 e1       	ldi	r24, 0x10	; 16
    13ee:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
		position++;
		if (position>=6)
		{
			position=5;
    13f2:	0a 2d       	mov	r16, r10
    13f4:	2f e7       	ldi	r18, 0x7F	; 127
    13f6:	3a e1       	ldi	r19, 0x1A	; 26
    13f8:	46 e0       	ldi	r20, 0x06	; 6
    13fa:	21 50       	subi	r18, 0x01	; 1
    13fc:	30 40       	sbci	r19, 0x00	; 0
    13fe:	40 40       	sbci	r20, 0x00	; 0
    1400:	e1 f7       	brne	.-8      	; 0x13fa <subtraction_mood+0x3d0>
    1402:	00 c0       	rjmp	.+0      	; 0x1404 <subtraction_mood+0x3da>
    1404:	00 00       	nop
    1406:	d4 cf       	rjmp	.-88     	; 0x13b0 <subtraction_mood+0x386>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
		}
		_delay_ms(250);
		
	}
	else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
    1408:	84 e4       	ldi	r24, 0x44	; 68
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	31 f5       	brne	.+76     	; 0x1460 <subtraction_mood+0x436>
	{
		if(position>0)
    1414:	00 23       	and	r16, r16
    1416:	e9 f0       	breq	.+58     	; 0x1452 <subtraction_mood+0x428>
		{
			user_answer[position]=0XFF;
    1418:	80 2f       	mov	r24, r16
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 0d       	add	r24, r8
    1426:	99 1d       	adc	r25, r9
    1428:	2f ef       	ldi	r18, 0xFF	; 255
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	dc 01       	movw	r26, r24
    1432:	16 96       	adiw	r26, 0x06	; 6
    1434:	2d 93       	st	X+, r18
    1436:	3d 93       	st	X+, r19
    1438:	4d 93       	st	X+, r20
    143a:	5c 93       	st	X, r21
    143c:	19 97       	sbiw	r26, 0x09	; 9
			LCD_Send_Char(' ');
    143e:	80 e2       	ldi	r24, 0x20	; 32
    1440:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
    1444:	80 e1       	ldi	r24, 0x10	; 16
    1446:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
    144a:	80 e1       	ldi	r24, 0x10	; 16
    144c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			position--;
    1450:	01 50       	subi	r16, 0x01	; 1
		}
		
		while (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
    1452:	84 e4       	ldi	r24, 0x44	; 68
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	d1 f3       	breq	.-12     	; 0x1452 <subtraction_mood+0x428>
    145e:	a8 cf       	rjmp	.-176    	; 0x13b0 <subtraction_mood+0x386>
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
    1460:	84 e4       	ldi	r24, 0x44	; 68
    1462:	6b 2d       	mov	r22, r11
    1464:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	39 f0       	breq	.+14     	; 0x147a <subtraction_mood+0x450>
    146c:	84 e4       	ldi	r24, 0x44	; 68
    146e:	6e 2d       	mov	r22, r14
    1470:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	09 f0       	breq	.+2      	; 0x147a <subtraction_mood+0x450>
    1478:	9b cf       	rjmp	.-202    	; 0x13b0 <subtraction_mood+0x386>
	
}
	
}

void subtraction_mood()
    147a:	27 2d       	mov	r18, r7
    147c:	36 2d       	mov	r19, r6
    147e:	e5 2d       	mov	r30, r5
    1480:	f4 2d       	mov	r31, r4
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
	{
		correct=0;
    1482:	1e 2d       	mov	r17, r14
		for (int i=0;i<6;i++)
		{
			if (answer[i]!=user_answer[i])
    1484:	81 91       	ld	r24, Z+
    1486:	d9 01       	movw	r26, r18
    1488:	4d 91       	ld	r20, X+
    148a:	5d 91       	ld	r21, X+
    148c:	6d 91       	ld	r22, X+
    148e:	7d 91       	ld	r23, X+
    1490:	9d 01       	movw	r18, r26
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	84 17       	cp	r24, r20
    149a:	95 07       	cpc	r25, r21
    149c:	a6 07       	cpc	r26, r22
    149e:	b7 07       	cpc	r27, r23
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <subtraction_mood+0x47a>
			{
				correct=1;//you can increase it every wrong in the debug process
    14a2:	1f 2d       	mov	r17, r15
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
	{
		correct=0;
		for (int i=0;i<6;i++)
    14a4:	ec 15       	cp	r30, r12
    14a6:	fd 05       	cpc	r31, r13
    14a8:	69 f7       	brne	.-38     	; 0x1484 <subtraction_mood+0x45a>
			if (answer[i]!=user_answer[i])
			{
				correct=1;//you can increase it every wrong in the debug process
			}
		}
	 if (correct==0)
    14aa:	11 23       	and	r17, r17
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <subtraction_mood+0x486>
    14ae:	5b c0       	rjmp	.+182    	; 0x1566 <subtraction_mood+0x53c>
	 {
		 
		 if (simple_random_var>0)
    14b0:	80 91 31 01 	lds	r24, 0x0131
    14b4:	88 23       	and	r24, r24
    14b6:	31 f0       	breq	.+12     	; 0x14c4 <subtraction_mood+0x49a>
		 {
			 simple_random_correct_answer=1;
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	90 93 af 00 	sts	0x00AF, r25
			 simple_random_var++;
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	80 93 31 01 	sts	0x0131, r24
		 }
		LCD_Clear_Screen();
    14c4:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    14c8:	8c e0       	ldi	r24, 0x0C	; 12
    14ca:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		LCD_Move_cursor(1,3);
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	63 e0       	ldi	r22, 0x03	; 3
    14d2:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		LCD_String("right answer");
    14d6:	82 ed       	ldi	r24, 0xD2	; 210
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		LCD_Move_cursor(2,1) ;
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		LCD_String("score =");
    14e6:	8f ed       	ldi	r24, 0xDF	; 223
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		if (simple_random_var>1)
    14ee:	80 91 31 01 	lds	r24, 0x0131
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	48 f0       	brcs	.+18     	; 0x1508 <subtraction_mood+0x4de>
		{
			simple_random_score++;
    14f6:	80 91 2e 01 	lds	r24, 0x012E
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	8d a3       	lds	r24, 0x5d
    14fe:	80 93 2e 01 	sts	0x012E, r24
			score=simple_random_score;
			LCD_send_char_number(simple_random_score);
    1502:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <subtraction_mood+0x4ea>
			
		}
		else
		{
			score++;
    1508:	bd a1       	lds	r27, 0x4d
    150a:	bf 5f       	subi	r27, 0xFF	; 255
    150c:	bd a3       	lds	r27, 0x5d
			LCD_send_char_number(score);
    150e:	8b 2f       	mov	r24, r27
    1510:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
		}
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    1514:	8c e0       	ldi	r24, 0x0C	; 12
    1516:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    151a:	2f ef       	ldi	r18, 0xFF	; 255
    151c:	3d e3       	ldi	r19, 0x3D	; 61
    151e:	49 e4       	ldi	r20, 0x49	; 73
    1520:	21 50       	subi	r18, 0x01	; 1
    1522:	30 40       	sbci	r19, 0x00	; 0
    1524:	40 40       	sbci	r20, 0x00	; 0
    1526:	e1 f7       	brne	.-8      	; 0x1520 <subtraction_mood+0x4f6>
    1528:	00 c0       	rjmp	.+0      	; 0x152a <subtraction_mood+0x500>
    152a:	00 00       	nop
		_delay_ms(3000);
		take_action=1;
		 for(char i=0;i<6;i++)
		 {
			user_answer[i]=0XFF;
    152c:	39 a1       	lds	r19, 0x49
    152e:	3f 83       	std	Y+7, r19	; 0x07
    1530:	4a a1       	lds	r20, 0x4a
    1532:	48 87       	std	Y+8, r20	; 0x08
    1534:	5b a1       	lds	r21, 0x4b
    1536:	59 87       	std	Y+9, r21	; 0x09
    1538:	8c a1       	lds	r24, 0x4c
    153a:	8a 87       	std	Y+10, r24	; 0x0a
    153c:	3b 87       	std	Y+11, r19	; 0x0b
    153e:	4c 87       	std	Y+12, r20	; 0x0c
    1540:	5d 87       	std	Y+13, r21	; 0x0d
    1542:	8e 87       	std	Y+14, r24	; 0x0e
    1544:	3f 87       	std	Y+15, r19	; 0x0f
    1546:	48 8b       	std	Y+16, r20	; 0x10
    1548:	59 8b       	std	Y+17, r21	; 0x11
    154a:	8a 8b       	std	Y+18, r24	; 0x12
    154c:	3b 8b       	std	Y+19, r19	; 0x13
    154e:	4c 8b       	std	Y+20, r20	; 0x14
    1550:	5d 8b       	std	Y+21, r21	; 0x15
    1552:	8e 8b       	std	Y+22, r24	; 0x16
    1554:	3f 8b       	std	Y+23, r19	; 0x17
    1556:	48 8f       	std	Y+24, r20	; 0x18
    1558:	59 8f       	std	Y+25, r21	; 0x19
    155a:	8a 8f       	std	Y+26, r24	; 0x1a
    155c:	3b 8f       	std	Y+27, r19	; 0x1b
    155e:	4c 8f       	std	Y+28, r20	; 0x1c
    1560:	5d 8f       	std	Y+29, r21	; 0x1d
    1562:	8e 8f       	std	Y+30, r24	; 0x1e
    1564:	b2 cd       	rjmp	.-1180   	; 0x10ca <subtraction_mood+0xa0>
		 }
		break;	 
	 }
	 else if (correct==1)
    1566:	11 30       	cpi	r17, 0x01	; 1
    1568:	09 f0       	breq	.+2      	; 0x156c <subtraction_mood+0x542>
    156a:	22 cf       	rjmp	.-444    	; 0x13b0 <subtraction_mood+0x386>
	 {
		 if (simple_random_var>0)
    156c:	80 91 31 01 	lds	r24, 0x0131
    1570:	88 23       	and	r24, r24
    1572:	11 f0       	breq	.+4      	; 0x1578 <subtraction_mood+0x54e>
		 {
			 simple_random_correct_answer=0;
    1574:	10 92 af 00 	sts	0x00AF, r1
		 }
		 correct=0;
		 right_answer=0;
		 LCD_Clear_Screen();
    1578:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    157c:	8c e0       	ldi	r24, 0x0C	; 12
    157e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_Move_cursor(1,3);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	63 e0       	ldi	r22, 0x03	; 3
    1586:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		 LCD_String("wrong answer");
    158a:	87 ee       	ldi	r24, 0xE7	; 231
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	33 ed       	ldi	r19, 0xD3	; 211
    1596:	40 e3       	ldi	r20, 0x30	; 48
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	30 40       	sbci	r19, 0x00	; 0
    159c:	40 40       	sbci	r20, 0x00	; 0
    159e:	e1 f7       	brne	.-8      	; 0x1598 <subtraction_mood+0x56e>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <subtraction_mood+0x578>
    15a2:	00 00       	nop
		 _delay_ms(2000);
		 LCD_Clear_Screen();
    15a4:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    15a8:	8c e0       	ldi	r24, 0x0C	; 12
    15aa:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 if (simple_random_var>0)
    15ae:	80 91 31 01 	lds	r24, 0x0131
    15b2:	88 23       	and	r24, r24
    15b4:	19 f0       	breq	.+6      	; 0x15bc <subtraction_mood+0x592>
		 {
			 score=simple_random_score;
    15b6:	30 91 2e 01 	lds	r19, 0x012E
    15ba:	3d a3       	lds	r19, 0x5d
			 
		 }
		 switch (rang)
    15bc:	4e a1       	lds	r20, 0x4e
    15be:	5f a1       	lds	r21, 0x4f
    15c0:	44 36       	cpi	r20, 0x64	; 100
    15c2:	51 05       	cpc	r21, r1
    15c4:	01 f1       	breq	.+64     	; 0x1606 <subtraction_mood+0x5dc>
    15c6:	45 36       	cpi	r20, 0x65	; 101
    15c8:	51 05       	cpc	r21, r1
    15ca:	28 f4       	brcc	.+10     	; 0x15d6 <subtraction_mood+0x5ac>
    15cc:	4a 30       	cpi	r20, 0x0A	; 10
    15ce:	51 05       	cpc	r21, r1
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <subtraction_mood+0x5aa>
    15d2:	43 c0       	rjmp	.+134    	; 0x165a <subtraction_mood+0x630>
    15d4:	0b c0       	rjmp	.+22     	; 0x15ec <subtraction_mood+0x5c2>
    15d6:	8e a1       	lds	r24, 0x4e
    15d8:	9f a1       	lds	r25, 0x4f
    15da:	a3 e0       	ldi	r26, 0x03	; 3
    15dc:	88 3e       	cpi	r24, 0xE8	; 232
    15de:	9a 07       	cpc	r25, r26
    15e0:	01 f1       	breq	.+64     	; 0x1622 <subtraction_mood+0x5f8>
    15e2:	b7 e2       	ldi	r27, 0x27	; 39
    15e4:	80 31       	cpi	r24, 0x10	; 16
    15e6:	9b 07       	cpc	r25, r27
    15e8:	c1 f5       	brne	.+112    	; 0x165a <subtraction_mood+0x630>
    15ea:	29 c0       	rjmp	.+82     	; 0x163e <subtraction_mood+0x614>
		 {
			case 10 :
			if (score>EEPROM_u8Read(BEST_VERY_EASY_SCORE_LOCATION))
    15ec:	81 e3       	ldi	r24, 0x31	; 49
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    15f4:	ed a1       	lds	r30, 0x4d
    15f6:	8e 17       	cp	r24, r30
    15f8:	b8 f5       	brcc	.+110    	; 0x1668 <subtraction_mood+0x63e>
			{
				EEPROM_Write(BEST_VERY_EASY_SCORE_LOCATION,score);	
    15fa:	81 e3       	ldi	r24, 0x31	; 49
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	6e 2f       	mov	r22, r30
    1600:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
    1604:	31 c0       	rjmp	.+98     	; 0x1668 <subtraction_mood+0x63e>
			}
			correct=1;				 
			break; 
			
			case 100 :
			if (score>EEPROM_u8Read(BEST_EASY_SCORE_LOCATION))
    1606:	82 e3       	ldi	r24, 0x32	; 50
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    160e:	fd a1       	lds	r31, 0x4d
    1610:	8f 17       	cp	r24, r31
    1612:	28 f5       	brcc	.+74     	; 0x165e <subtraction_mood+0x634>
			{
				EEPROM_Write(BEST_EASY_SCORE_LOCATION,score);
    1614:	82 e3       	ldi	r24, 0x32	; 50
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	6f 2f       	mov	r22, r31
    161a:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
				
			}
			correct=2;
    161e:	12 e0       	ldi	r17, 0x02	; 2
    1620:	23 c0       	rjmp	.+70     	; 0x1668 <subtraction_mood+0x63e>
			break;
			
			case 1000 :
			if (score>EEPROM_u8Read(BEST_MEDIUM_SCORE_LOCATION))
    1622:	83 e3       	ldi	r24, 0x33	; 51
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    162a:	2d a1       	lds	r18, 0x4d
    162c:	82 17       	cp	r24, r18
    162e:	c8 f4       	brcc	.+50     	; 0x1662 <subtraction_mood+0x638>
			{
				EEPROM_Write(BEST_MEDIUM_SCORE_LOCATION,score);
    1630:	83 e3       	ldi	r24, 0x33	; 51
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	62 2f       	mov	r22, r18
    1636:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
				
			}
			correct=3;
    163a:	13 e0       	ldi	r17, 0x03	; 3
    163c:	15 c0       	rjmp	.+42     	; 0x1668 <subtraction_mood+0x63e>
			break;
			
			case 10000 :
			if (score>EEPROM_u8Read(BEST_HARD_SCORE_LOCATION))
    163e:	84 e3       	ldi	r24, 0x34	; 52
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    1646:	3d a1       	lds	r19, 0x4d
    1648:	83 17       	cp	r24, r19
    164a:	68 f4       	brcc	.+26     	; 0x1666 <subtraction_mood+0x63c>
			{
				EEPROM_Write(BEST_HARD_SCORE_LOCATION,score);
    164c:	84 e3       	ldi	r24, 0x34	; 52
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	63 2f       	mov	r22, r19
    1652:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
				
			}
			  correct=4;
    1656:	14 e0       	ldi	r17, 0x04	; 4
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <subtraction_mood+0x63e>
	 {
		 if (simple_random_var>0)
		 {
			 simple_random_correct_answer=0;
		 }
		 correct=0;
    165a:	10 e0       	ldi	r17, 0x00	; 0
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <subtraction_mood+0x63e>
			if (score>EEPROM_u8Read(BEST_EASY_SCORE_LOCATION))
			{
				EEPROM_Write(BEST_EASY_SCORE_LOCATION,score);
				
			}
			correct=2;
    165e:	12 e0       	ldi	r17, 0x02	; 2
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <subtraction_mood+0x63e>
			if (score>EEPROM_u8Read(BEST_MEDIUM_SCORE_LOCATION))
			{
				EEPROM_Write(BEST_MEDIUM_SCORE_LOCATION,score);
				
			}
			correct=3;
    1662:	13 e0       	ldi	r17, 0x03	; 3
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <subtraction_mood+0x63e>
			if (score>EEPROM_u8Read(BEST_HARD_SCORE_LOCATION))
			{
				EEPROM_Write(BEST_HARD_SCORE_LOCATION,score);
				
			}
			  correct=4;
    1666:	14 e0       	ldi	r17, 0x04	; 4
				
			}*/
			correct=5;
			break; 
		 }
			 LCD_Clear_Screen();
    1668:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
			 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    166c:	8c e0       	ldi	r24, 0x0C	; 12
    166e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			 LCD_String("your score=");
    1672:	84 ef       	ldi	r24, 0xF4	; 244
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 LCD_send_char_number(score);
    167a:	8d a1       	lds	r24, 0x4d
    167c:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
			 LCD_Move_cursor(2,1);
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			 LCD_String("high score=");
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 LCD_send_char_number(EEPROM_u8Read(THE_NON_USED_LOCATION+correct));
    1690:	81 2f       	mov	r24, r17
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	c0 96       	adiw	r24, 0x30	; 48
    1696:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    169a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	9d e3       	ldi	r25, 0x3D	; 61
    16a2:	a9 e4       	ldi	r26, 0x49	; 73
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	90 40       	sbci	r25, 0x00	; 0
    16a8:	a0 40       	sbci	r26, 0x00	; 0
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <subtraction_mood+0x67a>
    16ac:	00 c0       	rjmp	.+0      	; 0x16ae <subtraction_mood+0x684>
    16ae:	00 00       	nop
			 break;
	 }	
	}
	}	 
}	
}
    16b0:	ae 96       	adiw	r28, 0x2e	; 46
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	9f 90       	pop	r9
    16d2:	8f 90       	pop	r8
    16d4:	7f 90       	pop	r7
    16d6:	6f 90       	pop	r6
    16d8:	5f 90       	pop	r5
    16da:	4f 90       	pop	r4
    16dc:	3f 90       	pop	r3
    16de:	2f 90       	pop	r2
    16e0:	08 95       	ret

000016e2 <simple_random>:
}	
}


void simple_random()
{
    16e2:	cf 93       	push	r28
	if (simple_random_var==1)
	{
		simple_random_difficalty=difficalty();
		simple_random_score=0;
	}
	simple_random_var=2;
    16e4:	c2 e0       	ldi	r28, 0x02	; 2
{
unsigned short dice=0;

while(1)
{
	if (simple_random_correct_answer==0)
    16e6:	80 91 af 00 	lds	r24, 0x00AF
    16ea:	88 23       	and	r24, r24
    16ec:	c1 f0       	breq	.+48     	; 0x171e <simple_random+0x3c>
	{
		break;
	}
	
	if (simple_random_var==1)
    16ee:	80 91 31 01 	lds	r24, 0x0131
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	31 f4       	brne	.+12     	; 0x1702 <simple_random+0x20>
	{
		simple_random_difficalty=difficalty();
    16f6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <difficalty>
    16fa:	80 93 2f 01 	sts	0x012F, r24
		simple_random_score=0;
    16fe:	10 92 2e 01 	sts	0x012E, r1
	}
	simple_random_var=2;
    1702:	c0 93 31 01 	sts	0x0131, r28
    dice=rand();
    1706:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
	if ((dice%2)==0)
    170a:	80 fd       	sbrc	r24, 0
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <simple_random+0x32>
	{
		subtraction_mood();
    170e:	0e 94 15 08 	call	0x102a	; 0x102a <subtraction_mood>
    1712:	e9 cf       	rjmp	.-46     	; 0x16e6 <simple_random+0x4>
	}
	else if ((dice%2)==1)
    1714:	80 ff       	sbrs	r24, 0
    1716:	e7 cf       	rjmp	.-50     	; 0x16e6 <simple_random+0x4>
	{
		addition_mood();
    1718:	0e 94 91 0b 	call	0x1722	; 0x1722 <addition_mood>
    171c:	e4 cf       	rjmp	.-56     	; 0x16e6 <simple_random+0x4>
	}
}
}
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <addition_mood>:
extern unsigned char simple_random_correct_answer;//if this variable is one then the answer in simple random mood was correct
extern unsigned char simple_random_score;
extern unsigned char simple_random_var;

void addition_mood()
{
    1722:	2f 92       	push	r2
    1724:	3f 92       	push	r3
    1726:	4f 92       	push	r4
    1728:	5f 92       	push	r5
    172a:	6f 92       	push	r6
    172c:	7f 92       	push	r7
    172e:	8f 92       	push	r8
    1730:	9f 92       	push	r9
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	aa 97       	sbiw	r28, 0x2a	; 42
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
	unsigned char difficalty_mood=0;
	if (simple_random_var>0)
    1756:	80 91 31 01 	lds	r24, 0x0131
    175a:	88 23       	and	r24, r24
    175c:	21 f0       	breq	.+8      	; 0x1766 <addition_mood+0x44>
	{
	  difficalty_mood=simple_random_difficalty;
    175e:	20 91 2f 01 	lds	r18, 0x012F
    1762:	2a a7       	lds	r18, 0x7a
    1764:	03 c0       	rjmp	.+6      	; 0x176c <addition_mood+0x4a>
	}
	else
	{
	 difficalty_mood=difficalty();
    1766:	0e 94 d5 04 	call	0x9aa	; 0x9aa <difficalty>
    176a:	8a a7       	lds	r24, 0x7a
	}	
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
    176c:	fe 01       	movw	r30, r28
    176e:	31 96       	adiw	r30, 0x01	; 1
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	df 01       	movw	r26, r30
    1774:	1d 92       	st	X+, r1
    1776:	8a 95       	dec	r24
    1778:	e9 f7       	brne	.-6      	; 0x1774 <addition_mood+0x52>
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
	unsigned short y=0;
	unsigned long user_answer[6]={0};
    177a:	fe 01       	movw	r30, r28
    177c:	37 96       	adiw	r30, 0x07	; 7
    177e:	88 e1       	ldi	r24, 0x18	; 24
    1780:	df 01       	movw	r26, r30
    1782:	1d 92       	st	X+, r1
    1784:	8a 95       	dec	r24
    1786:	e9 f7       	brne	.-6      	; 0x1782 <addition_mood+0x60>
	unsigned char take_action=1;
    unsigned char correct=0;
	unsigned char right_answer=1;	
    1788:	b1 e0       	ldi	r27, 0x01	; 1
    178a:	bd a3       	lds	r27, 0x5d
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
	unsigned short y=0;
	unsigned long user_answer[6]={0};
	unsigned char take_action=1;
    178c:	e1 e0       	ldi	r30, 0x01	; 1
    178e:	ea a3       	lds	r30, 0x5a
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
	unsigned short y=0;
    1790:	19 a6       	lds	r17, 0xb9
    1792:	18 a6       	lds	r17, 0xb8
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short rang=0;
	unsigned short x=0;
    1794:	1f a2       	lds	r17, 0x9f
    1796:	1e a2       	lds	r17, 0x9e
	}	
	unsigned char score=0;
	unsigned char position=0;
	unsigned char answer[6]={0,0,0,0,0,0};
	unsigned char keypad=0;
	unsigned short rang=0;
    1798:	1c a2       	lds	r17, 0x9c
    179a:	1b a2       	lds	r17, 0x9b
	}
	else
	{
	 difficalty_mood=difficalty();
	}	
	unsigned char score=0;
    179c:	19 a2       	lds	r17, 0x99
	{
		break;
	}
	
	
	 if (take_action==1)
    179e:	4e 01       	movw	r8, r28
    17a0:	08 94       	sec
    17a2:	81 1c       	adc	r8, r1
    17a4:	91 1c       	adc	r9, r1
extern unsigned char simple_random_difficalty;
extern unsigned char simple_random_correct_answer;//if this variable is one then the answer in simple random mood was correct
extern unsigned char simple_random_score;
extern unsigned char simple_random_var;

void addition_mood()
    17a6:	9e 01       	movw	r18, r28
    17a8:	21 5e       	subi	r18, 0xE1	; 225
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	38 a3       	lds	r19, 0x58
    17ae:	2f 8f       	std	Y+31, r18	; 0x1f
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
    17b0:	0f 2e       	mov	r0, r31
    17b2:	ff ef       	ldi	r31, 0xFF	; 255
    17b4:	2f 2e       	mov	r2, r31
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	3f 2e       	mov	r3, r31
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	4f 2e       	mov	r4, r31
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	5f 2e       	mov	r5, r31
    17c2:	f0 2d       	mov	r31, r0
extern unsigned char simple_random_difficalty;
extern unsigned char simple_random_correct_answer;//if this variable is one then the answer in simple random mood was correct
extern unsigned char simple_random_score;
extern unsigned char simple_random_var;

void addition_mood()
    17c4:	0f 2e       	mov	r0, r31
    17c6:	f7 e0       	ldi	r31, 0x07	; 7
    17c8:	cf 2e       	mov	r12, r31
    17ca:	dd 24       	eor	r13, r13
    17cc:	f0 2d       	mov	r31, r0
    17ce:	cc 0e       	add	r12, r28
    17d0:	dd 1e       	adc	r13, r29
	   
	keypad=Keypad_u8check_press();
	if (keypad!=0xFF)
	{
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
    17d2:	78 2c       	mov	r7, r8
    17d4:	69 2c       	mov	r6, r9
	unsigned char right_answer=1;	
	
while(1)
{
	position=0;
	if (simple_random_var==3)
    17d6:	80 91 31 01 	lds	r24, 0x0131
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	39 f4       	brne	.+14     	; 0x17ec <addition_mood+0xca>
	{
		simple_random();
    17de:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <simple_random>
		if (simple_random_correct_answer==0)
    17e2:	80 91 af 00 	lds	r24, 0x00AF
    17e6:	88 23       	and	r24, r24
    17e8:	51 f4       	brne	.+20     	; 0x17fe <addition_mood+0xdc>
    17ea:	e6 c2       	rjmp	.+1484   	; 0x1db8 <addition_mood+0x696>
		{
			break;
		}
	}
	else if (simple_random_var==5)
    17ec:	85 30       	cpi	r24, 0x05	; 5
    17ee:	39 f4       	brne	.+14     	; 0x17fe <addition_mood+0xdc>
	{
		complex_random();
    17f0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <complex_random>
		if (simple_random_correct_answer==0)
    17f4:	80 91 af 00 	lds	r24, 0x00AF
    17f8:	88 23       	and	r24, r24
    17fa:	09 f4       	brne	.+2      	; 0x17fe <addition_mood+0xdc>
    17fc:	dd c2       	rjmp	.+1466   	; 0x1db8 <addition_mood+0x696>
		{
			break;
		}
	}	
	
	if (right_answer==0)
    17fe:	3d a1       	lds	r19, 0x4d
    1800:	33 23       	and	r19, r19
    1802:	09 f4       	brne	.+2      	; 0x1806 <addition_mood+0xe4>
    1804:	d9 c2       	rjmp	.+1458   	; 0x1db8 <addition_mood+0x696>
	{
		break;
	}
	
	
	 if (take_action==1)
    1806:	8a a1       	lds	r24, 0x4a
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	09 f0       	breq	.+2      	; 0x180e <addition_mood+0xec>
    180c:	e0 c0       	rjmp	.+448    	; 0x19ce <addition_mood+0x2ac>
    180e:	fe 01       	movw	r30, r28
    1810:	37 96       	adiw	r30, 0x07	; 7
    1812:	d4 01       	movw	r26, r8
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
			  answer[i]=0XFF;
    1814:	8f ef       	ldi	r24, 0xFF	; 255
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
          {
	          user_answer[i]=0XFF;
    1816:	21 92       	st	Z+, r2
    1818:	31 92       	st	Z+, r3
    181a:	41 92       	st	Z+, r4
    181c:	51 92       	st	Z+, r5
			  answer[i]=0XFF;
    181e:	8d 93       	st	X+, r24
	}
	
	
	 if (take_action==1)
	 {
          for(char i=0;i<6;i++)
    1820:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1822:	38 a1       	lds	r19, 0x48
    1824:	e2 17       	cp	r30, r18
    1826:	f3 07       	cpc	r31, r19
    1828:	b1 f7       	brne	.-20     	; 0x1816 <addition_mood+0xf4>
          {
	          user_answer[i]=0XFF;
			  answer[i]=0XFF;
          }

		  LCD_Clear_Screen();
    182a:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		  LCD_Move_cursor(2,15);
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	6f e0       	ldi	r22, 0x0F	; 15
    1832:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		  LCD_Send_Char('O');
    1836:	8f e4       	ldi	r24, 0x4F	; 79
    1838:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		  LCD_Send_Char('K');
    183c:	8b e4       	ldi	r24, 0x4B	; 75
    183e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		  LCD_Move_cursor(2,1);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		  LCD_String("delete");
    184a:	8b ec       	ldi	r24, 0xCB	; 203
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		  write_the_score(score);
    1852:	89 a1       	lds	r24, 0x49
    1854:	0e 94 89 05 	call	0xb12	; 0xb12 <write_the_score>
		
		 switch (difficalty_mood)
    1858:	3a a5       	lds	r19, 0x6a
    185a:	32 30       	cpi	r19, 0x02	; 2
    185c:	c1 f1       	breq	.+112    	; 0x18ce <addition_mood+0x1ac>
    185e:	33 30       	cpi	r19, 0x03	; 3
    1860:	30 f4       	brcc	.+12     	; 0x186e <addition_mood+0x14c>
    1862:	33 23       	and	r19, r19
    1864:	61 f0       	breq	.+24     	; 0x187e <addition_mood+0x15c>
    1866:	31 30       	cpi	r19, 0x01	; 1
    1868:	09 f0       	breq	.+2      	; 0x186c <addition_mood+0x14a>
    186a:	78 c0       	rjmp	.+240    	; 0x195c <addition_mood+0x23a>
    186c:	1b c0       	rjmp	.+54     	; 0x18a4 <addition_mood+0x182>
    186e:	8a a5       	lds	r24, 0x6a
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	09 f4       	brne	.+2      	; 0x1876 <addition_mood+0x154>
    1874:	41 c0       	rjmp	.+130    	; 0x18f8 <addition_mood+0x1d6>
    1876:	84 30       	cpi	r24, 0x04	; 4
    1878:	09 f0       	breq	.+2      	; 0x187c <addition_mood+0x15a>
    187a:	70 c0       	rjmp	.+224    	; 0x195c <addition_mood+0x23a>
    187c:	52 c0       	rjmp	.+164    	; 0x1922 <addition_mood+0x200>
		 {
			 case 0:
			 rang=10;
			 while (1)
			 {
			 x=rand()%10;
    187e:	0a e0       	ldi	r16, 0x0A	; 10
    1880:	10 e0       	ldi	r17, 0x00	; 0
    1882:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1886:	b8 01       	movw	r22, r16
    1888:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    188c:	7c 01       	movw	r14, r24
			 y=rand()%10;
    188e:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1892:	b8 01       	movw	r22, r16
    1894:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
			 if ((x>0)&&(y>0))
    1898:	e1 14       	cp	r14, r1
    189a:	f1 04       	cpc	r15, r1
    189c:	91 f3       	breq	.-28     	; 0x1882 <addition_mood+0x160>
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	81 f3       	breq	.-32     	; 0x1882 <addition_mood+0x160>
    18a2:	54 c0       	rjmp	.+168    	; 0x194c <addition_mood+0x22a>
			 }			 
			 break;
			 
			 case 1:
			 rang=100;
			 x=rand()%100;
    18a4:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    18a8:	04 e6       	ldi	r16, 0x64	; 100
    18aa:	10 e0       	ldi	r17, 0x00	; 0
    18ac:	b8 01       	movw	r22, r16
    18ae:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    18b2:	9f a3       	lds	r25, 0x5f
    18b4:	8e a3       	lds	r24, 0x5e
			 y=rand()%100;
    18b6:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    18ba:	b8 01       	movw	r22, r16
    18bc:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    18c0:	99 a7       	lds	r25, 0x79
    18c2:	88 a7       	lds	r24, 0x78
			 }
			 }			 
			 break;
			 
			 case 1:
			 rang=100;
    18c4:	a4 e6       	ldi	r26, 0x64	; 100
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	bc a3       	lds	r27, 0x5c
    18ca:	ab a3       	lds	r26, 0x5b
			 x=rand()%100;
			 y=rand()%100;
			 break;
    18cc:	47 c0       	rjmp	.+142    	; 0x195c <addition_mood+0x23a>
			 
			 case 2:
			 rang=1000;
			 x=rand()%1000;
    18ce:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    18d2:	08 ee       	ldi	r16, 0xE8	; 232
    18d4:	13 e0       	ldi	r17, 0x03	; 3
    18d6:	b8 01       	movw	r22, r16
    18d8:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    18dc:	9f a3       	lds	r25, 0x5f
    18de:	8e a3       	lds	r24, 0x5e
			 y=rand()%1000;
    18e0:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    18e4:	b8 01       	movw	r22, r16
    18e6:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    18ea:	99 a7       	lds	r25, 0x79
    18ec:	88 a7       	lds	r24, 0x78
			 x=rand()%100;
			 y=rand()%100;
			 break;
			 
			 case 2:
			 rang=1000;
    18ee:	e8 ee       	ldi	r30, 0xE8	; 232
    18f0:	f3 e0       	ldi	r31, 0x03	; 3
    18f2:	fc a3       	lds	r31, 0x5c
    18f4:	eb a3       	lds	r30, 0x5b
			 x=rand()%1000;
			 y=rand()%1000;
			 break;
    18f6:	32 c0       	rjmp	.+100    	; 0x195c <addition_mood+0x23a>
			 
			 case 3:
			 rang=10000;
			 x=rand()%10000;
    18f8:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    18fc:	00 e1       	ldi	r16, 0x10	; 16
    18fe:	17 e2       	ldi	r17, 0x27	; 39
    1900:	b8 01       	movw	r22, r16
    1902:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1906:	9f a3       	lds	r25, 0x5f
    1908:	8e a3       	lds	r24, 0x5e
			 y=rand()%10000;
    190a:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    190e:	b8 01       	movw	r22, r16
    1910:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1914:	99 a7       	lds	r25, 0x79
    1916:	88 a7       	lds	r24, 0x78
			 x=rand()%1000;
			 y=rand()%1000;
			 break;
			 
			 case 3:
			 rang=10000;
    1918:	20 e1       	ldi	r18, 0x10	; 16
    191a:	37 e2       	ldi	r19, 0x27	; 39
    191c:	3c a3       	lds	r19, 0x5c
    191e:	2b a3       	lds	r18, 0x5b
			 x=rand()%10000;
			 y=rand()%10000;
			 break;
    1920:	1d c0       	rjmp	.+58     	; 0x195c <addition_mood+0x23a>
			 
			 case 4:
			 rang=65535;
			 while (1)
			 {
				 x=rand();
    1922:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
				 if(x<65535)
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	8f 3f       	cpi	r24, 0xFF	; 255
    192a:	93 07       	cpc	r25, r19
    192c:	d1 f3       	breq	.-12     	; 0x1922 <addition_mood+0x200>
    192e:	9f a3       	lds	r25, 0x5f
    1930:	8e a3       	lds	r24, 0x5e
					 break;
				 }					 
			 }
			 while (1)
			 { 
				 y=rand();
    1932:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
				 if(y<65535)
    1936:	af ef       	ldi	r26, 0xFF	; 255
    1938:	8f 3f       	cpi	r24, 0xFF	; 255
    193a:	9a 07       	cpc	r25, r26
    193c:	d1 f3       	breq	.-12     	; 0x1932 <addition_mood+0x210>
    193e:	99 a7       	lds	r25, 0x79
    1940:	88 a7       	lds	r24, 0x78
			 x=rand()%10000;
			 y=rand()%10000;
			 break;
			 
			 case 4:
			 rang=65535;
    1942:	ef ef       	ldi	r30, 0xFF	; 255
    1944:	ff ef       	ldi	r31, 0xFF	; 255
    1946:	fc a3       	lds	r31, 0x5c
    1948:	eb a3       	lds	r30, 0x5b
    194a:	08 c0       	rjmp	.+16     	; 0x195c <addition_mood+0x23a>
    194c:	ff a2       	lds	r31, 0x9f
    194e:	ee a2       	lds	r30, 0x9e
    1950:	99 a7       	lds	r25, 0x79
    1952:	88 a7       	lds	r24, 0x78
		  write_the_score(score);
		
		 switch (difficalty_mood)
		 {
			 case 0:
			 rang=10;
    1954:	2a e0       	ldi	r18, 0x0A	; 10
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3c a3       	lds	r19, 0x5c
    195a:	2b a3       	lds	r18, 0x5b
					 break;
				 } 
			 }	
			 break;
		 }
		 LCD_Send_Cmd(RETURN_HOME);
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_ON);
    1962:	8e e0       	ldi	r24, 0x0E	; 14
    1964:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_send_short_number(x);
    1968:	8e a1       	lds	r24, 0x4e
    196a:	9f a1       	lds	r25, 0x4f
    196c:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_send_short_number>
		 LCD_Send_Char('+');
    1970:	8b e2       	ldi	r24, 0x2B	; 43
    1972:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		 LCD_send_short_number(y);
    1976:	88 a5       	lds	r24, 0x68
    1978:	99 a5       	lds	r25, 0x69
    197a:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_send_short_number>
		 LCD_Send_Char('=');
    197e:	8d e3       	ldi	r24, 0x3D	; 61
    1980:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		 if((x+y)<10)
    1984:	28 a5       	lds	r18, 0x68
    1986:	39 a5       	lds	r19, 0x69
    1988:	8e a1       	lds	r24, 0x4e
    198a:	9f a1       	lds	r25, 0x4f
    198c:	28 0f       	add	r18, r24
    198e:	39 1f       	adc	r19, r25
    1990:	2a 30       	cpi	r18, 0x0A	; 10
    1992:	31 05       	cpc	r19, r1
    1994:	60 f4       	brcc	.+24     	; 0x19ae <addition_mood+0x28c>
		 {
		     answer[0]=(x+y);
    1996:	88 a5       	lds	r24, 0x68
    1998:	9e a1       	lds	r25, 0x4e
    199a:	89 0f       	add	r24, r25
    199c:	89 83       	std	Y+1, r24	; 0x01
			 answer[1]=0XFF;
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=0XFF;
    19a2:	8b 83       	std	Y+3, r24	; 0x03
			 answer[3]=0XFF;
    19a4:	8c 83       	std	Y+4, r24	; 0x04
			 answer[4]=0XFF;
    19a6:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
    19a8:	8e 83       	std	Y+6, r24	; 0x06
			answer[3]=((x+y)/100%10);
			answer[4]=((x+y)/10%10);
			answer[5]=((x+y)%10);
		 }
		 
		 take_action=0;
    19aa:	1a a2       	lds	r17, 0x9a
    19ac:	10 c0       	rjmp	.+32     	; 0x19ce <addition_mood+0x2ac>
			 answer[2]=0XFF;
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
		 }
		 else if ((x+y)<100)
    19ae:	24 36       	cpi	r18, 0x64	; 100
    19b0:	31 05       	cpc	r19, r1
    19b2:	b8 f4       	brcc	.+46     	; 0x19e2 <addition_mood+0x2c0>
		 {
			 answer[0]=((x+y)/10);
    19b4:	c9 01       	movw	r24, r18
    19b6:	6a e0       	ldi	r22, 0x0A	; 10
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    19be:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x+y)%10);
    19c0:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=0XFF;
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	8b 83       	std	Y+3, r24	; 0x03
			 answer[3]=0XFF;
    19c6:	8c 83       	std	Y+4, r24	; 0x04
			 answer[4]=0XFF;
    19c8:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
    19ca:	8e 83       	std	Y+6, r24	; 0x06
			answer[3]=((x+y)/100%10);
			answer[4]=((x+y)/10%10);
			answer[5]=((x+y)%10);
		 }
		 
		 take_action=0;
    19cc:	1a a2       	lds	r17, 0x9a
    19ce:	00 e0       	ldi	r16, 0x00	; 0
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
		position++;
		if (position>=6)
		{
			position=5;
    19d0:	0f 2e       	mov	r0, r31
    19d2:	f5 e0       	ldi	r31, 0x05	; 5
    19d4:	af 2e       	mov	r10, r31
    19d6:	f0 2d       	mov	r31, r0
		
		while (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
    19d8:	bb 24       	eor	r11, r11
    19da:	b3 94       	inc	r11
	{
		correct=0;
    19dc:	ee 24       	eor	r14, r14
		for (int i=0;i<6;i++)
		{
			if (answer[i]!=user_answer[i])
			{
				correct=1;//you can increase it every wrong in the debug process
    19de:	fb 2c       	mov	r15, r11
    19e0:	6e c0       	rjmp	.+220    	; 0x1abe <addition_mood+0x39c>
			 answer[2]=0XFF;
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
		 }
		 else if ((x+y)<1000)
    19e2:	a3 e0       	ldi	r26, 0x03	; 3
    19e4:	28 3e       	cpi	r18, 0xE8	; 232
    19e6:	3a 07       	cpc	r19, r26
    19e8:	c8 f4       	brcc	.+50     	; 0x1a1c <addition_mood+0x2fa>
		 {
			 answer[0]=((x+y)/100);
    19ea:	c9 01       	movw	r24, r18
    19ec:	64 e6       	ldi	r22, 0x64	; 100
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    19f4:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x+y)/10%10);
    19f6:	ea e0       	ldi	r30, 0x0A	; 10
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	c9 01       	movw	r24, r18
    19fc:	bf 01       	movw	r22, r30
    19fe:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a02:	28 2f       	mov	r18, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bf 01       	movw	r22, r30
    1a08:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=((x+y)%10);
    1a0e:	2b 83       	std	Y+3, r18	; 0x03
			 answer[3]=0XFF;
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	8c 83       	std	Y+4, r24	; 0x04
			 answer[4]=0XFF;
    1a14:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
    1a16:	8e 83       	std	Y+6, r24	; 0x06
			answer[3]=((x+y)/100%10);
			answer[4]=((x+y)/10%10);
			answer[5]=((x+y)%10);
		 }
		 
		 take_action=0;
    1a18:	1a a2       	lds	r17, 0x9a
    1a1a:	d9 cf       	rjmp	.-78     	; 0x19ce <addition_mood+0x2ac>
			 answer[3]=0XFF;
			 answer[4]=0XFF;
			 answer[5]=0XFF;
			 
	     }
		 else if ((x+y)<10000)
    1a1c:	b7 e2       	ldi	r27, 0x27	; 39
    1a1e:	20 31       	cpi	r18, 0x10	; 16
    1a20:	3b 07       	cpc	r19, r27
    1a22:	10 f5       	brcc	.+68     	; 0x1a68 <addition_mood+0x346>
		 {
			 answer[0]=((x+y)/1000);
    1a24:	c9 01       	movw	r24, r18
    1a26:	68 ee       	ldi	r22, 0xE8	; 232
    1a28:	73 e0       	ldi	r23, 0x03	; 3
    1a2a:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a2e:	69 83       	std	Y+1, r22	; 0x01
			 answer[1]=((x+y)/100%10);
    1a30:	c9 01       	movw	r24, r18
    1a32:	64 e6       	ldi	r22, 0x64	; 100
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	ea e0       	ldi	r30, 0x0A	; 10
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	bf 01       	movw	r22, r30
    1a42:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a46:	8a 83       	std	Y+2, r24	; 0x02
			 answer[2]=((x+y)/10%10);
    1a48:	c9 01       	movw	r24, r18
    1a4a:	bf 01       	movw	r22, r30
    1a4c:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a50:	28 2f       	mov	r18, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bf 01       	movw	r22, r30
    1a56:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
			 answer[3]=((x+y)%10);
    1a5c:	2c 83       	std	Y+4, r18	; 0x04
			 answer[4]=0XFF;
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	8d 83       	std	Y+5, r24	; 0x05
			 answer[5]=0XFF;
    1a62:	8e 83       	std	Y+6, r24	; 0x06
			answer[3]=((x+y)/100%10);
			answer[4]=((x+y)/10%10);
			answer[5]=((x+y)%10);
		 }
		 
		 take_action=0;
    1a64:	1a a2       	lds	r17, 0x9a
    1a66:	b3 cf       	rjmp	.-154    	; 0x19ce <addition_mood+0x2ac>
			 answer[4]=0XFF;
			 answer[5]=0XFF;
	     }
		 else if ((x+y)<100000)
		 {
		   answer[0]=((x+y)/10000);
    1a68:	c9 01       	movw	r24, r18
    1a6a:	60 e1       	ldi	r22, 0x10	; 16
    1a6c:	77 e2       	ldi	r23, 0x27	; 39
    1a6e:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a72:	69 83       	std	Y+1, r22	; 0x01
		   answer[1]=((x+y)/1000%10);
    1a74:	c9 01       	movw	r24, r18
    1a76:	68 ee       	ldi	r22, 0xE8	; 232
    1a78:	73 e0       	ldi	r23, 0x03	; 3
    1a7a:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a7e:	cb 01       	movw	r24, r22
    1a80:	ea e0       	ldi	r30, 0x0A	; 10
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	bf 01       	movw	r22, r30
    1a86:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
		   answer[2]=((x+y)/100%10);
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	64 e6       	ldi	r22, 0x64	; 100
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a96:	cb 01       	movw	r24, r22
    1a98:	bf 01       	movw	r22, r30
    1a9a:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
		   answer[3]=((x+y)/10%10);
    1aa0:	c9 01       	movw	r24, r18
    1aa2:	bf 01       	movw	r22, r30
    1aa4:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bf 01       	movw	r22, r30
    1aae:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    1ab2:	8c 83       	std	Y+4, r24	; 0x04
		   answer[4]=((x+y)%10);
    1ab4:	2d 83       	std	Y+5, r18	; 0x05
		   answer[5]=0XFF;
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	8e 83       	std	Y+6, r24	; 0x06
			answer[3]=((x+y)/100%10);
			answer[4]=((x+y)/10%10);
			answer[5]=((x+y)%10);
		 }
		 
		 take_action=0;
    1aba:	1a a2       	lds	r17, 0x9a
    1abc:	88 cf       	rjmp	.-240    	; 0x19ce <addition_mood+0x2ac>
	

   while(1)
   {
	   
	keypad=Keypad_u8check_press();
    1abe:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <Keypad_u8check_press>
    1ac2:	18 2f       	mov	r17, r24
	if (keypad!=0xFF)
    1ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac6:	39 f1       	breq	.+78     	; 0x1b16 <addition_mood+0x3f4>
	{
		LCD_Send_Char(keypad);
    1ac8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
    1acc:	80 2f       	mov	r24, r16
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	f4 01       	movw	r30, r8
    1ada:	e8 0f       	add	r30, r24
    1adc:	f9 1f       	adc	r31, r25
    1ade:	81 2f       	mov	r24, r17
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	c0 97       	sbiw	r24, 0x30	; 48
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	97 fd       	sbrc	r25, 7
    1ae8:	a0 95       	com	r26
    1aea:	ba 2f       	mov	r27, r26
    1aec:	86 83       	std	Z+6, r24	; 0x06
    1aee:	97 83       	std	Z+7, r25	; 0x07
    1af0:	a0 87       	std	Z+8, r26	; 0x08
    1af2:	b1 87       	std	Z+9, r27	; 0x09
		position++;
    1af4:	0f 5f       	subi	r16, 0xFF	; 255
		if (position>=6)
    1af6:	06 30       	cpi	r16, 0x06	; 6
    1af8:	20 f0       	brcs	.+8      	; 0x1b02 <addition_mood+0x3e0>
		{
			position=5;
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
    1afa:	80 e1       	ldi	r24, 0x10	; 16
    1afc:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		LCD_Send_Char(keypad);
		user_answer[position]=keypad-48;//this because keypad returns the asci code not the real number
		position++;
		if (position>=6)
		{
			position=5;
    1b00:	0a 2d       	mov	r16, r10
    1b02:	8f e7       	ldi	r24, 0x7F	; 127
    1b04:	9a e1       	ldi	r25, 0x1A	; 26
    1b06:	a6 e0       	ldi	r26, 0x06	; 6
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	90 40       	sbci	r25, 0x00	; 0
    1b0c:	a0 40       	sbci	r26, 0x00	; 0
    1b0e:	e1 f7       	brne	.-8      	; 0x1b08 <addition_mood+0x3e6>
    1b10:	00 c0       	rjmp	.+0      	; 0x1b12 <addition_mood+0x3f0>
    1b12:	00 00       	nop
    1b14:	d4 cf       	rjmp	.-88     	; 0x1abe <addition_mood+0x39c>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
		}
		_delay_ms(250);
		
	}
	else if (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1)
    1b16:	84 e4       	ldi	r24, 0x44	; 68
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	11 f5       	brne	.+68     	; 0x1b66 <addition_mood+0x444>
	{
		if(position>0)
    1b22:	00 23       	and	r16, r16
    1b24:	c9 f0       	breq	.+50     	; 0x1b58 <addition_mood+0x436>
		{
			user_answer[position]=0XFF;
    1b26:	80 2f       	mov	r24, r16
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	88 0d       	add	r24, r8
    1b34:	99 1d       	adc	r25, r9
    1b36:	dc 01       	movw	r26, r24
    1b38:	16 96       	adiw	r26, 0x06	; 6
    1b3a:	2d 92       	st	X+, r2
    1b3c:	3d 92       	st	X+, r3
    1b3e:	4d 92       	st	X+, r4
    1b40:	5c 92       	st	X, r5
    1b42:	19 97       	sbiw	r26, 0x09	; 9
			LCD_Send_Char(' ');
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
    1b4a:	80 e1       	ldi	r24, 0x10	; 16
    1b4c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			LCD_Send_Cmd(SHIFT_CURSOR_LEFT);
    1b50:	80 e1       	ldi	r24, 0x10	; 16
    1b52:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			position--;
    1b56:	01 50       	subi	r16, 0x01	; 1
		}
		
		while (Button_u8read(OUTPUT_PORT,LEFT_BUTTON)==1);
    1b58:	84 e4       	ldi	r24, 0x44	; 68
    1b5a:	62 e0       	ldi	r22, 0x02	; 2
    1b5c:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	d1 f3       	breq	.-12     	; 0x1b58 <addition_mood+0x436>
    1b64:	ac cf       	rjmp	.-168    	; 0x1abe <addition_mood+0x39c>
	}
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
    1b66:	84 e4       	ldi	r24, 0x44	; 68
    1b68:	6b 2d       	mov	r22, r11
    1b6a:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	39 f0       	breq	.+14     	; 0x1b80 <addition_mood+0x45e>
    1b72:	84 e4       	ldi	r24, 0x44	; 68
    1b74:	6e 2d       	mov	r22, r14
    1b76:	0e 94 4f 12 	call	0x249e	; 0x249e <Button_u8read>
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <addition_mood+0x45e>
    1b7e:	9f cf       	rjmp	.-194    	; 0x1abe <addition_mood+0x39c>
    1b80:	e7 2d       	mov	r30, r7
    1b82:	f6 2d       	mov	r31, r6
    1b84:	96 01       	movw	r18, r12
	{
		correct=0;
    1b86:	1e 2d       	mov	r17, r14
		for (int i=0;i<6;i++)
		{
			if (answer[i]!=user_answer[i])
    1b88:	81 91       	ld	r24, Z+
    1b8a:	d9 01       	movw	r26, r18
    1b8c:	4d 91       	ld	r20, X+
    1b8e:	5d 91       	ld	r21, X+
    1b90:	6d 91       	ld	r22, X+
    1b92:	7d 91       	ld	r23, X+
    1b94:	9d 01       	movw	r18, r26
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	84 17       	cp	r24, r20
    1b9e:	95 07       	cpc	r25, r21
    1ba0:	a6 07       	cpc	r26, r22
    1ba2:	b7 07       	cpc	r27, r23
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <addition_mood+0x486>
			{
				correct=1;//you can increase it every wrong in the debug process
    1ba6:	1f 2d       	mov	r17, r15
	
	
	else if (Button_u8read(OUTPUT_PORT,OK_BUTTON)==1||Button_u8read(OUTPUT_PORT,RIGHT_BUTTON)==1)
	{
		correct=0;
		for (int i=0;i<6;i++)
    1ba8:	ec 15       	cp	r30, r12
    1baa:	fd 05       	cpc	r31, r13
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <addition_mood+0x466>
			if (answer[i]!=user_answer[i])
			{
				correct=1;//you can increase it every wrong in the debug process
			}
		}
	 if (correct==0)
    1bae:	11 23       	and	r17, r17
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <addition_mood+0x492>
    1bb2:	58 c0       	rjmp	.+176    	; 0x1c64 <addition_mood+0x542>
	 {
		 if (simple_random_var>0)
    1bb4:	80 91 31 01 	lds	r24, 0x0131
    1bb8:	88 23       	and	r24, r24
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <addition_mood+0x4a6>
		 {
			 simple_random_correct_answer=1;
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	90 93 af 00 	sts	0x00AF, r25
			 simple_random_var++;
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	80 93 31 01 	sts	0x0131, r24
		 }
		LCD_Clear_Screen();
    1bc8:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		LCD_Move_cursor(1,3);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	63 e0       	ldi	r22, 0x03	; 3
    1bd0:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		LCD_String("right answer");
    1bd4:	82 ed       	ldi	r24, 0xD2	; 210
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		LCD_Move_cursor(2,1) ;
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	61 e0       	ldi	r22, 0x01	; 1
    1be0:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		LCD_String("score=");
    1be4:	8c e0       	ldi	r24, 0x0C	; 12
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
		if (simple_random_var>1)
    1bec:	80 91 31 01 	lds	r24, 0x0131
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	58 f0       	brcs	.+22     	; 0x1c0a <addition_mood+0x4e8>
		{
			simple_random_score++;
    1bf4:	80 91 2e 01 	lds	r24, 0x012E
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	80 93 2e 01 	sts	0x012E, r24
			LCD_send_char_number(simple_random_score);
    1bfe:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
			score=simple_random_score;
    1c02:	b0 91 2e 01 	lds	r27, 0x012E
    1c06:	b9 a3       	lds	r27, 0x59
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <addition_mood+0x4f4>
		}
		else
		{
			score++;
    1c0a:	e9 a1       	lds	r30, 0x49
    1c0c:	ef 5f       	subi	r30, 0xFF	; 255
    1c0e:	e9 a3       	lds	r30, 0x59
			LCD_send_char_number(score);
    1c10:	8e 2f       	mov	r24, r30
    1c12:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
		}
		
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    1c16:	8c e0       	ldi	r24, 0x0C	; 12
    1c18:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	9d e3       	ldi	r25, 0x3D	; 61
    1c20:	a9 e4       	ldi	r26, 0x49	; 73
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	90 40       	sbci	r25, 0x00	; 0
    1c26:	a0 40       	sbci	r26, 0x00	; 0
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <addition_mood+0x500>
    1c2a:	00 c0       	rjmp	.+0      	; 0x1c2c <addition_mood+0x50a>
    1c2c:	00 00       	nop
		_delay_ms(3000);
		take_action=1;
		 for(char i=0;i<6;i++)
		 {
			user_answer[i]=0XFF;
    1c2e:	2f 82       	std	Y+7, r2	; 0x07
    1c30:	38 86       	std	Y+8, r3	; 0x08
    1c32:	49 86       	std	Y+9, r4	; 0x09
    1c34:	5a 86       	std	Y+10, r5	; 0x0a
    1c36:	2b 86       	std	Y+11, r2	; 0x0b
    1c38:	3c 86       	std	Y+12, r3	; 0x0c
    1c3a:	4d 86       	std	Y+13, r4	; 0x0d
    1c3c:	5e 86       	std	Y+14, r5	; 0x0e
    1c3e:	2f 86       	std	Y+15, r2	; 0x0f
    1c40:	38 8a       	std	Y+16, r3	; 0x10
    1c42:	49 8a       	std	Y+17, r4	; 0x11
    1c44:	5a 8a       	std	Y+18, r5	; 0x12
    1c46:	2b 8a       	std	Y+19, r2	; 0x13
    1c48:	3c 8a       	std	Y+20, r3	; 0x14
    1c4a:	4d 8a       	std	Y+21, r4	; 0x15
    1c4c:	5e 8a       	std	Y+22, r5	; 0x16
    1c4e:	2f 8a       	std	Y+23, r2	; 0x17
    1c50:	38 8e       	std	Y+24, r3	; 0x18
    1c52:	49 8e       	std	Y+25, r4	; 0x19
    1c54:	5a 8e       	std	Y+26, r5	; 0x1a
    1c56:	2b 8e       	std	Y+27, r2	; 0x1b
    1c58:	3c 8e       	std	Y+28, r3	; 0x1c
    1c5a:	4d 8e       	std	Y+29, r4	; 0x1d
    1c5c:	5e 8e       	std	Y+30, r5	; 0x1e
			LCD_send_char_number(score);
		}
		
		LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
		_delay_ms(3000);
		take_action=1;
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	9a a3       	lds	r25, 0x5a
    1c62:	b9 cd       	rjmp	.-1166   	; 0x17d6 <addition_mood+0xb4>
		 {
			user_answer[i]=0XFF;
		 }
		break;
	 }
	 else if (correct==1)
    1c64:	11 30       	cpi	r17, 0x01	; 1
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <addition_mood+0x548>
    1c68:	2a cf       	rjmp	.-428    	; 0x1abe <addition_mood+0x39c>
	 {
		 if (simple_random_var>0)
    1c6a:	80 91 31 01 	lds	r24, 0x0131
    1c6e:	88 23       	and	r24, r24
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <addition_mood+0x55a>
		 {
			 simple_random_correct_answer=0;
    1c72:	10 92 af 00 	sts	0x00AF, r1
			 simple_random_var++;
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	80 93 31 01 	sts	0x0131, r24
		 }
		 correct=0;
		 right_answer=0;
		 LCD_Clear_Screen();
    1c7c:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    1c80:	8c e0       	ldi	r24, 0x0C	; 12
    1c82:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 LCD_Move_cursor(1,3);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
		 LCD_String("wrong answer");
    1c8e:	87 ee       	ldi	r24, 0xE7	; 231
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	93 ed       	ldi	r25, 0xD3	; 211
    1c9a:	a0 e3       	ldi	r26, 0x30	; 48
    1c9c:	81 50       	subi	r24, 0x01	; 1
    1c9e:	90 40       	sbci	r25, 0x00	; 0
    1ca0:	a0 40       	sbci	r26, 0x00	; 0
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <addition_mood+0x57a>
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <addition_mood+0x584>
    1ca6:	00 00       	nop
		 _delay_ms(2000);
		 LCD_Clear_Screen();
    1ca8:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
		 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
		 if (simple_random_var>0)
    1cb2:	80 91 31 01 	lds	r24, 0x0131
    1cb6:	88 23       	and	r24, r24
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <addition_mood+0x59e>
		 {
			 score=simple_random_score;
    1cba:	90 91 2e 01 	lds	r25, 0x012E
    1cbe:	99 a3       	lds	r25, 0x59
		 }

		 switch (rang)
    1cc0:	ab a1       	lds	r26, 0x4b
    1cc2:	bc a1       	lds	r27, 0x4c
    1cc4:	a4 36       	cpi	r26, 0x64	; 100
    1cc6:	b1 05       	cpc	r27, r1
    1cc8:	01 f1       	breq	.+64     	; 0x1d0a <addition_mood+0x5e8>
    1cca:	a5 36       	cpi	r26, 0x65	; 101
    1ccc:	b1 05       	cpc	r27, r1
    1cce:	28 f4       	brcc	.+10     	; 0x1cda <addition_mood+0x5b8>
    1cd0:	aa 30       	cpi	r26, 0x0A	; 10
    1cd2:	b1 05       	cpc	r27, r1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <addition_mood+0x5b6>
    1cd6:	43 c0       	rjmp	.+134    	; 0x1d5e <addition_mood+0x63c>
    1cd8:	0b c0       	rjmp	.+22     	; 0x1cf0 <addition_mood+0x5ce>
    1cda:	eb a1       	lds	r30, 0x4b
    1cdc:	fc a1       	lds	r31, 0x4c
    1cde:	23 e0       	ldi	r18, 0x03	; 3
    1ce0:	e8 3e       	cpi	r30, 0xE8	; 232
    1ce2:	f2 07       	cpc	r31, r18
    1ce4:	01 f1       	breq	.+64     	; 0x1d26 <addition_mood+0x604>
    1ce6:	37 e2       	ldi	r19, 0x27	; 39
    1ce8:	e0 31       	cpi	r30, 0x10	; 16
    1cea:	f3 07       	cpc	r31, r19
    1cec:	c1 f5       	brne	.+112    	; 0x1d5e <addition_mood+0x63c>
    1cee:	29 c0       	rjmp	.+82     	; 0x1d42 <addition_mood+0x620>
		 {
			case 10 :
			if (score>EEPROM_u8Read(BEST_VERY_EASY_SCORE_LOCATION))
    1cf0:	81 e3       	ldi	r24, 0x31	; 49
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    1cf8:	99 a1       	lds	r25, 0x49
    1cfa:	89 17       	cp	r24, r25
    1cfc:	b8 f5       	brcc	.+110    	; 0x1d6c <addition_mood+0x64a>
			{
				
				EEPROM_Write(BEST_VERY_EASY_SCORE_LOCATION,score);	
    1cfe:	81 e3       	ldi	r24, 0x31	; 49
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	69 a1       	lds	r22, 0x49
    1d04:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
    1d08:	31 c0       	rjmp	.+98     	; 0x1d6c <addition_mood+0x64a>
			}
			correct=1;				 
			break; 
			
			case 100 :
			if (score>EEPROM_u8Read(BEST_EASY_SCORE_LOCATION))
    1d0a:	82 e3       	ldi	r24, 0x32	; 50
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    1d12:	a9 a1       	lds	r26, 0x49
    1d14:	8a 17       	cp	r24, r26
    1d16:	28 f5       	brcc	.+74     	; 0x1d62 <addition_mood+0x640>
			{
				EEPROM_Write(BEST_EASY_SCORE_LOCATION,score);
    1d18:	82 e3       	ldi	r24, 0x32	; 50
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	6a 2f       	mov	r22, r26
    1d1e:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
				
			}
			correct=2;
    1d22:	12 e0       	ldi	r17, 0x02	; 2
    1d24:	23 c0       	rjmp	.+70     	; 0x1d6c <addition_mood+0x64a>
			break;
			
			case 1000 :
			if (score>EEPROM_u8Read(BEST_MEDIUM_SCORE_LOCATION))
    1d26:	83 e3       	ldi	r24, 0x33	; 51
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    1d2e:	b9 a1       	lds	r27, 0x49
    1d30:	8b 17       	cp	r24, r27
    1d32:	c8 f4       	brcc	.+50     	; 0x1d66 <addition_mood+0x644>
			{
				EEPROM_Write(BEST_MEDIUM_SCORE_LOCATION,score);
    1d34:	83 e3       	ldi	r24, 0x33	; 51
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	6b 2f       	mov	r22, r27
    1d3a:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
				
			}
			correct=3;
    1d3e:	13 e0       	ldi	r17, 0x03	; 3
    1d40:	15 c0       	rjmp	.+42     	; 0x1d6c <addition_mood+0x64a>
			break;
			
			case 10000 :
			if (score>EEPROM_u8Read(BEST_HARD_SCORE_LOCATION))
    1d42:	84 e3       	ldi	r24, 0x34	; 52
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    1d4a:	e9 a1       	lds	r30, 0x49
    1d4c:	8e 17       	cp	r24, r30
    1d4e:	68 f4       	brcc	.+26     	; 0x1d6a <addition_mood+0x648>
			{
				EEPROM_Write(BEST_HARD_SCORE_LOCATION,score);
    1d50:	84 e3       	ldi	r24, 0x34	; 52
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	6e 2f       	mov	r22, r30
    1d56:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Write>
				
			}
			  correct=4;
    1d5a:	14 e0       	ldi	r17, 0x04	; 4
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <addition_mood+0x64a>
		 if (simple_random_var>0)
		 {
			 simple_random_correct_answer=0;
			 simple_random_var++;
		 }
		 correct=0;
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <addition_mood+0x64a>
			if (score>EEPROM_u8Read(BEST_EASY_SCORE_LOCATION))
			{
				EEPROM_Write(BEST_EASY_SCORE_LOCATION,score);
				
			}
			correct=2;
    1d62:	12 e0       	ldi	r17, 0x02	; 2
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <addition_mood+0x64a>
			if (score>EEPROM_u8Read(BEST_MEDIUM_SCORE_LOCATION))
			{
				EEPROM_Write(BEST_MEDIUM_SCORE_LOCATION,score);
				
			}
			correct=3;
    1d66:	13 e0       	ldi	r17, 0x03	; 3
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <addition_mood+0x64a>
			if (score>EEPROM_u8Read(BEST_HARD_SCORE_LOCATION))
			{
				EEPROM_Write(BEST_HARD_SCORE_LOCATION,score);
				
			}
			  correct=4;
    1d6a:	14 e0       	ldi	r17, 0x04	; 4
				
			}*/
			correct=5;
			break; 
		 }
			 LCD_Clear_Screen();
    1d6c:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_Clear_Screen>
			 LCD_Send_Cmd(DISPLAY_ON_CURSOR_OFF);
    1d70:	8c e0       	ldi	r24, 0x0C	; 12
    1d72:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
			 LCD_String("your score=");
    1d76:	84 ef       	ldi	r24, 0xF4	; 244
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 LCD_send_char_number(score);
    1d7e:	89 a1       	lds	r24, 0x49
    1d80:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
			 LCD_Move_cursor(2,1);
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
			 LCD_String("high score=");
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
			 LCD_send_char_number(EEPROM_u8Read(THE_NON_USED_LOCATION+correct));
    1d94:	81 2f       	mov	r24, r17
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	c0 96       	adiw	r24, 0x30	; 48
    1d9a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <EEPROM_u8Read>
    1d9e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_send_char_number>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	9d e3       	ldi	r25, 0x3D	; 61
    1da6:	a9 e4       	ldi	r26, 0x49	; 73
    1da8:	81 50       	subi	r24, 0x01	; 1
    1daa:	90 40       	sbci	r25, 0x00	; 0
    1dac:	a0 40       	sbci	r26, 0x00	; 0
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <addition_mood+0x686>
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <addition_mood+0x690>
    1db2:	00 00       	nop
		 {
			 simple_random_correct_answer=0;
			 simple_random_var++;
		 }
		 correct=0;
		 right_answer=0;
    1db4:	1d a2       	lds	r17, 0x9d
    1db6:	0f cd       	rjmp	.-1506   	; 0x17d6 <addition_mood+0xb4>
	}
	}	 
	
}
	
}
    1db8:	aa 96       	adiw	r28, 0x2a	; 42
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	0f 91       	pop	r16
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
    1dd4:	bf 90       	pop	r11
    1dd6:	af 90       	pop	r10
    1dd8:	9f 90       	pop	r9
    1dda:	8f 90       	pop	r8
    1ddc:	7f 90       	pop	r7
    1dde:	6f 90       	pop	r6
    1de0:	5f 90       	pop	r5
    1de2:	4f 90       	pop	r4
    1de4:	3f 90       	pop	r3
    1de6:	2f 90       	pop	r2
    1de8:	08 95       	ret

00001dea <DEBUG>:



void DEBUG()
{
	LCD_Move_cursor(2,8);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	68 e0       	ldi	r22, 0x08	; 8
    1dee:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	LCD_String("DEBUG");
    1df2:	83 e1       	ldi	r24, 0x13	; 19
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	0e 94 00 11 	call	0x2200	; 0x2200 <LCD_String>
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	93 ed       	ldi	r25, 0xD3	; 211
    1dfe:	a0 e3       	ldi	r26, 0x30	; 48
    1e00:	81 50       	subi	r24, 0x01	; 1
    1e02:	90 40       	sbci	r25, 0x00	; 0
    1e04:	a0 40       	sbci	r26, 0x00	; 0
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <DEBUG+0x16>
    1e08:	00 c0       	rjmp	.+0      	; 0x1e0a <DEBUG+0x20>
    1e0a:	00 00       	nop
	_delay_ms(2000);
    1e0c:	08 95       	ret

00001e0e <Keypad_init>:
 *  Author: john
 */
#include "KEY_PAD_DRIVER.h"
void Keypad_init()
{
	DIO_SetPinDir(PORT_NAME,0,1);
    1e0e:	82 e4       	ldi	r24, 0x42	; 66
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,1,1);
    1e18:	82 e4       	ldi	r24, 0x42	; 66
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,2,1);
    1e22:	82 e4       	ldi	r24, 0x42	; 66
    1e24:	62 e0       	ldi	r22, 0x02	; 2
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,3,1);
    1e2c:	82 e4       	ldi	r24, 0x42	; 66
    1e2e:	63 e0       	ldi	r22, 0x03	; 3
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,4,0);
    1e36:	82 e4       	ldi	r24, 0x42	; 66
    1e38:	64 e0       	ldi	r22, 0x04	; 4
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,5,0);
    1e40:	82 e4       	ldi	r24, 0x42	; 66
    1e42:	65 e0       	ldi	r22, 0x05	; 5
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,6,0);
    1e4a:	82 e4       	ldi	r24, 0x42	; 66
    1e4c:	66 e0       	ldi	r22, 0x06	; 6
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_SetPinDir(PORT_NAME,7,0);
    1e54:	82 e4       	ldi	r24, 0x42	; 66
    1e56:	67 e0       	ldi	r22, 0x07	; 7
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	DIO_enable_pull_up(PORT_NAME,4,1);
    1e5e:	82 e4       	ldi	r24, 0x42	; 66
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 c4 03 	call	0x788	; 0x788 <DIO_enable_pull_up>
	DIO_enable_pull_up(PORT_NAME,5,1);
    1e68:	82 e4       	ldi	r24, 0x42	; 66
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 c4 03 	call	0x788	; 0x788 <DIO_enable_pull_up>
	DIO_enable_pull_up(PORT_NAME,6,1);
    1e72:	82 e4       	ldi	r24, 0x42	; 66
    1e74:	66 e0       	ldi	r22, 0x06	; 6
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 c4 03 	call	0x788	; 0x788 <DIO_enable_pull_up>
	DIO_enable_pull_up(PORT_NAME,7,1);
    1e7c:	82 e4       	ldi	r24, 0x42	; 66
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 c4 03 	call	0x788	; 0x788 <DIO_enable_pull_up>
}
    1e86:	08 95       	ret

00001e88 <Keypad_u8check_press>:


char Keypad_u8check_press()
{
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	60 97       	sbiw	r28, 0x10	; 16
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
	#if defined PROTEUS_KEYPAD
  unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    1ea0:	de 01       	movw	r26, r28
    1ea2:	11 96       	adiw	r26, 0x01	; 1
    1ea4:	e9 e1       	ldi	r30, 0x19	; 25
    1ea6:	f1 e0       	ldi	r31, 0x01	; 1
    1ea8:	80 e1       	ldi	r24, 0x10	; 16
    1eaa:	01 90       	ld	r0, Z+
    1eac:	0d 92       	st	X+, r0
    1eae:	81 50       	subi	r24, 0x01	; 1
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <Keypad_u8check_press+0x22>
	#elif defined REAL_KEYPAD
   unsigned char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
	#endif
  unsigned char return_val=0xff;
  char x=1;
  for (unsigned char row=0;row<4;row++)
    1eb2:	00 e0       	ldi	r16, 0x00	; 0
  {
	  DIO_Write(PORT_NAME,0,1);
    1eb4:	82 e4       	ldi	r24, 0x42	; 66
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
	  DIO_Write(PORT_NAME,1,1);
    1ebe:	82 e4       	ldi	r24, 0x42	; 66
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	41 e0       	ldi	r20, 0x01	; 1
    1ec4:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
	  DIO_Write(PORT_NAME,2,1);
    1ec8:	82 e4       	ldi	r24, 0x42	; 66
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
	  DIO_Write(PORT_NAME,3,1);
    1ed2:	82 e4       	ldi	r24, 0x42	; 66
    1ed4:	63 e0       	ldi	r22, 0x03	; 3
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
	  DIO_Write(PORT_NAME,row,0);
    1edc:	82 e4       	ldi	r24, 0x42	; 66
    1ede:	60 2f       	mov	r22, r16
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
	  for (unsigned char column=0;column<4;column++)
    1ee6:	10 e0       	ldi	r17, 0x00	; 0
	  {
		  x=DIO_u8read(PORT_NAME,column+4);
    1ee8:	61 2f       	mov	r22, r17
    1eea:	6c 5f       	subi	r22, 0xFC	; 252
    1eec:	82 e4       	ldi	r24, 0x42	; 66
    1eee:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_u8read>
		  if(x==0)
    1ef2:	88 23       	and	r24, r24
    1ef4:	61 f4       	brne	.+24     	; 0x1f0e <Keypad_u8check_press+0x86>
		  {
			return_val=arr[row][column];  
    1ef6:	e0 2f       	mov	r30, r16
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	e1 0f       	add	r30, r17
    1f04:	f1 1d       	adc	r31, r1
    1f06:	ec 0f       	add	r30, r28
    1f08:	fd 1f       	adc	r31, r29
    1f0a:	81 81       	ldd	r24, Z+1	; 0x01
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <Keypad_u8check_press+0x8e>
	  DIO_Write(PORT_NAME,0,1);
	  DIO_Write(PORT_NAME,1,1);
	  DIO_Write(PORT_NAME,2,1);
	  DIO_Write(PORT_NAME,3,1);
	  DIO_Write(PORT_NAME,row,0);
	  for (unsigned char column=0;column<4;column++)
    1f0e:	1f 5f       	subi	r17, 0xFF	; 255
    1f10:	14 30       	cpi	r17, 0x04	; 4
    1f12:	51 f7       	brne	.-44     	; 0x1ee8 <Keypad_u8check_press+0x60>
    1f14:	0b c0       	rjmp	.+22     	; 0x1f2c <Keypad_u8check_press+0xa4>
		  break;
	  } 
  }
	
	  return return_val;
    1f16:	60 96       	adiw	r28, 0x10	; 16
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	08 95       	ret
	#elif defined REAL_KEYPAD
   unsigned char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
	#endif
  unsigned char return_val=0xff;
  char x=1;
  for (unsigned char row=0;row<4;row++)
    1f2c:	0f 5f       	subi	r16, 0xFF	; 255
    1f2e:	04 30       	cpi	r16, 0x04	; 4
    1f30:	09 f6       	brne	.-126    	; 0x1eb4 <Keypad_u8check_press+0x2c>
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	f0 cf       	rjmp	.-32     	; 0x1f16 <Keypad_u8check_press+0x8e>

00001f36 <enable>:



 void enable()
{
	DIO_Write(CONTROL_PORT,EN,1);
    1f36:	83 e4       	ldi	r24, 0x43	; 67
    1f38:	64 e0       	ldi	r22, 0x04	; 4
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
    1f40:	8f e6       	ldi	r24, 0x6F	; 111
    1f42:	97 e1       	ldi	r25, 0x17	; 23
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <enable+0xe>
    1f48:	00 c0       	rjmp	.+0      	; 0x1f4a <enable+0x14>
    1f4a:	00 00       	nop
	_delay_ms(3);
	DIO_Write(CONTROL_PORT,EN,0);
    1f4c:	83 e4       	ldi	r24, 0x43	; 67
    1f4e:	64 e0       	ldi	r22, 0x04	; 4
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
}
    1f56:	08 95       	ret

00001f58 <LCD_Send_Cmd>:




void LCD_Send_Cmd(unsigned char cmd)
{
    1f58:	cf 93       	push	r28
    1f5a:	c8 2f       	mov	r28, r24
		  enable();
		  _delay_ms(1);
		  
	#elif  defined FOUR_BITS_MODE_LOW_NIBBLE
	
		  DIO_Write_low_nibble(DATA_PORT,cmd>>4);
    1f5c:	68 2f       	mov	r22, r24
    1f5e:	62 95       	swap	r22
    1f60:	6f 70       	andi	r22, 0x0F	; 15
    1f62:	83 e4       	ldi	r24, 0x43	; 67
    1f64:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_Write_low_nibble>
		  DIO_Write(CONTROL_PORT,RS,0);
    1f68:	83 e4       	ldi	r24, 0x43	; 67
    1f6a:	65 e0       	ldi	r22, 0x05	; 5
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
		  enable();
    1f72:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <enable>
    1f76:	8f ec       	ldi	r24, 0xCF	; 207
    1f78:	97 e0       	ldi	r25, 0x07	; 7
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_Send_Cmd+0x22>
    1f7e:	00 c0       	rjmp	.+0      	; 0x1f80 <LCD_Send_Cmd+0x28>
    1f80:	00 00       	nop
		  _delay_ms(1);
		  DIO_Write_low_nibble(DATA_PORT,cmd);
    1f82:	83 e4       	ldi	r24, 0x43	; 67
    1f84:	6c 2f       	mov	r22, r28
    1f86:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_Write_low_nibble>
		  enable();
    1f8a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <enable>
    1f8e:	8f ec       	ldi	r24, 0xCF	; 207
    1f90:	97 e0       	ldi	r25, 0x07	; 7
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_Send_Cmd+0x3a>
    1f96:	00 c0       	rjmp	.+0      	; 0x1f98 <LCD_Send_Cmd+0x40>
    1f98:	00 00       	nop
		  _delay_ms(1);
		  
	#endif
	   
}
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <LCD_init>:
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	91 ee       	ldi	r25, 0xE1	; 225
    1fa2:	a4 e0       	ldi	r26, 0x04	; 4
    1fa4:	81 50       	subi	r24, 0x01	; 1
    1fa6:	90 40       	sbci	r25, 0x00	; 0
    1fa8:	a0 40       	sbci	r26, 0x00	; 0
    1faa:	e1 f7       	brne	.-8      	; 0x1fa4 <LCD_init+0x6>
    1fac:	00 c0       	rjmp	.+0      	; 0x1fae <LCD_init+0x10>
    1fae:	00 00       	nop
	LCD_Send_Cmd(ENTRY_MODE);
	_delay_ms(1);
	
	#elif defined FOUR_BITS_MODE_LOW_NIBBLE
	_delay_ms(200);
	 DIO_Set_Port_Direction(DATA_PORT,0X0F);
    1fb0:	83 e4       	ldi	r24, 0x43	; 67
    1fb2:	6f e0       	ldi	r22, 0x0F	; 15
    1fb4:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_Set_Port_Direction>
	 DIO_SetPinDir(CONTROL_PORT,EN,1);
    1fb8:	83 e4       	ldi	r24, 0x43	; 67
    1fba:	64 e0       	ldi	r22, 0x04	; 4
    1fbc:	41 e0       	ldi	r20, 0x01	; 1
    1fbe:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	// DIO_SetPinDir(CONTROL_PORT,RW,1);
	 DIO_SetPinDir(CONTROL_PORT,RS,1);
    1fc2:	83 e4       	ldi	r24, 0x43	; 67
    1fc4:	65 e0       	ldi	r22, 0x05	; 5
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
	 
	 LCD_Send_Cmd(RETURN_HOME);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    1fd2:	af e0       	ldi	r26, 0x0F	; 15
    1fd4:	b7 e2       	ldi	r27, 0x27	; 39
    1fd6:	11 97       	sbiw	r26, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_init+0x38>
    1fda:	00 c0       	rjmp	.+0      	; 0x1fdc <LCD_init+0x3e>
    1fdc:	00 00       	nop
	 _delay_ms(5);
	 LCD_Send_Cmd(FOUR_BITS);
    1fde:	88 e2       	ldi	r24, 0x28	; 40
    1fe0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    1fe4:	8f ec       	ldi	r24, 0xCF	; 207
    1fe6:	97 e0       	ldi	r25, 0x07	; 7
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_init+0x4a>
    1fec:	00 c0       	rjmp	.+0      	; 0x1fee <LCD_init+0x50>
    1fee:	00 00       	nop
	 _delay_ms(1);
	 LCD_Send_Cmd(DISPLAY_ON_CURSOR_ON);
    1ff0:	8e e0       	ldi	r24, 0x0E	; 14
    1ff2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    1ff6:	af ec       	ldi	r26, 0xCF	; 207
    1ff8:	b7 e0       	ldi	r27, 0x07	; 7
    1ffa:	11 97       	sbiw	r26, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_init+0x5c>
    1ffe:	00 c0       	rjmp	.+0      	; 0x2000 <LCD_init+0x62>
    2000:	00 00       	nop
	 _delay_ms(1);
	 LCD_Send_Cmd(CLEAR_SCREEN);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    2008:	8f e0       	ldi	r24, 0x0F	; 15
    200a:	97 e2       	ldi	r25, 0x27	; 39
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_init+0x6e>
    2010:	00 c0       	rjmp	.+0      	; 0x2012 <LCD_init+0x74>
    2012:	00 00       	nop
	 _delay_ms(5);
	 LCD_Send_Cmd(ENTRY_MODE);
    2014:	86 e0       	ldi	r24, 0x06	; 6
    2016:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    201a:	af ec       	ldi	r26, 0xCF	; 207
    201c:	b7 e0       	ldi	r27, 0x07	; 7
    201e:	11 97       	sbiw	r26, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_init+0x80>
    2022:	00 c0       	rjmp	.+0      	; 0x2024 <LCD_init+0x86>
    2024:	00 00       	nop
	 _delay_ms(1);
	 
	#endif
		
	
}
    2026:	08 95       	ret

00002028 <LCD_Send_Char>:
}



void LCD_Send_Char(unsigned char data)
{
    2028:	cf 93       	push	r28
    202a:	c8 2f       	mov	r28, r24
		 enable();
		 DIO_Write_high_nibble(DATA_PORT,data);
		 enable();
		 _delay_ms(1);
	#elif defined FOUR_BITS_MODE_LOW_NIBBLE
	     DIO_Write(CONTROL_PORT,RS,1);
    202c:	83 e4       	ldi	r24, 0x43	; 67
    202e:	65 e0       	ldi	r22, 0x05	; 5
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
		 DIO_Write_low_nibble(DATA_PORT,data>>4);
    2036:	6c 2f       	mov	r22, r28
    2038:	62 95       	swap	r22
    203a:	6f 70       	andi	r22, 0x0F	; 15
    203c:	83 e4       	ldi	r24, 0x43	; 67
    203e:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_Write_low_nibble>
		 enable();
    2042:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <enable>
		 DIO_Write_low_nibble(DATA_PORT,data);
    2046:	83 e4       	ldi	r24, 0x43	; 67
    2048:	6c 2f       	mov	r22, r28
    204a:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_Write_low_nibble>
		 enable();
    204e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <enable>
    2052:	8f ec       	ldi	r24, 0xCF	; 207
    2054:	97 e0       	ldi	r25, 0x07	; 7
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_Send_Char+0x2e>
    205a:	00 c0       	rjmp	.+0      	; 0x205c <LCD_Send_Char+0x34>
    205c:	00 00       	nop
		 _delay_ms(1);
	#endif
	   
}
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <LCD_send_short_number>:

void LCD_send_short_number(unsigned short number)
{
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	ec 01       	movw	r28, r24
	if (number<10)
    206c:	8a 30       	cpi	r24, 0x0A	; 10
    206e:	91 05       	cpc	r25, r1
    2070:	20 f4       	brcc	.+8      	; 0x207a <LCD_send_short_number+0x18>
	{
		LCD_Send_Char(number+48);
    2072:	80 5d       	subi	r24, 0xD0	; 208
    2074:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
    2078:	90 c0       	rjmp	.+288    	; 0x219a <LCD_send_short_number+0x138>
	}
	else if (number<100)
    207a:	84 36       	cpi	r24, 0x64	; 100
    207c:	91 05       	cpc	r25, r1
    207e:	70 f4       	brcc	.+28     	; 0x209c <LCD_send_short_number+0x3a>
	{
		LCD_Send_Char((number/10)+48);
    2080:	6a e0       	ldi	r22, 0x0A	; 10
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    2088:	c8 2f       	mov	r28, r24
    208a:	86 2f       	mov	r24, r22
    208c:	80 5d       	subi	r24, 0xD0	; 208
    208e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number%10)+48);
    2092:	8c 2f       	mov	r24, r28
    2094:	80 5d       	subi	r24, 0xD0	; 208
    2096:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
    209a:	7f c0       	rjmp	.+254    	; 0x219a <LCD_send_short_number+0x138>
	}
	else if (number<1000)
    209c:	83 e0       	ldi	r24, 0x03	; 3
    209e:	c8 3e       	cpi	r28, 0xE8	; 232
    20a0:	d8 07       	cpc	r29, r24
    20a2:	e0 f4       	brcc	.+56     	; 0x20dc <LCD_send_short_number+0x7a>
	{
		LCD_Send_Char((number/100)+48);
    20a4:	ce 01       	movw	r24, r28
    20a6:	64 e6       	ldi	r22, 0x64	; 100
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    20ae:	86 2f       	mov	r24, r22
    20b0:	80 5d       	subi	r24, 0xD0	; 208
    20b2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number/10%10)+48);
    20b6:	2a e0       	ldi	r18, 0x0A	; 10
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	ce 01       	movw	r24, r28
    20bc:	b9 01       	movw	r22, r18
    20be:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    20c2:	c8 2f       	mov	r28, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	b9 01       	movw	r22, r18
    20c8:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    20cc:	80 5d       	subi	r24, 0xD0	; 208
    20ce:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number%10)+48);	
    20d2:	8c 2f       	mov	r24, r28
    20d4:	80 5d       	subi	r24, 0xD0	; 208
    20d6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
    20da:	5f c0       	rjmp	.+190    	; 0x219a <LCD_send_short_number+0x138>
	}
	else if (number<10000)
    20dc:	87 e2       	ldi	r24, 0x27	; 39
    20de:	c0 31       	cpi	r28, 0x10	; 16
    20e0:	d8 07       	cpc	r29, r24
    20e2:	40 f5       	brcc	.+80     	; 0x2134 <LCD_send_short_number+0xd2>
	{
		LCD_Send_Char((number/1000)+48);
    20e4:	ce 01       	movw	r24, r28
    20e6:	68 ee       	ldi	r22, 0xE8	; 232
    20e8:	73 e0       	ldi	r23, 0x03	; 3
    20ea:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    20ee:	86 2f       	mov	r24, r22
    20f0:	80 5d       	subi	r24, 0xD0	; 208
    20f2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number/100%10)+48);
    20f6:	ce 01       	movw	r24, r28
    20f8:	64 e6       	ldi	r22, 0x64	; 100
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    2100:	cb 01       	movw	r24, r22
    2102:	0a e0       	ldi	r16, 0x0A	; 10
    2104:	10 e0       	ldi	r17, 0x00	; 0
    2106:	b8 01       	movw	r22, r16
    2108:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    210c:	80 5d       	subi	r24, 0xD0	; 208
    210e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number/10%10)+48);
    2112:	ce 01       	movw	r24, r28
    2114:	b8 01       	movw	r22, r16
    2116:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    211a:	c8 2f       	mov	r28, r24
    211c:	cb 01       	movw	r24, r22
    211e:	b8 01       	movw	r22, r16
    2120:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    2124:	80 5d       	subi	r24, 0xD0	; 208
    2126:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number%10)+48);	
    212a:	8c 2f       	mov	r24, r28
    212c:	80 5d       	subi	r24, 0xD0	; 208
    212e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
    2132:	33 c0       	rjmp	.+102    	; 0x219a <LCD_send_short_number+0x138>
	}
	else if (number<65536)
	{
		LCD_Send_Char((number/10000)+48);
    2134:	ce 01       	movw	r24, r28
    2136:	60 e1       	ldi	r22, 0x10	; 16
    2138:	77 e2       	ldi	r23, 0x27	; 39
    213a:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    213e:	86 2f       	mov	r24, r22
    2140:	80 5d       	subi	r24, 0xD0	; 208
    2142:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number/1000%10)+48);
    2146:	ce 01       	movw	r24, r28
    2148:	68 ee       	ldi	r22, 0xE8	; 232
    214a:	73 e0       	ldi	r23, 0x03	; 3
    214c:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    2150:	cb 01       	movw	r24, r22
    2152:	0a e0       	ldi	r16, 0x0A	; 10
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	b8 01       	movw	r22, r16
    2158:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    215c:	80 5d       	subi	r24, 0xD0	; 208
    215e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number/100%10)+48);
    2162:	ce 01       	movw	r24, r28
    2164:	64 e6       	ldi	r22, 0x64	; 100
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    216c:	cb 01       	movw	r24, r22
    216e:	b8 01       	movw	r22, r16
    2170:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    2174:	80 5d       	subi	r24, 0xD0	; 208
    2176:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number/10%10)+48);
    217a:	ce 01       	movw	r24, r28
    217c:	b8 01       	movw	r22, r16
    217e:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    2182:	c8 2f       	mov	r28, r24
    2184:	cb 01       	movw	r24, r22
    2186:	b8 01       	movw	r22, r16
    2188:	0e 94 84 12 	call	0x2508	; 0x2508 <__udivmodhi4>
    218c:	80 5d       	subi	r24, 0xD0	; 208
    218e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		LCD_Send_Char((number%10)+48);
    2192:	8c 2f       	mov	r24, r28
    2194:	80 5d       	subi	r24, 0xD0	; 208
    2196:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		
	}
	

}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	08 95       	ret

000021a4 <LCD_send_char_number>:

void LCD_send_char_number(unsigned char number)
{
    21a4:	cf 93       	push	r28
    21a6:	c8 2f       	mov	r28, r24
		if (number<10)
    21a8:	8a 30       	cpi	r24, 0x0A	; 10
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <LCD_send_char_number+0x10>
		{
			LCD_Send_Char(number+48);
    21ac:	80 5d       	subi	r24, 0xD0	; 208
    21ae:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
    21b2:	24 c0       	rjmp	.+72     	; 0x21fc <LCD_send_char_number+0x58>
		}
		else if (number<100)
    21b4:	84 36       	cpi	r24, 0x64	; 100
    21b6:	60 f4       	brcc	.+24     	; 0x21d0 <LCD_send_char_number+0x2c>
		{
			LCD_Send_Char((number/10)+48);
    21b8:	6a e0       	ldi	r22, 0x0A	; 10
    21ba:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__udivmodqi4>
    21be:	c9 2f       	mov	r28, r25
    21c0:	80 5d       	subi	r24, 0xD0	; 208
    21c2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Char((number%10)+48);
    21c6:	8c 2f       	mov	r24, r28
    21c8:	80 5d       	subi	r24, 0xD0	; 208
    21ca:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
    21ce:	16 c0       	rjmp	.+44     	; 0x21fc <LCD_send_char_number+0x58>
		}
		else if (number<256)
		{
			LCD_Send_Char((number/100)+48);
    21d0:	64 e6       	ldi	r22, 0x64	; 100
    21d2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__udivmodqi4>
    21d6:	80 5d       	subi	r24, 0xD0	; 208
    21d8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Char((number/10%10)+48);
    21dc:	2a e0       	ldi	r18, 0x0A	; 10
    21de:	8c 2f       	mov	r24, r28
    21e0:	62 2f       	mov	r22, r18
    21e2:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__udivmodqi4>
    21e6:	c9 2f       	mov	r28, r25
    21e8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <__udivmodqi4>
    21ec:	89 2f       	mov	r24, r25
    21ee:	80 5d       	subi	r24, 0xD0	; 208
    21f0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
			LCD_Send_Char((number%10)+48);
    21f4:	8c 2f       	mov	r24, r28
    21f6:	80 5d       	subi	r24, 0xD0	; 208
    21f8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
		}
}
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <LCD_String>:


void LCD_String(char *ptr)
{
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	ec 01       	movw	r28, r24
	while((*ptr)!='\0')
    2206:	88 81       	ld	r24, Y
    2208:	88 23       	and	r24, r24
    220a:	31 f0       	breq	.+12     	; 0x2218 <LCD_String+0x18>
			LCD_Send_Char((number%10)+48);
		}
}


void LCD_String(char *ptr)
    220c:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!='\0')
	{
		LCD_Send_Char(*ptr);
    220e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
}


void LCD_String(char *ptr)
{
	while((*ptr)!='\0')
    2212:	89 91       	ld	r24, Y+
    2214:	88 23       	and	r24, r24
    2216:	d9 f7       	brne	.-10     	; 0x220e <LCD_String+0xe>
	{
		LCD_Send_Char(*ptr);
		ptr++;
	
	}
}
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	08 95       	ret

0000221e <LCD_Clear_Screen>:



void LCD_Clear_Screen()
{
	LCD_Send_Cmd(CLEAR_SCREEN);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
    2224:	8f e1       	ldi	r24, 0x1F	; 31
    2226:	9e e4       	ldi	r25, 0x4E	; 78
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_Clear_Screen+0xa>
    222c:	00 c0       	rjmp	.+0      	; 0x222e <LCD_Clear_Screen+0x10>
    222e:	00 00       	nop
	_delay_ms(10);
}
    2230:	08 95       	ret

00002232 <LCD_Move_cursor>:


void LCD_Move_cursor(unsigned char row,unsigned char column)
{
	char data=0; 
	if ((row<1)||(row>2)||(column<1)||(column>16))
    2232:	98 2f       	mov	r25, r24
    2234:	91 50       	subi	r25, 0x01	; 1
    2236:	92 30       	cpi	r25, 0x02	; 2
    2238:	30 f4       	brcc	.+12     	; 0x2246 <LCD_Move_cursor+0x14>
    223a:	66 23       	and	r22, r22
    223c:	31 f0       	breq	.+12     	; 0x224a <LCD_Move_cursor+0x18>
    223e:	61 31       	cpi	r22, 0x11	; 17
    2240:	30 f4       	brcc	.+12     	; 0x224e <LCD_Move_cursor+0x1c>



void LCD_Move_cursor(unsigned char row,unsigned char column)
{
	char data=0; 
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <LCD_Move_cursor+0x1e>
	if ((row<1)||(row>2)||(column<1)||(column>16))
	{
		data=0x08;
    2246:	98 e0       	ldi	r25, 0x08	; 8
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <LCD_Move_cursor+0x1e>
    224a:	98 e0       	ldi	r25, 0x08	; 8
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <LCD_Move_cursor+0x1e>
    224e:	98 e0       	ldi	r25, 0x08	; 8
	}
	if (row==1)
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	19 f4       	brne	.+6      	; 0x225a <LCD_Move_cursor+0x28>
	{
		data=0X80+column-1;
    2254:	96 2f       	mov	r25, r22
    2256:	91 58       	subi	r25, 0x81	; 129
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <LCD_Move_cursor+0x30>
	}
	if(row==2)
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	11 f4       	brne	.+4      	; 0x2262 <LCD_Move_cursor+0x30>
	{
		data=0XC0+column-1;
    225e:	96 2f       	mov	r25, r22
    2260:	91 54       	subi	r25, 0x41	; 65
	}
	LCD_Send_Cmd(data);
    2262:	89 2f       	mov	r24, r25
    2264:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
}
    2268:	08 95       	ret

0000226a <LCD_Return_Home>:


void LCD_Return_Home()
{
	LCD_Send_Cmd(RETURN_HOME);
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
}
    2270:	08 95       	ret

00002272 <LCD_JENO_BRAND>:


void LCD_JENO_BRAND()
{
	LCD_Send_Cmd(64);
    2272:	80 e4       	ldi	r24, 0x40	; 64
    2274:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_Send_Cmd>
	 LCD_Send_Char(0B11111);//the up of (J)
    2278:	8f e1       	ldi	r24, 0x1F	; 31
    227a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    227e:	8f e1       	ldi	r24, 0x1F	; 31
    2280:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B00011);
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B00011);
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B00011);
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B00011);
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B00011);
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B00011);
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 
	 
	  LCD_Send_Char(0B00011);//the down of the (J)
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B00011);
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B00011);
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B00011);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B10011);
    22c0:	83 e1       	ldi	r24, 0x13	; 19
    22c2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B10011);
    22c6:	83 e1       	ldi	r24, 0x13	; 19
    22c8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B11111);
    22cc:	8f e1       	ldi	r24, 0x1F	; 31
    22ce:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  LCD_Send_Char(0B11111);
    22d2:	8f e1       	ldi	r24, 0x1F	; 31
    22d4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	
		 
	
	 LCD_Send_Char(0B11111);//the up of the (E)
    22d8:	8f e1       	ldi	r24, 0x1F	; 31
    22da:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    22de:	8f e1       	ldi	r24, 0x1F	; 31
    22e0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    22e4:	80 e1       	ldi	r24, 0x10	; 16
    22e6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    22ea:	80 e1       	ldi	r24, 0x10	; 16
    22ec:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    22f0:	80 e1       	ldi	r24, 0x10	; 16
    22f2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    22f6:	80 e1       	ldi	r24, 0x10	; 16
    22f8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    22fc:	8f e1       	ldi	r24, 0x1F	; 31
    22fe:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 
	 LCD_Send_Char(0B11111);
    2302:	8f e1       	ldi	r24, 0x1F	; 31
    2304:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);//the down of the (E)
    2308:	8f e1       	ldi	r24, 0x1F	; 31
    230a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    230e:	80 e1       	ldi	r24, 0x10	; 16
    2310:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    2314:	80 e1       	ldi	r24, 0x10	; 16
    2316:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    231a:	80 e1       	ldi	r24, 0x10	; 16
    231c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    2320:	80 e1       	ldi	r24, 0x10	; 16
    2322:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10000);
    2326:	80 e1       	ldi	r24, 0x10	; 16
    2328:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    232c:	8f e1       	ldi	r24, 0x1F	; 31
    232e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    2332:	8f e1       	ldi	r24, 0x1F	; 31
    2334:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 

	 LCD_Send_Char(0B10001);//the up of (N)
    2338:	81 e1       	ldi	r24, 0x11	; 17
    233a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    233e:	81 e1       	ldi	r24, 0x11	; 17
    2340:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11001);
    2344:	89 e1       	ldi	r24, 0x19	; 25
    2346:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11001);
    234a:	89 e1       	ldi	r24, 0x19	; 25
    234c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11001);
    2350:	89 e1       	ldi	r24, 0x19	; 25
    2352:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10101);
    2356:	85 e1       	ldi	r24, 0x15	; 21
    2358:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10101);
    235c:	85 e1       	ldi	r24, 0x15	; 21
    235e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10101);
    2362:	85 e1       	ldi	r24, 0x15	; 21
    2364:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	  
	  
	 LCD_Send_Char(0B10101);//the down of the (N)
    2368:	85 e1       	ldi	r24, 0x15	; 21
    236a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10101);
    236e:	85 e1       	ldi	r24, 0x15	; 21
    2370:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10101);
    2374:	85 e1       	ldi	r24, 0x15	; 21
    2376:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10011);
    237a:	83 e1       	ldi	r24, 0x13	; 19
    237c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10011);
    2380:	83 e1       	ldi	r24, 0x13	; 19
    2382:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10011);
    2386:	83 e1       	ldi	r24, 0x13	; 19
    2388:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    238c:	81 e1       	ldi	r24, 0x11	; 17
    238e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    2392:	81 e1       	ldi	r24, 0x11	; 17
    2394:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 
	 LCD_Send_Char(0B11111);//the up of the (O)
    2398:	8f e1       	ldi	r24, 0x1F	; 31
    239a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    239e:	8f e1       	ldi	r24, 0x1F	; 31
    23a0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23a4:	81 e1       	ldi	r24, 0x11	; 17
    23a6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23aa:	81 e1       	ldi	r24, 0x11	; 17
    23ac:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23b0:	81 e1       	ldi	r24, 0x11	; 17
    23b2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23b6:	81 e1       	ldi	r24, 0x11	; 17
    23b8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23bc:	81 e1       	ldi	r24, 0x11	; 17
    23be:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23c2:	81 e1       	ldi	r24, 0x11	; 17
    23c4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 
	 
	 LCD_Send_Char(0B10001);//the down of the (O)
    23c8:	81 e1       	ldi	r24, 0x11	; 17
    23ca:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23ce:	81 e1       	ldi	r24, 0x11	; 17
    23d0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23d4:	81 e1       	ldi	r24, 0x11	; 17
    23d6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23da:	81 e1       	ldi	r24, 0x11	; 17
    23dc:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23e0:	81 e1       	ldi	r24, 0x11	; 17
    23e2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B10001);
    23e6:	81 e1       	ldi	r24, 0x11	; 17
    23e8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111);
    23ec:	8f e1       	ldi	r24, 0x1F	; 31
    23ee:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Send_Char(0B11111); 
    23f2:	8f e1       	ldi	r24, 0x1F	; 31
    23f4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 
	 
	 LCD_Move_cursor(1,7);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	67 e0       	ldi	r22, 0x07	; 7
    23fc:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(0);
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(2,7);
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	67 e0       	ldi	r22, 0x07	; 7
    240a:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(1);
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(1,8);
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	68 e0       	ldi	r22, 0x08	; 8
    2418:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(2);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(2,8);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	68 e0       	ldi	r22, 0x08	; 8
    2426:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(3);
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(1,9);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	69 e0       	ldi	r22, 0x09	; 9
    2434:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(4);
    2438:	84 e0       	ldi	r24, 0x04	; 4
    243a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(2,9);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	69 e0       	ldi	r22, 0x09	; 9
    2442:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(5);
    2446:	85 e0       	ldi	r24, 0x05	; 5
    2448:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(1,10);
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	6a e0       	ldi	r22, 0x0A	; 10
    2450:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(6);
    2454:	86 e0       	ldi	r24, 0x06	; 6
    2456:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>
	 LCD_Move_cursor(2,10); 
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	6a e0       	ldi	r22, 0x0A	; 10
    245e:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_Move_cursor>
	 LCD_Send_Char(7);  
    2462:	87 e0       	ldi	r24, 0x07	; 7
    2464:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_Send_Char>

    2468:	08 95       	ret

0000246a <Led_vinit>:
 */ 
#include "DIO_DRIVER.h"

void Led_vinit(unsigned char port,unsigned char pin)
{
	DIO_SetPinDir(port,pin,1);
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
}
    2470:	08 95       	ret

00002472 <Led_von>:

void Led_von(unsigned char port,unsigned char pin)
{
	DIO_Write(port,pin,1);
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
}
    2478:	08 95       	ret

0000247a <Led_voff>:

void Led_voff(unsigned char port,unsigned char pin)
{
	DIO_Write(port,pin,0);
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 18 02 	call	0x430	; 0x430 <DIO_Write>
}
    2480:	08 95       	ret

00002482 <Led_vtoggle>:
void Led_vtoggle(unsigned char port,unsigned char pin)
{
	DIO_toggle_portregister(port,pin);
    2482:	0e 94 18 03 	call	0x630	; 0x630 <DIO_toggle_portregister>
}
    2486:	08 95       	ret

00002488 <Led_u8read_state>:

unsigned char Led_u8read_state(unsigned char port,unsigned pin)
{
	char return_value=0;
	return_value=DIO_u8read(port,pin);
    2488:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_u8read>
	return return_value;
}
    248c:	08 95       	ret

0000248e <Led_vend>:



void Led_vend(unsigned char port,unsigned char pin)
{
	DIO_SetPinDir(port,pin,0);
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
}
    2494:	08 95       	ret

00002496 <Button_vinit>:
 */ 
#include "DIO_DRIVER.h"

void Button_vinit (unsigned char port,unsigned char pin)
{
	DIO_SetPinDir(port,pin,0);
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_SetPinDir>
}
    249c:	08 95       	ret

0000249e <Button_u8read>:
 unsigned char Button_u8read(unsigned char port,unsigned char pin)
 {
	unsigned char return_value=0;
	return_value=DIO_u8read(port,pin);
    249e:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_u8read>
	return return_value;
 }
    24a2:	08 95       	ret

000024a4 <Button__pull_up_enable>:
 
void Button__pull_up_enable(unsigned char port_name,unsigned char pin,unsigned char enable)
 {
	 DIO_enable_pull_up(port_name,pin,enable);
    24a4:	0e 94 c4 03 	call	0x788	; 0x788 <DIO_enable_pull_up>
    24a8:	08 95       	ret

000024aa <Timer_CTC_interrupt_enable>:
#include <AVR/interrupt.h>

void Timer_CTC_interrupt_enable(void)
{
	//choosing the mode we want and it is the CTC mood (clear timer on compare match)
	set_bit(TCCR0,WGM01);
    24aa:	83 b7       	in	r24, 0x33	; 51
    24ac:	88 60       	ori	r24, 0x08	; 8
    24ae:	83 bf       	out	0x33, r24	; 51
	
	//choosing the clock the timer will be on
	clear_bit(TCCR0,CS00);
    24b0:	83 b7       	in	r24, 0x33	; 51
    24b2:	8e 7f       	andi	r24, 0xFE	; 254
    24b4:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0,CS01);
    24b6:	83 b7       	in	r24, 0x33	; 51
    24b8:	8d 7f       	andi	r24, 0xFD	; 253
    24ba:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0,CS02);
    24bc:	83 b7       	in	r24, 0x33	; 51
    24be:	84 60       	ori	r24, 0x04	; 4
    24c0:	83 bf       	out	0x33, r24	; 51
	
	//choosing the number in the OCR0 
	OCR0=250;
    24c2:	8a ef       	ldi	r24, 0xFA	; 250
    24c4:	8c bf       	out	0x3c, r24	; 60
	10 ms on the tick time which is 1024/8*10^6 which gives us aproximate number of 80 in the end of calculations
	*/
	
	
	//now we activate the register needed for interrupt activation
	sei();
    24c6:	78 94       	sei
	set_bit(TIMSK,OCIE0);
    24c8:	89 b7       	in	r24, 0x39	; 57
    24ca:	82 60       	ori	r24, 0x02	; 2
    24cc:	89 bf       	out	0x39, r24	; 57
	
	
}
    24ce:	08 95       	ret

000024d0 <TIMER_OVERFLOW_MOOD>:

void TIMER_OVERFLOW_MOOD()
{
	clear_bit(TCCR0,WGM00);
    24d0:	83 b7       	in	r24, 0x33	; 51
    24d2:	8f 7b       	andi	r24, 0xBF	; 191
    24d4:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0,WGM01);
    24d6:	83 b7       	in	r24, 0x33	; 51
    24d8:	87 7f       	andi	r24, 0xF7	; 247
    24da:	83 bf       	out	0x33, r24	; 51
	
	//choosing the clock the timer will be on
	clear_bit(TCCR0,CS00);//clock set to be system clock over 64
    24dc:	83 b7       	in	r24, 0x33	; 51
    24de:	8e 7f       	andi	r24, 0xFE	; 254
    24e0:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0,CS01);
    24e2:	83 b7       	in	r24, 0x33	; 51
    24e4:	8d 7f       	andi	r24, 0xFD	; 253
    24e6:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0,CS02);
    24e8:	83 b7       	in	r24, 0x33	; 51
    24ea:	84 60       	ori	r24, 0x04	; 4
    24ec:	83 bf       	out	0x33, r24	; 51
	


    24ee:	08 95       	ret

000024f0 <__udivmodqi4>:
    24f0:	99 1b       	sub	r25, r25
    24f2:	79 e0       	ldi	r23, 0x09	; 9
    24f4:	04 c0       	rjmp	.+8      	; 0x24fe <__udivmodqi4_ep>

000024f6 <__udivmodqi4_loop>:
    24f6:	99 1f       	adc	r25, r25
    24f8:	96 17       	cp	r25, r22
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <__udivmodqi4_ep>
    24fc:	96 1b       	sub	r25, r22

000024fe <__udivmodqi4_ep>:
    24fe:	88 1f       	adc	r24, r24
    2500:	7a 95       	dec	r23
    2502:	c9 f7       	brne	.-14     	; 0x24f6 <__udivmodqi4_loop>
    2504:	80 95       	com	r24
    2506:	08 95       	ret

00002508 <__udivmodhi4>:
    2508:	aa 1b       	sub	r26, r26
    250a:	bb 1b       	sub	r27, r27
    250c:	51 e1       	ldi	r21, 0x11	; 17
    250e:	07 c0       	rjmp	.+14     	; 0x251e <__udivmodhi4_ep>

00002510 <__udivmodhi4_loop>:
    2510:	aa 1f       	adc	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	a6 17       	cp	r26, r22
    2516:	b7 07       	cpc	r27, r23
    2518:	10 f0       	brcs	.+4      	; 0x251e <__udivmodhi4_ep>
    251a:	a6 1b       	sub	r26, r22
    251c:	b7 0b       	sbc	r27, r23

0000251e <__udivmodhi4_ep>:
    251e:	88 1f       	adc	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	5a 95       	dec	r21
    2524:	a9 f7       	brne	.-22     	; 0x2510 <__udivmodhi4_loop>
    2526:	80 95       	com	r24
    2528:	90 95       	com	r25
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	08 95       	ret

00002530 <do_rand>:
    2530:	8f 92       	push	r8
    2532:	9f 92       	push	r9
    2534:	af 92       	push	r10
    2536:	bf 92       	push	r11
    2538:	cf 92       	push	r12
    253a:	df 92       	push	r13
    253c:	ef 92       	push	r14
    253e:	ff 92       	push	r15
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	ec 01       	movw	r28, r24
    2546:	88 81       	ld	r24, Y
    2548:	99 81       	ldd	r25, Y+1	; 0x01
    254a:	aa 81       	ldd	r26, Y+2	; 0x02
    254c:	bb 81       	ldd	r27, Y+3	; 0x03
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	a1 05       	cpc	r26, r1
    2552:	b1 05       	cpc	r27, r1
    2554:	21 f4       	brne	.+8      	; 0x255e <do_rand+0x2e>
    2556:	84 e2       	ldi	r24, 0x24	; 36
    2558:	99 ed       	ldi	r25, 0xD9	; 217
    255a:	ab e5       	ldi	r26, 0x5B	; 91
    255c:	b7 e0       	ldi	r27, 0x07	; 7
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	2d e1       	ldi	r18, 0x1D	; 29
    2564:	33 ef       	ldi	r19, 0xF3	; 243
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	0e 94 1c 13 	call	0x2638	; 0x2638 <__divmodsi4>
    256e:	49 01       	movw	r8, r18
    2570:	5a 01       	movw	r10, r20
    2572:	27 ea       	ldi	r18, 0xA7	; 167
    2574:	31 e4       	ldi	r19, 0x41	; 65
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__mulsi3>
    257e:	6b 01       	movw	r12, r22
    2580:	7c 01       	movw	r14, r24
    2582:	c5 01       	movw	r24, r10
    2584:	b4 01       	movw	r22, r8
    2586:	2c ee       	ldi	r18, 0xEC	; 236
    2588:	34 ef       	ldi	r19, 0xF4	; 244
    258a:	4f ef       	ldi	r20, 0xFF	; 255
    258c:	5f ef       	ldi	r21, 0xFF	; 255
    258e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__mulsi3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	c8 0e       	add	r12, r24
    2598:	d9 1e       	adc	r13, r25
    259a:	ea 1e       	adc	r14, r26
    259c:	fb 1e       	adc	r15, r27
    259e:	f7 fe       	sbrs	r15, 7
    25a0:	08 c0       	rjmp	.+16     	; 0x25b2 <do_rand+0x82>
    25a2:	8f ef       	ldi	r24, 0xFF	; 255
    25a4:	9f ef       	ldi	r25, 0xFF	; 255
    25a6:	af ef       	ldi	r26, 0xFF	; 255
    25a8:	bf e7       	ldi	r27, 0x7F	; 127
    25aa:	c8 0e       	add	r12, r24
    25ac:	d9 1e       	adc	r13, r25
    25ae:	ea 1e       	adc	r14, r26
    25b0:	fb 1e       	adc	r15, r27
    25b2:	c8 82       	st	Y, r12
    25b4:	d9 82       	std	Y+1, r13	; 0x01
    25b6:	ea 82       	std	Y+2, r14	; 0x02
    25b8:	fb 82       	std	Y+3, r15	; 0x03
    25ba:	c6 01       	movw	r24, r12
    25bc:	9f 77       	andi	r25, 0x7F	; 127
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	cf 90       	pop	r12
    25ca:	bf 90       	pop	r11
    25cc:	af 90       	pop	r10
    25ce:	9f 90       	pop	r9
    25d0:	8f 90       	pop	r8
    25d2:	08 95       	ret

000025d4 <rand_r>:
    25d4:	0e 94 98 12 	call	0x2530	; 0x2530 <do_rand>
    25d8:	08 95       	ret

000025da <rand>:
    25da:	89 e2       	ldi	r24, 0x29	; 41
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	0e 94 98 12 	call	0x2530	; 0x2530 <do_rand>
    25e2:	08 95       	ret

000025e4 <srand>:
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	80 93 29 01 	sts	0x0129, r24
    25ec:	90 93 2a 01 	sts	0x012A, r25
    25f0:	a0 93 2b 01 	sts	0x012B, r26
    25f4:	b0 93 2c 01 	sts	0x012C, r27
    25f8:	08 95       	ret

000025fa <__mulsi3>:
    25fa:	62 9f       	mul	r22, r18
    25fc:	d0 01       	movw	r26, r0
    25fe:	73 9f       	mul	r23, r19
    2600:	f0 01       	movw	r30, r0
    2602:	82 9f       	mul	r24, r18
    2604:	e0 0d       	add	r30, r0
    2606:	f1 1d       	adc	r31, r1
    2608:	64 9f       	mul	r22, r20
    260a:	e0 0d       	add	r30, r0
    260c:	f1 1d       	adc	r31, r1
    260e:	92 9f       	mul	r25, r18
    2610:	f0 0d       	add	r31, r0
    2612:	83 9f       	mul	r24, r19
    2614:	f0 0d       	add	r31, r0
    2616:	74 9f       	mul	r23, r20
    2618:	f0 0d       	add	r31, r0
    261a:	65 9f       	mul	r22, r21
    261c:	f0 0d       	add	r31, r0
    261e:	99 27       	eor	r25, r25
    2620:	72 9f       	mul	r23, r18
    2622:	b0 0d       	add	r27, r0
    2624:	e1 1d       	adc	r30, r1
    2626:	f9 1f       	adc	r31, r25
    2628:	63 9f       	mul	r22, r19
    262a:	b0 0d       	add	r27, r0
    262c:	e1 1d       	adc	r30, r1
    262e:	f9 1f       	adc	r31, r25
    2630:	bd 01       	movw	r22, r26
    2632:	cf 01       	movw	r24, r30
    2634:	11 24       	eor	r1, r1
    2636:	08 95       	ret

00002638 <__divmodsi4>:
    2638:	97 fb       	bst	r25, 7
    263a:	09 2e       	mov	r0, r25
    263c:	05 26       	eor	r0, r21
    263e:	0e d0       	rcall	.+28     	; 0x265c <__divmodsi4_neg1>
    2640:	57 fd       	sbrc	r21, 7
    2642:	04 d0       	rcall	.+8      	; 0x264c <__divmodsi4_neg2>
    2644:	14 d0       	rcall	.+40     	; 0x266e <__udivmodsi4>
    2646:	0a d0       	rcall	.+20     	; 0x265c <__divmodsi4_neg1>
    2648:	00 1c       	adc	r0, r0
    264a:	38 f4       	brcc	.+14     	; 0x265a <__divmodsi4_exit>

0000264c <__divmodsi4_neg2>:
    264c:	50 95       	com	r21
    264e:	40 95       	com	r20
    2650:	30 95       	com	r19
    2652:	21 95       	neg	r18
    2654:	3f 4f       	sbci	r19, 0xFF	; 255
    2656:	4f 4f       	sbci	r20, 0xFF	; 255
    2658:	5f 4f       	sbci	r21, 0xFF	; 255

0000265a <__divmodsi4_exit>:
    265a:	08 95       	ret

0000265c <__divmodsi4_neg1>:
    265c:	f6 f7       	brtc	.-4      	; 0x265a <__divmodsi4_exit>
    265e:	90 95       	com	r25
    2660:	80 95       	com	r24
    2662:	70 95       	com	r23
    2664:	61 95       	neg	r22
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	8f 4f       	sbci	r24, 0xFF	; 255
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	08 95       	ret

0000266e <__udivmodsi4>:
    266e:	a1 e2       	ldi	r26, 0x21	; 33
    2670:	1a 2e       	mov	r1, r26
    2672:	aa 1b       	sub	r26, r26
    2674:	bb 1b       	sub	r27, r27
    2676:	fd 01       	movw	r30, r26
    2678:	0d c0       	rjmp	.+26     	; 0x2694 <__udivmodsi4_ep>

0000267a <__udivmodsi4_loop>:
    267a:	aa 1f       	adc	r26, r26
    267c:	bb 1f       	adc	r27, r27
    267e:	ee 1f       	adc	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	a2 17       	cp	r26, r18
    2684:	b3 07       	cpc	r27, r19
    2686:	e4 07       	cpc	r30, r20
    2688:	f5 07       	cpc	r31, r21
    268a:	20 f0       	brcs	.+8      	; 0x2694 <__udivmodsi4_ep>
    268c:	a2 1b       	sub	r26, r18
    268e:	b3 0b       	sbc	r27, r19
    2690:	e4 0b       	sbc	r30, r20
    2692:	f5 0b       	sbc	r31, r21

00002694 <__udivmodsi4_ep>:
    2694:	66 1f       	adc	r22, r22
    2696:	77 1f       	adc	r23, r23
    2698:	88 1f       	adc	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	1a 94       	dec	r1
    269e:	69 f7       	brne	.-38     	; 0x267a <__udivmodsi4_loop>
    26a0:	60 95       	com	r22
    26a2:	70 95       	com	r23
    26a4:	80 95       	com	r24
    26a6:	90 95       	com	r25
    26a8:	9b 01       	movw	r18, r22
    26aa:	ac 01       	movw	r20, r24
    26ac:	bd 01       	movw	r22, r26
    26ae:	cf 01       	movw	r24, r30
    26b0:	08 95       	ret

000026b2 <_exit>:
    26b2:	f8 94       	cli

000026b4 <__stop_program>:
    26b4:	ff cf       	rjmp	.-2      	; 0x26b4 <__stop_program>
